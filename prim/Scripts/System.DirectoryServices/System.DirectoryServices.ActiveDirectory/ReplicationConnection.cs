using System.Security.Permissions;

namespace System.DirectoryServices.ActiveDirectory;

/// <summary>The <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> class represents a replication connection.</summary>
[DirectoryServicesPermission(SecurityAction.LinkDemand, Unrestricted = true)]
public class ReplicationConnection : IDisposable
{
	/// <summary>Gets the name of this replication connection.</summary>
	/// <returns>A string that contains the user-defined name of this replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public string Name
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets the DNS name of the server that is the source of this replication connection.</summary>
	/// <returns>A string that contains the DNS name of the server that is the source of this replication connection.</returns>
	public string SourceServer
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets the DNS name of the server that is the destination of this replication connection.</summary>
	/// <returns>A string that contains the DNS name of the server that is the destination of this replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public string DestinationServer
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether this replication connection is enabled.</summary>
	/// <returns>
	///   <see langword="true" /> if this replication connection is enabled; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public bool Enabled
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets the type of transport that is used by this replication connection.</summary>
	/// <returns>One of the <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType" /> members that specifies the type of transport that is used by this replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public ActiveDirectoryTransportType TransportType
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether this replication connection was generated by the knowledge consistency checker (KCC).</summary>
	/// <returns>
	///   <see langword="true" /> if this replication connection was generated by the KCC; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public bool GeneratedByKcc
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether this replication connection supports reciprocal replication.</summary>
	/// <returns>
	///   <see langword="true" /> if this replication connection supports reciprocal replication; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public bool ReciprocalReplicationEnabled
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the change notification status of this replication connection.</summary>
	/// <returns>One of the <see cref="T:System.DirectoryServices.ActiveDirectory.NotificationStatus" /> members that specifies the change notification status of this replication connection.</returns>
	/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">When setting the property, the new value is not valid.</exception>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public NotificationStatus ChangeNotificationStatus
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether this replication connection compresses data.</summary>
	/// <returns>
	///   <see langword="true" /> if this replication connection uses data compression; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public bool DataCompressionEnabled
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether the replication schedule is owned by the user.</summary>
	/// <returns>
	///   <see langword="true" /> if the replication schedule is owned by the user; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public bool ReplicationScheduleOwnedByUser
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets the span of this replication connection.</summary>
	/// <returns>One of the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationSpan" /> members that specifies the span of this replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public ReplicationSpan ReplicationSpan
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the schedule on which the source server is available for replication.</summary>
	/// <returns>A <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> object that represents the schedule on which the source server is available for replication. If this property is <see langword="null" />, then the default schedule is used.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public ActiveDirectorySchedule ReplicationSchedule
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Retrieves the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> object that matches the specified target context and name.</summary>
	/// <param name="context">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> object that contains the target and credentials to search for.</param>
	/// <param name="name">The name of the connection to search for.</param>
	/// <returns>A <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> object that represents the connection.</returns>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">The connection could not be found.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ArgumentException">
	///   <paramref name="context" /> or <paramref name="name" /> is not valid.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="context" /> or <paramref name="name" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.UnauthorizedAccessException">The specified account does not have permission to perform this operation.</exception>
	public static ReplicationConnection FindByName(DirectoryContext context, string name)
	{
		throw new NotImplementedException();
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> class, using the specified context, name, and source server.</summary>
	/// <param name="context">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> object that contains the target and credentials with which to establish a replication connection.</param>
	/// <param name="name">The user-defined name of the connection.</param>
	/// <param name="sourceServer">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryServer" /> object that identifies the source server of the connection.</param>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ArgumentException">This exception will occur for any one of the following reasons:  
	///
	/// The target of the <paramref name="context" /> parameter is not a domain controller or AD LDS instance.  
	///
	/// <paramref name="sourceServer" /> is invalid or an empty string.  
	///
	/// The target specified in the <paramref name="context" /> parameter does not match the server type specified in the <paramref name="sourceServer" /> parameter. The servers must both be either domain controllers or AD LDS instances.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are domain controllers, but are not in the same forest.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are AD LDS instances, but do not belong to the same configuration set.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="context" /> or <paramref name="sourceServer" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Security.Authentication.AuthenticationException">The credentials that were supplied are not valid.</exception>
	public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer)
		: this(context, name, sourceServer, null, ActiveDirectoryTransportType.Rpc)
	{
		throw new NotImplementedException();
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> class, using the specified context, name, source server, and schedule.</summary>
	/// <param name="context">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> object that contains the target and credentials with which to establish a replication connection.</param>
	/// <param name="name">The user-defined name of the connection.</param>
	/// <param name="sourceServer">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryServer" /> object that identifies the source server of the connection.</param>
	/// <param name="schedule">A <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> object that specifies when the source is available for replication.</param>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ArgumentException">This exception will occur for any one of the following reasons:  
	///
	/// The target of the <paramref name="context" /> parameter is not a domain controller or AD LDS instance.  
	///
	/// <paramref name="sourceServer" /> is invalid or an empty string.  
	///
	/// The target specified in the <paramref name="context" /> parameter does not match the server type specified in the <paramref name="sourceServer" /> parameter. The servers must both be either domain controllers or AD LDS instances.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are domain controllers, but are not in the same forest.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are AD LDS instances, but do not belong to the same configuration set.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="context" />, <paramref name="sourceServer" /> or <paramref name="schedule" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Security.Authentication.AuthenticationException">The credentials that were supplied are not valid.</exception>
	public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule)
		: this(context, name, sourceServer, schedule, ActiveDirectoryTransportType.Rpc)
	{
		throw new NotImplementedException();
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> class, using the specified context, name, source server, and transport type.</summary>
	/// <param name="context">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> object that contains the target and credentials to establish a replication connection with.</param>
	/// <param name="name">The user-defined name of the connection.</param>
	/// <param name="sourceServer">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryServer" /> object that identifies the source server of the connection.</param>
	/// <param name="transport">One of the <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType" /> members that specifies the transport type of the connection.</param>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ArgumentException">This exception will occur for any one of the following reasons:  
	///
	/// The target of the <paramref name="context" /> parameter is not a domain controller or AD LDS instance.  
	///
	/// <paramref name="sourceServer" /> is invalid or an empty string.  
	///
	/// The target specified in the <paramref name="context" /> parameter does not match the server type specified in the <paramref name="sourceServer" /> parameter. The servers must both be either domain controllers or AD LDS instances.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are domain controllers, but are not in the same forest.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are AD LDS instances, but do not belong to the same configuration set.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="context" /> or <paramref name="sourceServer" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Security.Authentication.AuthenticationException">The credentials that were supplied are not valid.</exception>
	/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
	///   <paramref name="transport" /> is not a valid <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType" /> value.</exception>
	/// <exception cref="T:System.NotSupportedException">
	///   <paramref name="context" /> is an AD LDS instance and <paramref name="transport" /> is <see cref="F:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType.Smtp" />, which is not supported.</exception>
	public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectoryTransportType transport)
		: this(context, name, sourceServer, null, transport)
	{
		throw new NotImplementedException();
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> class, using the specified context, name, source server, schedule, and transport type.</summary>
	/// <param name="context">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> object that contains the target and credentials with which to establish a replication connection.</param>
	/// <param name="name">The user-defined name of the connection.</param>
	/// <param name="sourceServer">A <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryServer" /> object that identifies the source server of the connection.</param>
	/// <param name="schedule">A <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> object that specifies when the source is available for replication.</param>
	/// <param name="transport">One of the <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType" /> members that specifies the transport type of the connection.</param>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ArgumentException">This exception will occur for any one of the following reasons:  
	///
	/// The target of the <paramref name="context" /> parameter is not a domain controller or AD LDS instance.  
	///
	/// <paramref name="sourceServer" /> is invalid or an empty string.  
	///
	/// The target specified in the <paramref name="context" /> parameter does not match the server type specified in the <paramref name="sourceServer" /> parameter. The servers must both be either domain controllers or AD LDS instances.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are domain controllers, but are not in the same forest.  
	///
	/// The servers specified in the <paramref name="context" /> and <paramref name="sourceServer" /> parameters are AD LDS instances, but do not belong to the same configuration set.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="context" />, <paramref name="sourceServer" /> or <paramref name="schedule" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Security.Authentication.AuthenticationException">The credentials that were supplied are not valid.</exception>
	/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
	///   <paramref name="transport" /> is not valid.</exception>
	/// <exception cref="T:System.NotSupportedException">
	///   <paramref name="context" /> is an AD LDS instance and <paramref name="transport" /> is <see cref="F:System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType.Smtp" />, which is not supported.</exception>
	public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule, ActiveDirectoryTransportType transport)
	{
		throw new NotImplementedException();
	}

	/// <summary>Releases the unmanaged and managed resources held by the object.</summary>
	public void Dispose()
	{
		throw new NotImplementedException();
	}

	/// <summary>Releases the unmanaged and, optionally, the managed resources, held by the object.</summary>
	/// <param name="disposing">
	///   <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</param>
	protected virtual void Dispose(bool disposing)
	{
		throw new NotImplementedException();
	}

	/// <summary>Deletes this replication connection.</summary>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	/// <exception cref="T:System.InvalidOperationException">The <see cref="T:System.DirectoryServices.ActiveDirectory.ReplicationConnection" /> object has not yet been saved to the underlying directory store.</exception>
	/// <exception cref="T:System.UnauthorizedAccessException">The specified account does not have permission to perform this operation.</exception>
	public void Delete()
	{
		throw new NotImplementedException();
	}

	/// <summary>Commits the replication connection to the server. The replication connection object does not actually exist in Active Directory Domain Services until this method is called.</summary>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">A call to the underlying directory service resulted in an error.</exception>
	/// <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">The target server is either busy or unavailable.</exception>
	/// <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
	/// <exception cref="T:System.UnauthorizedAccessException">The specified account does not have permission to perform this operation.</exception>
	public void Save()
	{
		throw new NotImplementedException();
	}

	/// <summary>Retrieves the name of the replication connection.</summary>
	/// <returns>A string that contains the name of the replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	public override string ToString()
	{
		throw new NotImplementedException();
	}

	/// <summary>Retrieves a <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the replication connection.</summary>
	/// <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the target of the replication connection.</returns>
	/// <exception cref="T:System.ObjectDisposedException">The current object has been disposed.</exception>
	/// <exception cref="T:System.InvalidOperationException">The current object has not been committed to the server. <see cref="M:System.DirectoryServices.ActiveDirectory.ReplicationConnection.Save" /> must be called first.</exception>
	public DirectoryEntry GetDirectoryEntry()
	{
		throw new NotImplementedException();
	}
}
