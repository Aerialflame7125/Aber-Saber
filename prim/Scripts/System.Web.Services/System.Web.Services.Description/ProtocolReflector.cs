using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Web.Services.Protocols;
using System.Xml;
using System.Xml.Serialization;

namespace System.Web.Services.Description;

/// <summary>Provides common functionality across communication protocols for creating <see cref="T:System.Web.Services.Description.ServiceDescription" /> objects from classes that are identified as Web services.</summary>
[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
[PermissionSet(SecurityAction.LinkDemand, Name = "FullTrust")]
public abstract class ProtocolReflector
{
	private class ReflectedBinding
	{
		public WebServiceBindingAttribute bindingAttr;

		public ArrayList methodList;

		internal ReflectedBinding()
		{
		}

		internal ReflectedBinding(WebServiceBindingAttribute bindingAttr)
		{
			this.bindingAttr = bindingAttr;
		}
	}

	private ServiceDescriptionReflector reflector;

	private LogicalMethodInfo method;

	private Operation operation;

	private OperationBinding operationBinding;

	private Port port;

	private PortType portType;

	private Binding binding;

	private WebMethodAttribute methodAttr;

	private Message inputMessage;

	private Message outputMessage;

	private MessageCollection headerMessages;

	private ServiceDescription bindingServiceDescription;

	private CodeIdentifiers portNames;

	private bool emptyBinding;

	internal bool IsEmptyBinding => emptyBinding;

	/// <summary>Gets the Web Services Description Language (WSDL) service that the protocol reflector is currently generating to contain a reference to the binding being generated.</summary>
	/// <returns>The Web Services Description Language (WSDL) service that the protocol reflector is currently generating to contain a reference to the binding being generated.</returns>
	public Service Service => reflector.Service;

	/// <summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" /> object currently being created to contain the binding being generated.</summary>
	/// <returns>The <see cref="T:System.Web.Services.Description.ServiceDescription" /> object currently being created to contain the binding being generated.</returns>
	public ServiceDescription ServiceDescription => reflector.ServiceDescription;

	/// <summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" /> objects that have so far been created and added to the corresponding to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" /> obtained through the <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" /> property of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance. </summary>
	/// <returns>The <see cref="T:System.Web.Services.Description.ServiceDescription" /> objects that have so far been created and added to the corresponding to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" /> obtained through the <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" /> property of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</returns>
	public ServiceDescriptionCollection ServiceDescriptions => reflector.ServiceDescriptions;

	internal List<Action<Uri>> UriFixups => reflector.UriFixups;

	/// <summary>Gets the XML schemas being generated by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</summary>
	/// <returns>The XML schemas being generated by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</returns>
	public XmlSchemas Schemas => reflector.Schemas;

	/// <summary>Gets the <see cref="T:System.Xml.Serialization.XmlSchemaExporter" /> instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</summary>
	/// <returns>The <see cref="T:System.Xml.Serialization.XmlSchemaExporter" /> instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</returns>
	public XmlSchemaExporter SchemaExporter => reflector.SchemaExporter;

	/// <summary>Gets the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</summary>
	/// <returns>The <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> instance.</returns>
	public XmlReflectionImporter ReflectionImporter => reflector.ReflectionImporter;

	/// <summary>Gets the default namespace, as identified by the associated <see cref="T:System.Web.Services.Description.ServiceDescription" /> object's <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" /> property.</summary>
	/// <returns>The default namespace, as identified by the associated <see cref="T:System.Web.Services.Description.ServiceDescription" /> object's <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" /> property.</returns>
	public string DefaultNamespace => reflector.ServiceAttribute.Namespace;

	/// <summary>Gets the endpoint of the associated Web service as a Uniform Resource Locator (URL), obtained from the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> object.</summary>
	/// <returns>The endpoint of the associated Web service as a Uniform Resource Locator (URL), obtained from the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" /> object.</returns>
	public string ServiceUrl => reflector.ServiceUrl;

	/// <summary>Gets the type of the Web service class being reflected to produce <see cref="T:System.Web.Services.Description.ServiceDescription" /> objects.</summary>
	/// <returns>The type of the Web service class being reflected to produce <see cref="T:System.Web.Services.Description.ServiceDescription" /> objects.</returns>
	public Type ServiceType => reflector.ServiceType;

	/// <summary>Gets the Web service method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />.</summary>
	/// <returns>The Web service method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />.</returns>
	public LogicalMethodInfo Method => method;

	/// <summary>Gets the Web Services Description Language (WSDL) binding currently being generated and added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />.</summary>
	/// <returns>The Web Services Description Language (WSDL) binding currently being generated and added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />.</returns>
	public Binding Binding => binding;

	/// <summary>Gets the Web Services Description Language (WSDL) <see langword="portType" /> that the protocol reflector is currently generating to be implemented by the binding being generated.</summary>
	/// <returns>The Web Services Description Language (WSDL) <see langword="portType" /> that the protocol reflector is currently generating to be implemented by the binding being generated.</returns>
	public PortType PortType => portType;

	/// <summary>Gets the Web Services Description Language (WSDL) port that the protocol reflector is currently generating to contain a reference to the binding being generated.</summary>
	/// <returns>The Web Services Description Language (WSDL) port that the protocol reflector is currently generating to contain a reference to the binding being generated.</returns>
	public Port Port => port;

	/// <summary>Gets the abstract Web Services Description Language (WSDL) operation that the protocol reflector is currently generating from a Web service method.</summary>
	/// <returns>The abstract Web Services Description Language (WSDL) operation that the protocol reflector is currently generating from a Web service method</returns>
	public Operation Operation => operation;

	/// <summary>Gets the Web Services Description Language (WSDL) operation binding that the protocol importer is currently generating from a Web service method.</summary>
	/// <returns>The Web Services Description Language (WSDL) operation binding that the protocol importer is currently generating from a Web service method.</returns>
	public OperationBinding OperationBinding => operationBinding;

	/// <summary>Gets the <see cref="T:System.Web.Services.WebMethodAttribute" /> for the method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />.</summary>
	/// <returns>The <see cref="T:System.Web.Services.WebMethodAttribute" /> for the method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" /></returns>
	public WebMethodAttribute MethodAttribute => methodAttr;

	/// <summary>Gets the Web service methods belonging to the Web service class, as identified by the associated <see cref="T:System.Web.Services.Description.ProtocolReflector" /> object's <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" /> property.</summary>
	/// <returns>The Web service methods belonging to the Web service class, as identified by the associated <see cref="T:System.Web.Services.Description.ProtocolReflector" /> object's <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" /> property.</returns>
	public LogicalMethodInfo[] Methods => reflector.Methods;

	internal Hashtable ReflectionContext => reflector.ReflectionContext;

	/// <summary>Gets the Web Services Description Language (WSDL) input message for the abstract operation that the protocol reflector is currently generating from a Web service method.</summary>
	/// <returns>The Web Services Description Language (WSDL) input message for the abstract operation that the protocol reflector is currently generating from a Web service method.</returns>
	public Message InputMessage
	{
		get
		{
			if (inputMessage == null)
			{
				string text = XmlConvert.EncodeLocalName((methodAttr.MessageName.Length == 0) ? Method.Name : methodAttr.MessageName);
				bool num = text != Method.Name;
				inputMessage = new Message();
				inputMessage.Name = text + ProtocolName + "In";
				OperationInput operationInput = new OperationInput();
				if (num)
				{
					operationInput.Name = text;
				}
				operationInput.Message = new XmlQualifiedName(inputMessage.Name, bindingServiceDescription.TargetNamespace);
				operation.Messages.Add(operationInput);
				OperationBinding.Input = new InputBinding();
				if (num)
				{
					OperationBinding.Input.Name = text;
				}
			}
			return inputMessage;
		}
	}

	/// <summary>Gets the Web Services Description Language (WSDL) output message for the abstract operation that the protocol reflector is currently generating from a Web service method.</summary>
	/// <returns>The Web Services Description Language (WSDL) output message for the abstract operation that the protocol reflector is currently generating from a Web service method.</returns>
	public Message OutputMessage
	{
		get
		{
			if (outputMessage == null)
			{
				string text = XmlConvert.EncodeLocalName((methodAttr.MessageName.Length == 0) ? Method.Name : methodAttr.MessageName);
				bool num = text != Method.Name;
				outputMessage = new Message();
				outputMessage.Name = text + ProtocolName + "Out";
				OperationOutput operationOutput = new OperationOutput();
				if (num)
				{
					operationOutput.Name = text;
				}
				operationOutput.Message = new XmlQualifiedName(outputMessage.Name, bindingServiceDescription.TargetNamespace);
				operation.Messages.Add(operationOutput);
				OperationBinding.Output = new OutputBinding();
				if (num)
				{
					OperationBinding.Output.Name = text;
				}
			}
			return outputMessage;
		}
	}

	/// <summary>Gets SOAP header message definitions to be added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" /> object.</summary>
	/// <returns>SOAP header message definitions to be added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" /> object.</returns>
	public MessageCollection HeaderMessages
	{
		get
		{
			if (headerMessages == null)
			{
				headerMessages = new MessageCollection(bindingServiceDescription);
			}
			return headerMessages;
		}
	}

	internal virtual WsiProfiles ConformsTo => WsiProfiles.None;

	/// <summary>When overridden in a derived class, gets the name of the protocol being used.</summary>
	/// <returns>The name of the protocol being used.</returns>
	public abstract string ProtocolName { get; }

	internal void Initialize(ServiceDescriptionReflector reflector)
	{
		this.reflector = reflector;
	}

	private void MoveToMethod(LogicalMethodInfo method)
	{
		this.method = method;
		methodAttr = method.MethodAttribute;
	}

	internal void Reflect()
	{
		emptyBinding = false;
		Hashtable hashtable = new Hashtable();
		Hashtable hashtable2 = new Hashtable();
		for (int i = 0; i < reflector.Methods.Length; i++)
		{
			MoveToMethod(reflector.Methods[i]);
			string text = ReflectMethodBinding();
			if (text == null)
			{
				text = string.Empty;
			}
			ReflectedBinding reflectedBinding = (ReflectedBinding)hashtable2[text];
			if (reflectedBinding == null)
			{
				reflectedBinding = new ReflectedBinding();
				reflectedBinding.bindingAttr = WebServiceBindingReflector.GetAttribute(method, text);
				if (reflectedBinding.bindingAttr == null || (text.Length == 0 && reflectedBinding.bindingAttr.Location.Length > 0))
				{
					reflectedBinding.bindingAttr = new WebServiceBindingAttribute();
				}
				hashtable2.Add(text, reflectedBinding);
			}
			if (reflectedBinding.bindingAttr.Location.Length == 0)
			{
				if (reflectedBinding.methodList == null)
				{
					reflectedBinding.methodList = new ArrayList();
				}
				reflectedBinding.methodList.Add(method);
				hashtable[reflectedBinding.bindingAttr.Name] = method;
			}
			else
			{
				AddImport(reflectedBinding.bindingAttr.Namespace, reflectedBinding.bindingAttr.Location);
			}
		}
		foreach (ReflectedBinding value in hashtable2.Values)
		{
			ReflectBinding(value);
		}
		if (hashtable2.Count == 0)
		{
			emptyBinding = true;
			ReflectedBinding reflectedBinding3 = null;
			object[] customAttributes = ServiceType.GetCustomAttributes(typeof(WebServiceBindingAttribute), inherit: false);
			for (int j = 0; j < customAttributes.Length; j++)
			{
				WebServiceBindingAttribute webServiceBindingAttribute = (WebServiceBindingAttribute)customAttributes[j];
				if (hashtable[webServiceBindingAttribute.Name] == null)
				{
					if (reflectedBinding3 != null)
					{
						reflectedBinding3 = null;
						break;
					}
					reflectedBinding3 = new ReflectedBinding(webServiceBindingAttribute);
				}
			}
			if (reflectedBinding3 != null)
			{
				ReflectBinding(reflectedBinding3);
			}
		}
		Type[] interfaces = ServiceType.GetInterfaces();
		for (int k = 0; k < interfaces.Length; k++)
		{
			object[] customAttributes2 = interfaces[k].GetCustomAttributes(typeof(WebServiceBindingAttribute), inherit: false);
			for (int l = 0; l < customAttributes2.Length; l++)
			{
				WebServiceBindingAttribute webServiceBindingAttribute2 = (WebServiceBindingAttribute)customAttributes2[l];
				if (hashtable[webServiceBindingAttribute2.Name] == null)
				{
					ReflectBinding(new ReflectedBinding(webServiceBindingAttribute2));
				}
			}
		}
		ReflectDescription();
	}

	private void AddImport(string ns, string location)
	{
		foreach (Import import3 in ServiceDescription.Imports)
		{
			if (import3.Namespace == ns && import3.Location == location)
			{
				return;
			}
		}
		Import import2 = new Import();
		import2.Namespace = ns;
		import2.Location = location;
		ServiceDescription.Imports.Add(import2);
	}

	/// <summary>Gets a <see cref="T:System.Web.Services.Description.ServiceDescription" /> object for a given XML namespace and the applicable communication protocol.</summary>
	/// <param name="ns">The <see cref="T:System.Web.Services.Description.ServiceDescription" /> instance obtained subsequently gets populated with objects that correspond to Web Services Description Language (WSDL) entities that are reflected from the input Web service class.</param>
	/// <returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" /> object for a given XML namespace and the applicable communication protocol.</returns>
	public ServiceDescription GetServiceDescription(string ns)
	{
		ServiceDescription serviceDescription = ServiceDescriptions[ns];
		if (serviceDescription == null)
		{
			serviceDescription = new ServiceDescription();
			serviceDescription.TargetNamespace = ns;
			ServiceDescriptions.Add(serviceDescription);
		}
		return serviceDescription;
	}

	private void ReflectBinding(ReflectedBinding reflectedBinding)
	{
		string text = XmlConvert.EncodeLocalName(reflectedBinding.bindingAttr.Name);
		string text2 = reflectedBinding.bindingAttr.Namespace;
		if (text.Length == 0)
		{
			text = Service.Name + ProtocolName;
		}
		if (text2.Length == 0)
		{
			text2 = ServiceDescription.TargetNamespace;
		}
		WsiProfiles wsiProfiles = WsiProfiles.None;
		if (reflectedBinding.bindingAttr.Location.Length > 0)
		{
			portType = null;
			this.binding = null;
		}
		else
		{
			bindingServiceDescription = GetServiceDescription(text2);
			CodeIdentifiers codeIdentifiers = new CodeIdentifiers();
			foreach (Binding binding in bindingServiceDescription.Bindings)
			{
				codeIdentifiers.AddReserved(binding.Name);
			}
			text = codeIdentifiers.AddUnique(text, this.binding);
			portType = new PortType();
			this.binding = new Binding();
			portType.Name = text;
			this.binding.Name = text;
			this.binding.Type = new XmlQualifiedName(portType.Name, text2);
			wsiProfiles = reflectedBinding.bindingAttr.ConformsTo & ConformsTo;
			if (reflectedBinding.bindingAttr.EmitConformanceClaims && wsiProfiles != 0)
			{
				ServiceDescription.AddConformanceClaims(this.binding.GetDocumentationElement(), wsiProfiles);
			}
			bindingServiceDescription.Bindings.Add(this.binding);
			bindingServiceDescription.PortTypes.Add(portType);
		}
		if (portNames == null)
		{
			portNames = new CodeIdentifiers();
			foreach (Port port in Service.Ports)
			{
				portNames.AddReserved(port.Name);
			}
		}
		this.port = new Port();
		this.port.Binding = new XmlQualifiedName(text, text2);
		this.port.Name = portNames.AddUnique(text, this.port);
		Service.Ports.Add(this.port);
		BeginClass();
		if (reflectedBinding.methodList != null && reflectedBinding.methodList.Count > 0)
		{
			foreach (LogicalMethodInfo method in reflectedBinding.methodList)
			{
				MoveToMethod(method);
				operation = new Operation();
				operation.Name = XmlConvert.EncodeLocalName(method.Name);
				if (methodAttr.Description != null && methodAttr.Description.Length > 0)
				{
					operation.Documentation = methodAttr.Description;
				}
				operationBinding = new OperationBinding();
				operationBinding.Name = operation.Name;
				inputMessage = null;
				outputMessage = null;
				headerMessages = null;
				if (!ReflectMethod())
				{
					continue;
				}
				if (inputMessage != null)
				{
					bindingServiceDescription.Messages.Add(inputMessage);
				}
				if (outputMessage != null)
				{
					bindingServiceDescription.Messages.Add(outputMessage);
				}
				if (headerMessages != null)
				{
					foreach (Message headerMessage in headerMessages)
					{
						bindingServiceDescription.Messages.Add(headerMessage);
					}
				}
				this.binding.Operations.Add(operationBinding);
				portType.Operations.Add(operation);
			}
		}
		if (this.binding != null && wsiProfiles == WsiProfiles.BasicProfile1_1 && ProtocolName == "Soap")
		{
			BasicProfileViolationCollection basicProfileViolationCollection = new BasicProfileViolationCollection();
			WebServicesInteroperability.AnalyzeBinding(this.binding, bindingServiceDescription, ServiceDescriptions, basicProfileViolationCollection);
			if (basicProfileViolationCollection.Count > 0)
			{
				throw new InvalidOperationException(Res.GetString("WebWsiViolation", ServiceType.FullName, basicProfileViolationCollection.ToString()));
			}
		}
		EndClass();
	}

	/// <summary>When overridden in a derived class, performs processing before <see cref="T:System.Web.Services.Description.ProtocolReflector" /> calls the <see cref="M:System.Web.Services.Description.ProtocolReflector.ReflectMethod" /> method for each of the methods for a binding.</summary>
	protected virtual void BeginClass()
	{
	}

	/// <summary>When overridden in a derived class, generates method-specific information that gets placed in a <see cref="T:System.Web.Services.Description.ServiceDescription" /> object corresponding to a binding.</summary>
	/// <returns>Method-specific information that gets placed in a <see cref="T:System.Web.Services.Description.ServiceDescription" /> object corresponding to a binding.</returns>
	protected abstract bool ReflectMethod();

	/// <summary>When overridden in a derived class, returns the name of the binding that a method belongs to.</summary>
	/// <returns>The name of the binding that a method belongs to.</returns>
	protected virtual string ReflectMethodBinding()
	{
		return string.Empty;
	}

	/// <summary>When overridden in a derived class, performs processing after <see cref="ProtocolReflector" /> has called the <see cref="M:System.Web.Services.Description.ProtocolReflector.ReflectMethod" /> method for each of the methods for a binding.</summary>
	protected virtual void EndClass()
	{
	}

	/// <summary>When overridden in a derived class, generates service-specific description information that gets placed in a <see cref="T:System.Web.Services.Description.ServiceDescription" /> object that corresponds to a binding.</summary>
	protected virtual void ReflectDescription()
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ProtocolReflector" /> class. </summary>
	protected ProtocolReflector()
	{
	}
}
