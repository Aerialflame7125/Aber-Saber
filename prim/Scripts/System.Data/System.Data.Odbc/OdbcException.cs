using System.Data.Common;
using System.Runtime.Serialization;
using System.Text;

namespace System.Data.Odbc;

/// <summary>The exception that is generated when a warning or error is returned by an ODBC data source. This class cannot be inherited.</summary>
[Serializable]
public sealed class OdbcException : DbException
{
	private OdbcErrorCollection _odbcErrors = new OdbcErrorCollection();

	/// <summary>Gets a collection of one or more <see cref="T:System.Data.Odbc.OdbcError" /> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for ODBC.</summary>
	/// <returns>The collected instances of the <see cref="T:System.Data.Odbc.OdbcError" /> class.</returns>
	public OdbcErrorCollection Errors => _odbcErrors;

	/// <summary>Gets the name of the ODBC driver that generated the error.</summary>
	/// <returns>The name of the ODBC driver that generated the error.</returns>
	public override string Source
	{
		get
		{
			if (0 < Errors.Count)
			{
				string source = Errors[0].Source;
				if (!string.IsNullOrEmpty(source))
				{
					return source;
				}
				return "";
			}
			return "";
		}
	}

	internal static OdbcException CreateException(OdbcErrorCollection errors, ODBC32.RetCode retcode)
	{
		StringBuilder stringBuilder = new StringBuilder();
		foreach (OdbcError error in errors)
		{
			if (stringBuilder.Length > 0)
			{
				stringBuilder.Append(Environment.NewLine);
			}
			stringBuilder.Append(global::SR.GetString("{0} [{1}] {2}", ODBC32.RetcodeToString(retcode), error.SQLState, error.Message));
		}
		return new OdbcException(stringBuilder.ToString(), errors);
	}

	internal OdbcException(string message, OdbcErrorCollection errors)
		: base(message)
	{
		_odbcErrors = errors;
		base.HResult = -2146232009;
	}

	/// <summary>This member overrides <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</summary>
	/// <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
	/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="si" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
	public override void GetObjectData(SerializationInfo si, StreamingContext context)
	{
		base.GetObjectData(si, context);
	}
}
