using System.Collections;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;
using System.Runtime.Serialization;
using System.Text;

namespace System.Data.SqlClient;

/// <summary>The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.</summary>
[Serializable]
public sealed class SqlException : DbException
{
	private const string OriginalClientConnectionIdKey = "OriginalClientConnectionId";

	private const string RoutingDestinationKey = "RoutingDestination";

	private const int SqlExceptionHResult = -2146232060;

	private SqlErrorCollection _errors;

	private Guid _clientConnectionId = Guid.Empty;

	internal bool _doNotReconnect;

	private const string DEF_MESSAGE = "SQL Exception has occured.";

	/// <summary>Gets a collection of one or more <see cref="T:System.Data.SqlClient.SqlError" /> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</summary>
	/// <returns>The collected instances of the <see cref="T:System.Data.SqlClient.SqlError" /> class.</returns>
	public SqlErrorCollection Errors
	{
		get
		{
			if (_errors == null)
			{
				_errors = new SqlErrorCollection();
			}
			return _errors;
		}
	}

	/// <summary>Represents the client connection ID. For more information, see Data Tracing in ADO.NET.</summary>
	/// <returns>The client connection ID.</returns>
	public Guid ClientConnectionId => _clientConnectionId;

	/// <summary>Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</summary>
	/// <returns>A value from 1 to 25 that indicates the severity level of the error.</returns>
	public byte Class => Errors[0].Class;

	/// <summary>Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</summary>
	/// <returns>The line number within the Transact-SQL command batch or stored procedure that generated the error.</returns>
	public int LineNumber => Errors[0].LineNumber;

	/// <summary>Gets a number that identifies the type of error.</summary>
	/// <returns>The number that identifies the type of error.</returns>
	public int Number => Errors[0].Number;

	/// <summary>Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</summary>
	/// <returns>The name of the stored procedure or RPC.</returns>
	public string Procedure => Errors[0].Procedure;

	/// <summary>Gets the name of the computer that is running an instance of SQL Server that generated the error.</summary>
	/// <returns>The name of the computer running an instance of SQL Server.</returns>
	public string Server => Errors[0].Server;

	/// <summary>Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see Database Engine Events and Errors.</summary>
	/// <returns>The number representing the error code.</returns>
	public byte State => Errors[0].State;

	/// <summary>Gets the name of the provider that generated the error.</summary>
	/// <returns>The name of the provider that generated the error.</returns>
	public override string Source => Errors[0].Source;

	public override string Message
	{
		get
		{
			if (Errors.Count == 0)
			{
				return base.Message;
			}
			StringBuilder stringBuilder = new StringBuilder();
			if (base.Message != "SQL Exception has occured.")
			{
				stringBuilder.Append(base.Message);
				stringBuilder.Append("\n");
			}
			for (int i = 0; i < Errors.Count - 1; i++)
			{
				stringBuilder.Append(Errors[i].Message);
				stringBuilder.Append("\n");
			}
			stringBuilder.Append(Errors[Errors.Count - 1].Message);
			return stringBuilder.ToString();
		}
	}

	private SqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId)
		: base(message, innerException)
	{
		base.HResult = -2146232060;
		_errors = errorCollection;
		_clientConnectionId = conId;
	}

	/// <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
	/// <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
	/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="si" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
	public override void GetObjectData(SerializationInfo si, StreamingContext context)
	{
		base.GetObjectData(si, context);
	}

	/// <summary>Returns a string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object, and includes the client connection ID (for more information, see <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />).</summary>
	/// <returns>A string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object.<see cref="T:System.String" />.</returns>
	public override string ToString()
	{
		StringBuilder stringBuilder = new StringBuilder(base.ToString());
		stringBuilder.AppendLine();
		stringBuilder.AppendFormat(SQLMessage.ExClientConnectionId(), _clientConnectionId);
		if (Number != 0)
		{
			stringBuilder.AppendLine();
			stringBuilder.AppendFormat(SQLMessage.ExErrorNumberStateClass(), Number, State, Class);
		}
		if (Data.Contains("OriginalClientConnectionId"))
		{
			stringBuilder.AppendLine();
			stringBuilder.AppendFormat(SQLMessage.ExOriginalClientConnectionId(), Data["OriginalClientConnectionId"]);
		}
		if (Data.Contains("RoutingDestination"))
		{
			stringBuilder.AppendLine();
			stringBuilder.AppendFormat(SQLMessage.ExRoutingDestination(), Data["RoutingDestination"]);
		}
		return stringBuilder.ToString();
	}

	internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion)
	{
		return CreateException(errorCollection, serverVersion, Guid.Empty);
	}

	internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException = null)
	{
		Guid conId = internalConnection?._clientConnectionId ?? Guid.Empty;
		SqlException ex = CreateException(errorCollection, serverVersion, conId, innerException);
		if (internalConnection != null)
		{
			if (internalConnection.OriginalClientConnectionId != Guid.Empty && internalConnection.OriginalClientConnectionId != internalConnection.ClientConnectionId)
			{
				ex.Data.Add("OriginalClientConnectionId", internalConnection.OriginalClientConnectionId);
			}
			if (!string.IsNullOrEmpty(internalConnection.RoutingDestination))
			{
				ex.Data.Add("RoutingDestination", internalConnection.RoutingDestination);
			}
		}
		return ex;
	}

	internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException = null)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < errorCollection.Count; i++)
		{
			if (i > 0)
			{
				stringBuilder.Append(Environment.NewLine);
			}
			stringBuilder.Append(errorCollection[i].Message);
		}
		if (innerException == null && errorCollection[0].Win32ErrorCode != 0 && errorCollection[0].Win32ErrorCode != -1)
		{
			innerException = new Win32Exception(errorCollection[0].Win32ErrorCode);
		}
		SqlException ex = new SqlException(stringBuilder.ToString(), errorCollection, innerException, conId);
		ex.Data.Add("HelpLink.ProdName", "Microsoft SQL Server");
		if (!string.IsNullOrEmpty(serverVersion))
		{
			ex.Data.Add("HelpLink.ProdVer", serverVersion);
		}
		ex.Data.Add("HelpLink.EvtSrc", "MSSQLServer");
		ex.Data.Add("HelpLink.EvtID", errorCollection[0].Number.ToString(CultureInfo.InvariantCulture));
		ex.Data.Add("HelpLink.BaseHelpUrl", "http://go.microsoft.com/fwlink");
		ex.Data.Add("HelpLink.LinkId", "20476");
		return ex;
	}

	internal SqlException InternalClone()
	{
		SqlException ex = new SqlException(Message, _errors, base.InnerException, _clientConnectionId);
		if (Data != null)
		{
			foreach (DictionaryEntry datum in Data)
			{
				ex.Data.Add(datum.Key, datum.Value);
			}
		}
		ex._doNotReconnect = _doNotReconnect;
		return ex;
	}
}
