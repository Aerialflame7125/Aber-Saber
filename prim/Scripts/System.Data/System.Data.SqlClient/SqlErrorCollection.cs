using System.Collections;
using System.Collections.Generic;

namespace System.Data.SqlClient;

/// <summary>Collects all errors generated by the .NET Framework Data Provider for SQL Server. This class cannot be inherited.</summary>
[Serializable]
public sealed class SqlErrorCollection : ICollection, IEnumerable
{
	private readonly List<object> _errors = new List<object>();

	/// <summary>Gets the number of errors in the collection.</summary>
	/// <returns>The total number of errors in the collection.</returns>
	public int Count => _errors.Count;

	/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
	/// <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
	object ICollection.SyncRoot => this;

	/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
	/// <returns>
	///   <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
	bool ICollection.IsSynchronized => false;

	/// <summary>Gets the error at the specified index.</summary>
	/// <param name="index">The zero-based index of the error to retrieve.</param>
	/// <returns>A <see cref="T:System.Data.SqlClient.SqlError" /> that contains the error at the specified index.</returns>
	/// <exception cref="T:System.IndexOutOfRangeException">Index parameter is outside array bounds.</exception>
	public SqlError this[int index] => (SqlError)_errors[index];

	internal SqlErrorCollection()
	{
	}

	/// <summary>Copies the elements of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection into an <see cref="T:System.Array" />, starting at the specified index.</summary>
	/// <param name="array">The <see cref="T:System.Array" /> to copy elements into.</param>
	/// <param name="index">The index from which to start copying into the <paramref name="array" /> parameter.</param>
	/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection is greater than the <see cref="P:System.Array.Length" /> of the <see cref="T:System.Array" />.</exception>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
	public void CopyTo(Array array, int index)
	{
		((ICollection)_errors).CopyTo(array, index);
	}

	/// <summary>Copies the elements of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection into a <see cref="T:System.Data.SqlClient.SqlErrorCollection" />, starting at the specified index.</summary>
	/// <param name="array">The <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> to copy the elements into.</param>
	/// <param name="index">The index from which to start copying into the <paramref name="array" /> parameter.</param>
	/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection is greater than the length of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</exception>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
	public void CopyTo(SqlError[] array, int index)
	{
		_errors.CopyTo(array, index);
	}

	/// <summary>Returns an enumerator that iterates through the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</summary>
	/// <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</returns>
	public IEnumerator GetEnumerator()
	{
		return _errors.GetEnumerator();
	}

	internal void Add(SqlError error)
	{
		_errors.Add(error);
	}
}
