namespace System.Data.Common;

/// <summary>Provides data for the <see langword="RowUpdated" /> event of a .NET Framework data provider.</summary>
public class RowUpdatedEventArgs : EventArgs
{
	private IDbCommand _command;

	private StatementType _statementType;

	private DataTableMapping _tableMapping;

	private Exception _errors;

	private DataRow _dataRow;

	private DataRow[] _dataRows;

	private UpdateStatus _status;

	private int _recordsAffected;

	/// <summary>Gets the <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</summary>
	/// <returns>The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</returns>
	public IDbCommand Command => _command;

	/// <summary>Gets any errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> was executed.</summary>
	/// <returns>The errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> was executed.</returns>
	public Exception Errors
	{
		get
		{
			return _errors;
		}
		set
		{
			_errors = value;
		}
	}

	/// <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
	/// <returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</returns>
	public int RecordsAffected => _recordsAffected;

	/// <summary>Gets the <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
	/// <returns>The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	public DataRow Row => _dataRow;

	internal DataRow[] Rows => _dataRows;

	/// <summary>Gets the number of rows processed in a batch of updated records.</summary>
	/// <returns>
	///   <see langword="int" /> that specifies the number of row processed.</returns>
	public int RowCount
	{
		get
		{
			DataRow[] dataRows = _dataRows;
			if (dataRows == null)
			{
				if (_dataRow == null)
				{
					return 0;
				}
				return 1;
			}
			return dataRows.Length;
		}
	}

	/// <summary>Gets the type of SQL statement executed.</summary>
	/// <returns>The type of SQL statement executed.</returns>
	public StatementType StatementType => _statementType;

	/// <summary>Gets the <see cref="T:System.Data.UpdateStatus" /> of the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> property.</summary>
	/// <returns>One of the <see cref="T:System.Data.UpdateStatus" /> values. The default is <see langword="Continue" />.</returns>
	public UpdateStatus Status
	{
		get
		{
			return _status;
		}
		set
		{
			if ((uint)value <= 3u)
			{
				_status = value;
				return;
			}
			throw ADP.InvalidUpdateStatus(value);
		}
	}

	/// <summary>Gets the <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
	/// <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	public DataTableMapping TableMapping => _tableMapping;

	/// <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</summary>
	/// <param name="dataRow">The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
	/// <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
	/// <param name="statementType">The type of SQL statement executed.</param>
	/// <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
	public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
	{
		if ((uint)statementType > 4u)
		{
			throw ADP.InvalidStatementType(statementType);
		}
		_dataRow = dataRow;
		_command = command;
		_statementType = statementType;
		_tableMapping = tableMapping;
	}

	internal void AdapterInit(DataRow[] dataRows)
	{
		_statementType = StatementType.Batch;
		_dataRows = dataRows;
		if (dataRows != null && 1 == dataRows.Length)
		{
			_dataRow = dataRows[0];
		}
	}

	internal void AdapterInit(int recordsAffected)
	{
		_recordsAffected = recordsAffected;
	}

	/// <summary>Copies references to the modified rows into the provided array.</summary>
	/// <param name="array">The array of <see cref="T:System.Data.DataRow" /> to copy into.</param>
	public void CopyToRows(DataRow[] array)
	{
		CopyToRows(array, 0);
	}

	/// <summary>Copies references to the modified rows into the provided array.</summary>
	/// <param name="array">The array of <see cref="T:System.Data.DataRow" /> to copy into.</param>
	/// <param name="arrayIndex">The index in the array to start copying into.</param>
	public void CopyToRows(DataRow[] array, int arrayIndex)
	{
		DataRow[] dataRows = _dataRows;
		if (dataRows != null)
		{
			dataRows.CopyTo(array, arrayIndex);
			return;
		}
		if (array == null)
		{
			throw ADP.ArgumentNull("array");
		}
		array[arrayIndex] = Row;
	}
}
