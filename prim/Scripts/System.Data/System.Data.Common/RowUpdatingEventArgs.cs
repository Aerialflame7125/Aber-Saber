namespace System.Data.Common;

/// <summary>Provides the data for the RowUpdating event of a .NET Framework data provider.</summary>
public class RowUpdatingEventArgs : EventArgs
{
	private IDbCommand _command;

	private StatementType _statementType;

	private DataTableMapping _tableMapping;

	private Exception _errors;

	private DataRow _dataRow;

	private UpdateStatus _status;

	/// <summary>Gets or sets the <see cref="T:System.Data.IDbCommand" /> object for an instance of this class.</summary>
	/// <returns>The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	protected virtual IDbCommand BaseCommand
	{
		get
		{
			return _command;
		}
		set
		{
			_command = value;
		}
	}

	/// <summary>Gets the <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> operation.</summary>
	/// <returns>The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	public IDbCommand Command
	{
		get
		{
			return BaseCommand;
		}
		set
		{
			BaseCommand = value;
		}
	}

	/// <summary>Gets any errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> executes.</summary>
	/// <returns>The errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> executes.</returns>
	public Exception Errors
	{
		get
		{
			return _errors;
		}
		set
		{
			_errors = value;
		}
	}

	/// <summary>Gets the <see cref="T:System.Data.DataRow" /> that will be sent to the server as part of an insert, update, or delete operation.</summary>
	/// <returns>The <see cref="T:System.Data.DataRow" /> to send through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	public DataRow Row => _dataRow;

	/// <summary>Gets the type of SQL statement to execute.</summary>
	/// <returns>The type of SQL statement to execute.</returns>
	public StatementType StatementType => _statementType;

	/// <summary>Gets or sets the <see cref="T:System.Data.UpdateStatus" /> of the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> property.</summary>
	/// <returns>One of the <see cref="T:System.Data.UpdateStatus" /> values. The default is <see langword="Continue" />.</returns>
	public UpdateStatus Status
	{
		get
		{
			return _status;
		}
		set
		{
			if ((uint)value <= 3u)
			{
				_status = value;
				return;
			}
			throw ADP.InvalidUpdateStatus(value);
		}
	}

	/// <summary>Gets the <see cref="T:System.Data.Common.DataTableMapping" /> to send through the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
	/// <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> to send through the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
	public DataTableMapping TableMapping => _tableMapping;

	/// <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</summary>
	/// <param name="dataRow">The <see cref="T:System.Data.DataRow" /> to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
	/// <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
	/// <param name="statementType">The type of SQL statement to execute.</param>
	/// <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> to send through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
	public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
	{
		ADP.CheckArgumentNull(dataRow, "dataRow");
		ADP.CheckArgumentNull(tableMapping, "tableMapping");
		switch (statementType)
		{
		case StatementType.Batch:
			throw ADP.NotSupportedStatementType(statementType, "RowUpdatingEventArgs");
		default:
			throw ADP.InvalidStatementType(statementType);
		case StatementType.Select:
		case StatementType.Insert:
		case StatementType.Update:
		case StatementType.Delete:
			_dataRow = dataRow;
			_command = command;
			_statementType = statementType;
			_tableMapping = tableMapping;
			break;
		}
	}
}
