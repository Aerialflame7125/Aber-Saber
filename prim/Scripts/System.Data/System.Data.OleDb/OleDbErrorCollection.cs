using System.Collections;
using System.Data.Common;

namespace System.Data.OleDb;

/// <summary>Collects all errors generated by the .NET Framework Data Provider for OLE DB. This class cannot be inherited.</summary>
[System.MonoTODO("OleDb is not implemented.")]
public sealed class OleDbErrorCollection : ICollection, IEnumerable
{
	/// <summary>Gets the number of errors in the collection.</summary>
	/// <returns>The total number of errors in the collection.</returns>
	public int Count
	{
		get
		{
			throw ADP.OleDb();
		}
	}

	/// <summary>Gets the error at the specified index.</summary>
	/// <param name="index">The zero-based index of the error to retrieve.</param>
	/// <returns>An <see cref="T:System.Data.OleDb.OleDbError" /> that contains the error at the specified index.</returns>
	public OleDbError this[int index]
	{
		get
		{
			throw ADP.OleDb();
		}
	}

	/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
	/// <returns>
	///   <see langword="true" /> if access to the collection is synchronized (thread safe); otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	bool ICollection.IsSynchronized
	{
		get
		{
			throw ADP.OleDb();
		}
	}

	/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
	/// <returns>A <see cref="T:System.Object" /> that can be used to synchronize access to the collection.</returns>
	object ICollection.SyncRoot
	{
		get
		{
			throw ADP.OleDb();
		}
	}

	internal OleDbErrorCollection()
	{
	}

	/// <summary>Copies the elements of the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> into an <see cref="T:System.Array" />, starting at the specified index within the <see cref="T:System.Array" />.</summary>
	/// <param name="array">The <see cref="T:System.Array" /> into which to copy the elements.</param>
	/// <param name="index">The starting index of the <paramref name="array" />.</param>
	/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> is greater than the length of the <see cref="T:System.Array" />.</exception>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
	public void CopyTo(Array array, int index)
	{
		throw ADP.OleDb();
	}

	/// <summary>Copies all the elements of the current <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> to the specified <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> starting at the specified destination index.</summary>
	/// <param name="array">The <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> that is the destination of the elements copied from the current <see cref="T:System.Data.OleDb.OleDbErrorCollection" />.</param>
	/// <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> at which copying starts.</param>
	public void CopyTo(OleDbError[] array, int index)
	{
		throw ADP.OleDb();
	}

	/// <summary>Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> method, which supports a simple iteration over a collection by a .NET Framework data provider.</summary>
	/// <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
	public IEnumerator GetEnumerator()
	{
		throw ADP.OleDb();
	}
}
