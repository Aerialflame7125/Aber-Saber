using System.CodeDom;
using System.CodeDom.Compiler;

namespace System.Data.Design;

/// <summary>This class is used to generate a database query method signature, as it will be created by the typed dataset generator.</summary>
public class MethodSignatureGenerator
{
	/// <summary>Gets or sets the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> object.</summary>
	/// <returns>The <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> object, which provides code generation and code compilation interfaces for generating code and managing compilation for a single programming language. Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</returns>
	[System.MonoTODO]
	public CodeDomProvider CodeProvider
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the type of object that the query will fill.</summary>
	/// <returns>The type of object that the query will fill. The type will be either <see cref="T:System.Data.DataSet" /> or <see cref="T:System.Data.DataTable" />.</returns>
	[System.MonoTODO]
	public Type ContainerParameterType
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the type name of the typed dataset to be filled.</summary>
	/// <returns>A string representing the type name of the typed dataset to be filled.</returns>
	[System.MonoTODO]
	public string DataSetClassName
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value that indicates whether the signature generated needs to return a <see cref="T:System.Data.DataTable" /> object.</summary>
	/// <returns>
	///   <see langword="true" /> if the signature generated needs to return a data table; otherwise, <see langword="false" />.</returns>
	[System.MonoTODO]
	public bool IsGetMethod
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a Boolean value specifying whether the method supports paging.</summary>
	/// <returns>A Boolean value specifying whether the method supports paging: <see langword="True" /> if the method supports paging; <see langword="False" /> if it does not.</returns>
	[System.MonoTODO]
	public bool PagingMethod
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the category of types to use for parameters.</summary>
	/// <returns>A <see langword="ParameterGenerationOption" /> value specifying the category of types to use for parameters: <see cref="F:System.Data.Design.ParameterGenerationOption.ClrTypes" /> (the default), <see cref="F:System.Data.Design.ParameterGenerationOption.SqlTypes" />, or <see cref="F:System.Data.Design.ParameterGenerationOption.Objects" />.</returns>
	[System.MonoTODO]
	public ParameterGenerationOption ParameterOption
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the type name of the typed table to fill.</summary>
	/// <returns>A string indicating the type name of the typed table to fill.</returns>
	[System.MonoTODO]
	public string TableClassName
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Initializes a new instance of the <see langword="MethodSignatureGenerator" /> class.</summary>
	public MethodSignatureGenerator()
	{
	}

	/// <summary>Returns the code member method representing the database query, as generated by the typed dataset generator.</summary>
	/// <returns>The <see cref="T:System.CodeDom.CodeMemberMethod" /> object representing the database query, as generated by the typed dataset generator.</returns>
	[System.MonoTODO]
	public CodeMemberMethod GenerateMethod()
	{
		throw new NotImplementedException();
	}

	/// <summary>Returns a string representing the database query method signature, as generated by the typed dataset generator.</summary>
	/// <returns>A string representing the database query method signature, as generated by the typed dataset generator.</returns>
	[System.MonoTODO]
	public string GenerateMethodSignature()
	{
		throw new NotImplementedException();
	}

	/// <summary>Returns a code type declaration containing the Insert, Update, and Delete methods associated with the database query.</summary>
	/// <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> object containing the <see langword="Insert" />, <see langword="Update" />, and <see langword="Delete" /> methods associated with the database query.</returns>
	[System.MonoTODO]
	public CodeTypeDeclaration GenerateUpdatingMethods()
	{
		throw new NotImplementedException();
	}

	/// <summary>Sets the schema of the design table for which the database query method will be generated.</summary>
	/// <param name="designTableContent">A string representation of the table schema.</param>
	[System.MonoTODO]
	public void SetDesignTableContent(string designTableContent)
	{
		throw new NotImplementedException();
	}

	/// <summary>Sets the database query for which the method signature will be generated.</summary>
	/// <param name="methodSourceContent">A string representation of the database query.</param>
	[System.MonoTODO]
	public void SetMethodSourceContent(string methodSourceContent)
	{
		throw new NotImplementedException();
	}
}
