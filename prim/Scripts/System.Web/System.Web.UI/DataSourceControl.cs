using System.Collections;
using System.ComponentModel;

namespace System.Web.UI;

/// <summary>Serves as the base class for controls that represent data sources to data-bound controls.</summary>
[Designer("System.Web.UI.Design.DataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")]
[ControlBuilder(typeof(DataSourceControlBuilder))]
[NonVisualControl]
[Bindable(false)]
public abstract class DataSourceControl : Control, IDataSource, IListSource
{
	private static object dataSourceChanged = new object();

	/// <summary>Gets the server control identifier generated by ASP.NET.</summary>
	/// <returns>The server control identifier generated by ASP.NET.</returns>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override string ClientID => base.ClientID;

	/// <summary>Gets a <see cref="T:System.Web.UI.ControlCollection" /> object that represents the child controls for a specified server control in the UI hierarchy.</summary>
	/// <returns>The collection of child controls for the specified server control.</returns>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override ControlCollection Controls => base.Controls;

	/// <summary>Gets a value indicating whether this control supports themes.</summary>
	/// <returns>
	///     <see langword="false" /> in all cases.</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt was made to set the value of the <see cref="P:System.Web.UI.DataSourceControl.EnableTheming" /> property. </exception>
	[DefaultValue(false)]
	[Browsable(false)]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override bool EnableTheming
	{
		get
		{
			return false;
		}
		set
		{
			throw new NotSupportedException();
		}
	}

	/// <summary>Gets the skin to apply to the <see cref="T:System.Web.UI.DataSourceControl" /> control.</summary>
	/// <returns>
	///     <see cref="F:System.String.Empty" />.</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt was made to set the value of the <see cref="P:System.Web.UI.DataSourceControl.SkinID" /> property. </exception>
	[DefaultValue("")]
	[Browsable(false)]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override string SkinID
	{
		get
		{
			return base.SkinID;
		}
		set
		{
			base.SkinID = value;
		}
	}

	/// <summary>Indicates whether the data source control is associated with one or more lists of data.</summary>
	/// <returns>
	///     <see langword="true" /> if the <see cref="T:System.Web.UI.DataSourceControl" /> is associated with one or more <see cref="T:System.Web.UI.DataSourceView" /> objects; otherwise, <see langword="false" />.</returns>
	bool IListSource.ContainsListCollection => ListSourceHelper.ContainsListCollection(this);

	/// <summary>Gets or sets a value indicating whether the control is visually displayed.</summary>
	/// <returns>Always <see langword="false" />.</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt was made to set the value of the <see cref="P:System.Web.UI.DataSourceControl.Visible" /> property. </exception>
	[Browsable(false)]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DefaultValue(false)]
	public override bool Visible
	{
		get
		{
			return false;
		}
		set
		{
			throw new NotSupportedException();
		}
	}

	/// <summary>Occurs when a data source control has changed in a way that affects data-bound controls. </summary>
	event EventHandler IDataSource.DataSourceChanged
	{
		add
		{
			base.Events.AddHandler(dataSourceChanged, value);
		}
		remove
		{
			base.Events.RemoveHandler(dataSourceChanged, value);
		}
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.DataSourceControl" /> class. </summary>
	protected DataSourceControl()
	{
	}

	/// <summary>Applies the style properties that are defined in the page style sheet to the control. </summary>
	/// <param name="page">The <see cref="T:System.Web.UI.Page" /> containing the control.</param>
	[MonoTODO("Not implemented")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override void ApplyStyleSheetSkin(Page page)
	{
		throw new NotImplementedException();
	}

	/// <summary>Creates a collection to store child controls.</summary>
	/// <returns>Returns a <see cref="T:System.Web.UI.EmptyControlCollection" />.</returns>
	protected override ControlCollection CreateControlCollection()
	{
		return new EmptyControlCollection(this);
	}

	/// <summary>Searches the current naming container for a server control with the specified <paramref name="id" /> parameter. </summary>
	/// <param name="id">The identifier for the control to be found.</param>
	/// <returns>The specified control, or <see langword="null" /> if the specified control does not exist.</returns>
	[MonoTODO("why override?")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override Control FindControl(string id)
	{
		return base.FindControl(id);
	}

	/// <summary>Sets input focus to the control.</summary>
	/// <exception cref="T:System.NotSupportedException">An attempt was made to call the <see cref="M:System.Web.UI.DataSourceControl.Focus" /> method.</exception>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override void Focus()
	{
		throw new NotSupportedException();
	}

	/// <summary>Gets the named data source view associated with the data source control.</summary>
	/// <param name="viewName">The name of the <see cref="T:System.Web.UI.DataSourceView" /> to retrieve. In data source controls that support only one view, such as <see cref="T:System.Web.UI.WebControls.SqlDataSource" />, this parameter is ignored. </param>
	/// <returns>Returns the named <see cref="T:System.Web.UI.DataSourceView" /> associated with the <see cref="T:System.Web.UI.DataSourceControl" />.</returns>
	protected abstract DataSourceView GetView(string viewName);

	/// <summary>Gets the named <see cref="T:System.Web.UI.DataSourceView" /> object associated with the <see cref="T:System.Web.UI.DataSourceControl" /> control. Some data source controls support only one view, while others support more than one.</summary>
	/// <param name="viewName">The name of the <see cref="T:System.Web.UI.DataSourceView" /> to retrieve. In data source controls that support only one view, such as <see cref="T:System.Web.UI.WebControls.SqlDataSource" />, this parameter is ignored.</param>
	/// <returns>Returns the named <see cref="T:System.Web.UI.DataSourceView" /> associated with the <see cref="T:System.Web.UI.DataSourceControl" />.</returns>
	/// <exception cref="T:System.ArgumentException">
	///         <paramref name="viewName" /> is <see langword="null" />. </exception>
	DataSourceView IDataSource.GetView(string viewName)
	{
		return GetView(viewName);
	}

	/// <summary>Gets a collection of names, representing the list of <see cref="T:System.Web.UI.DataSourceView" /> objects associated with the <see cref="T:System.Web.UI.DataSourceControl" /> control.</summary>
	/// <returns>An <see cref="T:System.Collections.ICollection" /> that contains the names of the <see cref="T:System.Web.UI.DataSourceView" /> objects associated with the <see cref="T:System.Web.UI.DataSourceControl" />.</returns>
	protected virtual ICollection GetViewNames()
	{
		return null;
	}

	/// <summary>Gets a collection of names, representing the list of <see cref="T:System.Web.UI.DataSourceView" /> objects associated with the <see cref="T:System.Web.UI.DataSourceControl" /> control.</summary>
	/// <returns>An <see cref="T:System.Collections.ICollection" /> that contains the names of the <see cref="T:System.Web.UI.DataSourceView" /> objects associated with the <see cref="T:System.Web.UI.DataSourceControl" />.</returns>
	ICollection IDataSource.GetViewNames()
	{
		return GetViewNames();
	}

	/// <summary>Gets a list of data source controls that can be used as sources of lists of data.</summary>
	/// <returns>An <see cref="T:System.Collections.IList" /> of data source controls that can be used as sources of lists of data.</returns>
	IList IListSource.GetList()
	{
		return ListSourceHelper.GetList(this);
	}

	/// <summary>Determines if the server control contains any child controls. </summary>
	/// <returns>
	///     <see langword="true" /> if the control contains other controls; otherwise, <see langword="false" />.</returns>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override bool HasControls()
	{
		return base.HasControls();
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
	protected virtual void RaiseDataSourceChangedEvent(EventArgs e)
	{
		if (base.Events[dataSourceChanged] is EventHandler eventHandler)
		{
			eventHandler(this, e);
		}
	}

	/// <summary>Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled. </summary>
	/// <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content. </param>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override void RenderControl(HtmlTextWriter writer)
	{
		base.RenderControl(writer);
	}
}
