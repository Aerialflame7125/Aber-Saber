namespace System.Web.UI;

/// <summary>Supports the parsing and persisting of an expression-binding instance. This class cannot be inherited.</summary>
public sealed class ExpressionBinding
{
	private string propertyName;

	private Type propertyType;

	private string expression;

	private string prefix;

	private bool generated;

	/// <summary>Gets or sets a value of the expression in its declarative syntax.</summary>
	/// <returns>A string that is used with the <see cref="P:System.Web.UI.ExpressionBinding.ExpressionPrefix" /> property to perform an action.</returns>
	public string Expression
	{
		get
		{
			return expression;
		}
		set
		{
			expression = value;
		}
	}

	/// <summary>Gets or sets a value for the prefix of an expression in its declarative syntax.</summary>
	/// <returns>A string that represents the expression prefix.</returns>
	public string ExpressionPrefix
	{
		get
		{
			return prefix;
		}
		set
		{
			prefix = value;
		}
	}

	/// <summary>Gets a value indicating whether the expression was implicitly generated by the parser. </summary>
	/// <returns>
	///     <see langword="true" /> if the expression was implicitly generated by the parser; otherwise, <see langword="false" />.</returns>
	public bool Generated => generated;

	/// <summary>Gets a value indicating the name of the property of the object to which the expression is applied.</summary>
	/// <returns>A value that represents the name of the property of the object to which the expression is applied.</returns>
	public string PropertyName => propertyName;

	/// <summary>Gets a value indicating the <see cref="T:System.Type" /> of the property of the object to which the expression is applied.</summary>
	/// <returns>The <see cref="T:System.Type" /> of the property of the object to which the expression is applied.</returns>
	public Type PropertyType => propertyType;

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ExpressionBinding" /> class.</summary>
	/// <param name="propertyName">A string indicating the name of the property of the object to which the <paramref name="expression" /> parameter is applied.</param>
	/// <param name="propertyType">A <see cref="T:System.Type" /> indicating the type of the property of the object to which the <paramref name="expression" /> parameter is applied.</param>
	/// <param name="expressionPrefix">A string representing the expression's prefix value.</param>
	/// <param name="expression">A string representing the value of the expression in its declarative syntax.</param>
	public ExpressionBinding(string propertyName, Type propertyType, string expressionPrefix, string expression)
	{
		this.propertyName = propertyName;
		this.propertyType = propertyType;
		prefix = expressionPrefix;
		this.expression = expression;
		generated = false;
	}

	/// <summary>Determines whether the specified object is the same instance as the current <see cref="T:System.Web.UI.ExpressionBinding" /> object.</summary>
	/// <param name="obj">The object to compare with the current <see cref="T:System.Web.UI.ExpressionBinding" />.</param>
	/// <returns>
	///     <see langword="true" /> if the specified object is the same instance as the current <see cref="T:System.Web.UI.ExpressionBinding" />; otherwise, <see langword="false" />.</returns>
	public override bool Equals(object obj)
	{
		if (!(obj is ExpressionBinding))
		{
			return false;
		}
		ExpressionBinding expressionBinding = (ExpressionBinding)obj;
		if (expressionBinding.Expression == expression && expressionBinding.ExpressionPrefix == prefix && expressionBinding.PropertyName == propertyName)
		{
			return expressionBinding.PropertyType == propertyType;
		}
		return false;
	}

	/// <summary>Serves as a hash function for the current <see cref="T:System.Web.UI.ExpressionBinding" /> object; suitable for hashing algorithms and data structures, such as a hash table.</summary>
	/// <returns>A hash code for the current <see cref="T:System.Web.UI.ExpressionBinding" />.</returns>
	public override int GetHashCode()
	{
		return propertyName.GetHashCode() + (propertyType.GetHashCode() << 1) + (prefix.GetHashCode() << 2) + (expression.GetHashCode() << 3);
	}
}
