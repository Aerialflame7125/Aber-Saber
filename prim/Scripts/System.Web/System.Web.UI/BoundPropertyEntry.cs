using System.Web.Compilation;

namespace System.Web.UI;

/// <summary>Represents a control property that is data-bound to an expression.</summary>
public class BoundPropertyEntry : PropertyEntry
{
	/// <summary>Gets or sets the ID of the control that contains this binding.</summary>
	/// <returns>A <see cref="T:System.String" /> with the <see cref="P:System.Web.UI.Control.ID" /> of the control that contains this binding.</returns>
	public string ControlID { get; set; }

	/// <summary>Gets or sets the type of the control that is being bound to at run time.</summary>
	/// <returns>The <see cref="T:System.Type" /> of the control bound by the expression.</returns>
	public Type ControlType { get; set; }

	/// <summary>Gets or sets the value representing an expression during page parsing.</summary>
	/// <returns>A <see cref="T:System.String" /> that contains the expression.</returns>
	public string Expression { get; set; }

	/// <summary>Gets or sets the object used for evaluating the expression during page parsing.</summary>
	/// <returns>An <see cref="T:System.Web.Compilation.ExpressionBuilder" /> for evaluating this expression.</returns>
	public ExpressionBuilder ExpressionBuilder { get; set; }

	/// <summary>Gets or sets the prefix for this expression.</summary>
	/// <returns>A <see cref="T:System.String" /> containing the prefix.</returns>
	public string ExpressionPrefix { get; set; }

	/// <summary>Gets or sets the name of the data field bound to by the expression.</summary>
	/// <returns>A <see cref="T:System.String" /> containing the data field name.</returns>
	public string FieldName { get; set; }

	/// <summary>Gets or sets the format specifier characters that indicate how a value is to be displayed.</summary>
	/// <returns>A <see cref="T:System.String" /> containing the format specifier characters that indicate how a value is to be displayed.</returns>
	public string FormatString { get; set; }

	/// <summary>Gets or sets a value indicating whether the expression was generated by the parser.</summary>
	/// <returns>
	///     <see langword="true" /> if the expression was generated by the parser; otherwise, <see langword="false" />.</returns>
	public bool Generated { get; set; }

	/// <summary>Gets or sets the data retrieved from an expression builder object during page parsing.</summary>
	/// <returns>An <see cref="T:System.Object" /> containing the data retrieved from an <see cref="T:System.Web.Compilation.ExpressionBuilder" /> after it has called <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
	public object ParsedExpressionData { get; set; }

	/// <summary>Gets or sets a value indicating whether the property contains a <see langword="set" /> accessor.</summary>
	/// <returns>
	///     <see langword="true" /> if the property does not contain a <see langword="set" /> accessor, which indicates that the property is <see langword="ReadOnly" />; otherwise, <see langword="false" />.</returns>
	public bool ReadOnlyProperty { get; set; }

	/// <summary>Gets or sets a value indicating whether the expression is bound to a control that allows for inserting, updating, or deleting data.</summary>
	/// <returns>
	///     <see langword="true" /> if the expression is bound to a control that allows for inserting, updating, or deleting data; otherwise, <see langword="false" />.</returns>
	public bool TwoWayBound { get; set; }

	/// <summary>Gets or sets a value indicating whether a control's <see langword="SetAttribute" /> method can be called.</summary>
	/// <returns>
	///     <see langword="true" /> if the <see langword="SetAttribute" /> method can be called; otherwise, <see langword="false" />.</returns>
	public bool UseSetAttribute { get; set; }

	internal BoundPropertyEntry()
	{
	}
}
