using System.Collections.Specialized;
using System.ComponentModel;
using System.Security.Permissions;

namespace System.Web.UI.WebControls;

/// <summary>Represents an automatically generated field in a data-bound control. This class cannot be inherited.</summary>
[EditorBrowsable(EditorBrowsableState.Never)]
[AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
[AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
public sealed class AutoGeneratedField : BoundField
{
	private Type dataType = typeof(string);

	/// <summary>Gets or sets the data type of the values displayed in an <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object.</summary>
	/// <returns>A <see cref="T:System.Type" /> that represents the data type of the value displayed in an <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object. The default is <see cref="T:System.String" />.</returns>
	public Type DataType
	{
		get
		{
			return dataType;
		}
		set
		{
			dataType = value;
		}
	}

	/// <summary>Gets or sets a value indicating whether empty string ("") values are converted to <see langword="null" /> when the field values are retrieved from the data source.</summary>
	/// <returns>Always returns <see langword="true" />.</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt is made to set this property.</exception>
	public override bool ConvertEmptyStringToNull
	{
		get
		{
			return true;
		}
		set
		{
			throw new NotSupportedException();
		}
	}

	/// <summary>Gets or sets the string that specifies the format in which the alternate text for each image in an <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object is rendered.</summary>
	/// <returns>Always returns an empty string ("").</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt is made to set this property.</exception>
	public override string DataFormatString
	{
		get
		{
			return string.Empty;
		}
		set
		{
			throw new NotSupportedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object is visible in insert mode.</summary>
	/// <returns>Always returns <see langword="true" />.</returns>
	/// <exception cref="T:System.NotSupportedException">An attempt is made to set this property.</exception>
	public override bool InsertVisible
	{
		get
		{
			return true;
		}
		set
		{
			throw new NotSupportedException();
		}
	}

	internal AutoGeneratedField()
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> class with the specified data field.</summary>
	/// <param name="dataField">The name of the data field to bind to the <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" />.</param>
	public AutoGeneratedField(string dataField)
	{
		DataField = dataField;
	}

	internal AutoGeneratedField(AutoGeneratedFieldProperties fieldProperties)
	{
		DataField = fieldProperties.DataField;
		DataType = fieldProperties.Type;
		SortExpression = fieldProperties.Name;
		HeaderText = fieldProperties.Name;
		ReadOnly = fieldProperties.IsReadOnly;
	}

	/// <summary>Fills the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object with the values from the specified <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" /> object.</summary>
	/// <param name="dictionary">An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> used to store the values of the specified cell.</param>
	/// <param name="cell">The <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" /> that contains the values to retrieve.</param>
	/// <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
	/// <param name="includeReadOnly">The value<see langword=" true" /> includes only the values of read-only fields; otherwise, <see langword="false" />.</param>
	[MonoTODO("Support other data types")]
	public override void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly)
	{
		if (dataType == typeof(bool))
		{
			if (IsEditable(rowState) || includeReadOnly)
			{
				CheckBox checkBox = (CheckBox)cell.Controls[0];
				dictionary[DataField] = checkBox.Checked;
			}
		}
		else
		{
			base.ExtractValuesFromCell(dictionary, cell, rowState, includeReadOnly);
		}
	}

	[MonoTODO("Support other data types")]
	protected override void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState)
	{
		if (dataType == typeof(bool))
		{
			bool enabled = IsEditable(rowState);
			CheckBox checkBox = new CheckBox();
			checkBox.Enabled = enabled;
			checkBox.ToolTip = HeaderText;
			cell.Controls.Add(checkBox);
		}
		else
		{
			base.InitializeDataCell(cell, rowState);
		}
	}

	[MonoTODO("Support other data types")]
	protected override void OnDataBindField(object sender, EventArgs e)
	{
		DataControlFieldCell dataControlFieldCell = (DataControlFieldCell)sender;
		if (dataType == typeof(bool))
		{
			CheckBox checkBox = (CheckBox)dataControlFieldCell.Controls[0];
			object value = GetValue(dataControlFieldCell.BindingContainer);
			if (value != null && value != DBNull.Value)
			{
				checkBox.Checked = (bool)value;
			}
			else if (string.IsNullOrEmpty(DataField))
			{
				checkBox.Visible = false;
				return;
			}
			if (!checkBox.Visible)
			{
				checkBox.Visible = true;
			}
		}
		else
		{
			base.OnDataBindField(sender, e);
		}
	}

	/// <summary>Determines whether the controls contained in an <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object support callbacks.</summary>
	public override void ValidateSupportsCallback()
	{
	}

	protected override DataControlField CreateField()
	{
		return new AutoGeneratedField();
	}

	protected override void CopyProperties(DataControlField newField)
	{
		base.CopyProperties(newField);
		((AutoGeneratedField)newField).DataType = DataType;
	}

	protected override object GetDesignTimeValue()
	{
		return base.GetDesignTimeValue();
	}
}
