using System.Collections;
using System.ComponentModel;

namespace System.Web.UI.WebControls;

/// <summary>Represents a collection of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that are used by data-bound controls such as <see cref="T:System.Web.UI.WebControls.GridView" /> and <see cref="T:System.Web.UI.WebControls.DetailsView" />.</summary>
public sealed class DataControlFieldCollection : StateManagedCollection
{
	private static readonly object fieldsChangedEvent = new object();

	private static readonly Type[] fieldTypes = new Type[8]
	{
		typeof(BoundField),
		typeof(HyperLinkField),
		typeof(ImageField),
		typeof(TemplateField),
		typeof(AutoGeneratedField),
		typeof(CheckBoxField),
		typeof(ButtonField),
		typeof(CommandField)
	};

	private EventHandlerList events = new EventHandlerList();

	/// <summary>Gets or sets the <see cref="T:System.Web.UI.WebControls.DataControlField" /> object at the specified index in the collection.</summary>
	/// <param name="index">The zero-based index of the <see cref="T:System.Web.UI.WebControls.DataControlField" /> to retrieve from the collection. </param>
	/// <returns>The <see cref="T:System.Web.UI.WebControls.DataControlField" /> at the specified index in the collection.</returns>
	[Browsable(false)]
	public DataControlField this[int index] => (DataControlField)((IList)this)[index];

	/// <summary>Occurs when the fields in the collection change, usually as the result of a <see cref="M:System.Web.UI.StateManagedCollection.Clear" />, <see cref="M:System.Web.UI.WebControls.DataControlFieldCollection.Insert(System.Int32,System.Web.UI.WebControls.DataControlField)" />, <see cref="M:System.Web.UI.WebControls.DataControlFieldCollection.Remove(System.Web.UI.WebControls.DataControlField)" /> or <see cref="M:System.Web.UI.WebControls.DataControlFieldCollection.Add(System.Web.UI.WebControls.DataControlField)" /> method call. This event is also raised anytime a <see cref="T:System.Web.UI.WebControls.DataControlField" /> in the collection raises its <see langword="FieldChanged" /> event.</summary>
	public event EventHandler FieldsChanged
	{
		add
		{
			events.AddHandler(fieldsChangedEvent, value);
		}
		remove
		{
			events.RemoveHandler(fieldsChangedEvent, value);
		}
	}

	/// <summary>Creates a copy of the current collection.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> that contains a copy of each data control field in the current collection.</returns>
	public DataControlFieldCollection CloneFields()
	{
		DataControlFieldCollection dataControlFieldCollection = new DataControlFieldCollection();
		IEnumerator enumerator = GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				DataControlField dataControlField = (DataControlField)enumerator.Current;
				dataControlFieldCollection.Add(dataControlField.CloneField());
			}
			return dataControlFieldCollection;
		}
		finally
		{
			IDisposable disposable = enumerator as IDisposable;
			if (disposable != null)
			{
				disposable.Dispose();
			}
		}
	}

	/// <summary>Appends the specified <see cref="T:System.Web.UI.WebControls.DataControlField" /> object to the end of the collection.</summary>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to append to the collection. </param>
	public void Add(DataControlField field)
	{
		((IList)this).Add((object)field);
	}

	/// <summary>Determines whether the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection contains a specific <see cref="T:System.Web.UI.WebControls.DataControlField" /> object.</summary>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to locate in the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />. </param>
	/// <returns>
	///     <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> contains the specified field; otherwise, <see langword="false" />.</returns>
	public bool Contains(DataControlField field)
	{
		return ((IList)this).Contains((object)field);
	}

	/// <summary>Copies the entire <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
	/// <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
	/// <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
	/// <exception cref="T:System.ArgumentNullException">
	///         <paramref name="array" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///         <paramref name="index" /> is less than zero.</exception>
	/// <exception cref="T:System.ArgumentException">
	///         <paramref name="array" /> is multidimensional.-or-The number of fields in the source <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
	public void CopyTo(DataControlField[] array, int index)
	{
		((ICollection)this).CopyTo((Array)array, index);
	}

	/// <summary>Determines the index of a specific <see cref="T:System.Web.UI.WebControls.DataControlField" /> object in the collection.</summary>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to locate in the collection.</param>
	/// <returns>The index of the <paramref name="field" /> parameter, if it is found in the collection; otherwise, -1.</returns>
	public int IndexOf(DataControlField field)
	{
		return ((IList)this).IndexOf((object)field);
	}

	/// <summary>Inserts the specified <see cref="T:System.Web.UI.WebControls.DataControlField" /> object into the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection at the specified index.</summary>
	/// <param name="index">The zero-based index at which the <see cref="T:System.Web.UI.WebControls.DataControlField" /> is inserted. </param>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to insert. </param>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///         <paramref name="index" /> is less than 0.- or -
	///         <paramref name="index" /> is greater than <see cref="P:System.Web.UI.StateManagedCollection.Count" />. </exception>
	public void Insert(int index, DataControlField field)
	{
		((IList)this).Insert(index, (object)field);
	}

	/// <summary>Removes the specified <see cref="T:System.Web.UI.WebControls.DataControlField" /> object from the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection.</summary>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to remove from the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />. </param>
	public void Remove(DataControlField field)
	{
		((IList)this).Remove((object)field);
	}

	/// <summary>Removes the <see cref="T:System.Web.UI.WebControls.DataControlField" /> object at the specified index from the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> collection.</summary>
	/// <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.DataControlField" /> to remove. </param>
	public void RemoveAt(int index)
	{
		((IList)this).RemoveAt(index);
	}

	protected override void OnInsertComplete(int index, object value)
	{
		((DataControlField)value).FieldChanged += OnFieldChanged;
		OnFieldsChanged();
	}

	protected override void OnRemoveComplete(int index, object value)
	{
		((DataControlField)value).FieldChanged -= OnFieldChanged;
		OnFieldsChanged();
	}

	protected override void OnClearComplete()
	{
		OnFieldsChanged();
	}

	private void OnFieldChanged(object sender, EventArgs args)
	{
		OnFieldsChanged();
	}

	private void OnFieldsChanged()
	{
		if (events[fieldsChangedEvent] is EventHandler eventHandler)
		{
			eventHandler(this, EventArgs.Empty);
		}
	}

	[MonoTODO("Validate whatever needs to be validated here.")]
	protected override void OnValidate(object o)
	{
		base.OnValidate(o);
	}

	protected override void SetDirtyObject(object o)
	{
		((DataControlField)o).SetDirty();
	}

	protected override object CreateKnownType(int index)
	{
		return index switch
		{
			0 => new BoundField(), 
			1 => new HyperLinkField(), 
			2 => new ImageField(), 
			3 => new TemplateField(), 
			4 => new AutoGeneratedField(), 
			5 => new CheckBoxField(), 
			6 => new ButtonField(), 
			7 => new CommandField(), 
			_ => null, 
		};
	}

	protected override Type[] GetKnownTypes()
	{
		return fieldTypes;
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> class.</summary>
	public DataControlFieldCollection()
	{
	}
}
