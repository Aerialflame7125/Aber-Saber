using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.IO;
using System.Security.Permissions;

namespace System.Web.UI.WebControls;

/// <summary>Displays the values of a single record from a data source in a table, where each data row represents a field of the record. The <see cref="T:System.Web.UI.WebControls.DetailsView" /> control allows you to edit, delete, and insert records.</summary>
[SupportsEventValidation]
[ToolboxData("<{0}:DetailsView runat=\"server\" Width=\"125px\" Height=\"50px\"></{0}:DetailsView>")]
[Designer("System.Web.UI.Design.WebControls.DetailsViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")]
[ControlValueProperty("SelectedValue")]
[DefaultEvent("PageIndexChanging")]
[DataKeyProperty("DataKey")]
[AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
[AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
public class DetailsView : CompositeDataBoundControl, ICallbackEventHandler, ICallbackContainer, IDataItemContainer, INamingContainer, IPostBackEventHandler, IPostBackContainer, IDataBoundItemControl, IDataBoundControl, IFieldControl
{
	private object dataItem;

	private Table table;

	private DetailsViewRowCollection rows;

	private DetailsViewRow headerRow;

	private DetailsViewRow footerRow;

	private DetailsViewRow bottomPagerRow;

	private DetailsViewRow topPagerRow;

	private IOrderedDictionary currentEditRowKeys;

	private IOrderedDictionary currentEditNewValues;

	private IOrderedDictionary currentEditOldValues;

	private ITemplate pagerTemplate;

	private ITemplate emptyDataTemplate;

	private ITemplate headerTemplate;

	private ITemplate footerTemplate;

	private PropertyDescriptor[] cachedKeyProperties;

	private readonly string[] emptyKeys = new string[0];

	private readonly string unhandledEventExceptionMessage = "The DetailsView '{0}' fired event {1} which wasn't handled.";

	private DataControlFieldCollection columns;

	private PagerSettings pagerSettings;

	private TableItemStyle alternatingRowStyle;

	private TableItemStyle editRowStyle;

	private TableItemStyle insertRowStyle;

	private TableItemStyle emptyDataRowStyle;

	private TableItemStyle footerStyle;

	private TableItemStyle headerStyle;

	private TableItemStyle pagerStyle;

	private TableItemStyle rowStyle;

	private TableItemStyle commandRowStyle;

	private TableItemStyle fieldHeaderStyle;

	private IOrderedDictionary _keyTable;

	private DataKey key;

	private DataKey oldEditValues;

	private AutoGeneratedFieldProperties[] autoFieldProperties;

	private static readonly object PageIndexChangedEvent;

	private static readonly object PageIndexChangingEvent;

	private static readonly object ItemCommandEvent;

	private static readonly object ItemCreatedEvent;

	private static readonly object ItemDeletedEvent;

	private static readonly object ItemDeletingEvent;

	private static readonly object ItemInsertedEvent;

	private static readonly object ItemInsertingEvent;

	private static readonly object ModeChangingEvent;

	private static readonly object ModeChangedEvent;

	private static readonly object ItemUpdatedEvent;

	private static readonly object ItemUpdatingEvent;

	private int pageIndex;

	private DetailsViewMode currentMode;

	private bool hasCurrentMode;

	private int pageCount;

	private DetailsViewMode defaultMode;

	private string[] dataKeyNames;

	private const string onPreRenderScript = "var {0} = new Object ();\n{0}.pageIndex = {1};\n{0}.uid = {2};\n{0}.form = {3};\n";

	/// <summary>For a description of this property, see <see cref="P:System.Web.UI.WebControls.IDataBoundItemControl.Mode" />.</summary>
	/// <returns>The current mode of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	DataBoundControlMode IDataBoundItemControl.Mode => CurrentMode switch
	{
		DetailsViewMode.ReadOnly => DataBoundControlMode.ReadOnly, 
		DetailsViewMode.Edit => DataBoundControlMode.Edit, 
		DetailsViewMode.Insert => DataBoundControlMode.Insert, 
		_ => throw new InvalidOperationException($"Unsupported CurrentMode value '{CurrentMode}'"), 
	};

	/// <summary>For a description of this property, see <see cref="P:System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />.</summary>
	/// <returns>An object that contains the list of data items that the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control retrieves.</returns>
	IDataSource IDataBoundControl.DataSourceObject => base.DataSourceObject;

	/// <summary>For a description of this property, see <see cref="P:System.Web.UI.WebControls.IFieldControl.FieldsGenerator" />. </summary>
	/// <returns>The control that automatically generates the columns for a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </returns>
	IAutoFieldGenerator IFieldControl.FieldsGenerator
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value indicating whether the paging feature is enabled.</summary>
	/// <returns>
	///     <see langword="true" /> to enable the paging feature; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Paging")]
	[DefaultValue(false)]
	public virtual bool AllowPaging
	{
		get
		{
			object obj = ViewState["AllowPaging"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			ViewState["AllowPaging"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the alternating data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of alternating data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DefaultValue(null)]
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle AlternatingRowStyle
	{
		get
		{
			if (alternatingRowStyle == null)
			{
				alternatingRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					alternatingRowStyle.TrackViewState();
				}
			}
			return alternatingRowStyle;
		}
	}

	/// <summary>Gets or sets a value indicating whether the built-in controls to edit the current record are displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display the built-in controls to edit the current record; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateEditButton
	{
		get
		{
			object obj = ViewState["AutoGenerateEditButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			ViewState["AutoGenerateEditButton"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets a value indicating whether the built-in control to delete the current record is displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display the built-in control to delete the current record; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateDeleteButton
	{
		get
		{
			object obj = ViewState["AutoGenerateDeleteButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			ViewState["AutoGenerateDeleteButton"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets a value indicating whether the built-in controls to insert a new record are displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display the built-in controls to insert a new record; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateInsertButton
	{
		get
		{
			object obj = ViewState["AutoGenerateInsertButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			ViewState["AutoGenerateInsertButton"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets a value indicating whether row fields for each field in the data source are automatically generated and displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display automatically generated bound row fields for each field in the data source; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(true)]
	public virtual bool AutoGenerateRows
	{
		get
		{
			object obj = ViewState["AutoGenerateRows"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return true;
		}
		set
		{
			ViewState["AutoGenerateRows"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets the URL to an image to display in the background of a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>The URL to an image to display in the background of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. The default is an empty string (""), which indicates that this property is not set.</returns>
	[UrlProperty]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	[Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public virtual string BackImageUrl
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).BackImageUrl;
			}
			return string.Empty;
		}
		set
		{
			((TableStyle)base.ControlStyle).BackImageUrl = value;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object that represents the bottom pager row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> that represents the bottom pager row in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual DetailsViewRow BottomPagerRow
	{
		get
		{
			EnsureChildControls();
			return bottomPagerRow;
		}
	}

	/// <summary>Gets or sets the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>A string that represents the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. The default value is an empty string ("").</returns>
	[WebCategory("Accessibility")]
	[DefaultValue("")]
	[Localizable(true)]
	public virtual string Caption
	{
		get
		{
			object obj = ViewState["Caption"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			ViewState["Caption"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets the horizontal or vertical position of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> values. The default is <see langword="TableCaptionAlign.NotSet" />.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> enumeration values.</exception>
	[WebCategory("Accessibility")]
	[DefaultValue(TableCaptionAlign.NotSet)]
	public virtual TableCaptionAlign CaptionAlign
	{
		get
		{
			object obj = ViewState["CaptionAlign"];
			if (obj != null)
			{
				return (TableCaptionAlign)obj;
			}
			return TableCaptionAlign.NotSet;
		}
		set
		{
			ViewState["CaptionAlign"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets the amount of space between the contents of a cell and the cell's border.</summary>
	/// <returns>The amount of space, in pixels, between the contents of a cell and the cell's border. The default value is -1, which indicates that this property is not set.</returns>
	[WebCategory("Layout")]
	[DefaultValue(-1)]
	public virtual int CellPadding
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).CellPadding;
			}
			return -1;
		}
		set
		{
			((TableStyle)base.ControlStyle).CellPadding = value;
		}
	}

	/// <summary>Gets or sets the amount of space between cells.</summary>
	/// <returns>The amount of space, in pixels, between cells. The default value is 0.</returns>
	[WebCategory("Layout")]
	[DefaultValue(0)]
	public virtual int CellSpacing
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).CellSpacing;
			}
			return 0;
		}
		set
		{
			((TableStyle)base.ControlStyle).CellSpacing = value;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of a command row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of a command row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DefaultValue(null)]
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle CommandRowStyle
	{
		get
		{
			if (commandRowStyle == null)
			{
				commandRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					commandRowStyle.TrackViewState();
				}
			}
			return commandRowStyle;
		}
	}

	/// <summary>Gets the current data-entry mode of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.DetailsViewMode" /> values.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public DetailsViewMode CurrentMode
	{
		get
		{
			if (!hasCurrentMode)
			{
				return DefaultMode;
			}
			return currentMode;
		}
		private set
		{
			hasCurrentMode = true;
			currentMode = value;
		}
	}

	/// <summary>Get or sets the default data-entry mode of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.DetailsViewMode" /> values. The default is <see langword="DetailsViewMode.ReadOnly" />.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the <see cref="T:System.Web.UI.WebControls.DetailsViewMode" /> enumeration values.</exception>
	[DefaultValue(DetailsViewMode.ReadOnly)]
	[WebCategory("Behavior")]
	public virtual DetailsViewMode DefaultMode
	{
		get
		{
			return defaultMode;
		}
		set
		{
			defaultMode = value;
			RequireBinding();
		}
	}

	/// <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that represent the explicitly declared row fields in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> that contains all explicitly declared row fields in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </returns>
	[Editor("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[MergableProperty(false)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DefaultValue(null)]
	[WebCategory("Misc")]
	public virtual DataControlFieldCollection Fields
	{
		get
		{
			if (columns == null)
			{
				columns = new DataControlFieldCollection();
				columns.FieldsChanged += OnFieldsChanged;
				if (base.IsTrackingViewState)
				{
					((IStateManager)columns).TrackViewState();
				}
			}
			return columns;
		}
	}

	/// <summary>Gets or sets an array that contains the names of the key fields for the data source.</summary>
	/// <returns>An array that contains the names of the key fields of the data source.</returns>
	[DefaultValue(null)]
	[WebCategory("Data")]
	[TypeConverter(typeof(StringArrayConverter))]
	[Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public virtual string[] DataKeyNames
	{
		get
		{
			if (dataKeyNames == null)
			{
				return emptyKeys;
			}
			return dataKeyNames;
		}
		set
		{
			dataKeyNames = value;
			RequireBinding();
		}
	}

	private IOrderedDictionary KeyTable
	{
		get
		{
			if (_keyTable == null)
			{
				_keyTable = new OrderedDictionary(DataKeyNames.Length);
			}
			return _keyTable;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.DataKey" /> object that represents the primary key of the displayed record.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DataKey" /> that represents the primary key of the displayed record.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual DataKey DataKey
	{
		get
		{
			if (key == null)
			{
				key = new DataKey(KeyTable);
			}
			return key;
		}
	}

	private DataKey OldEditValues
	{
		get
		{
			if (oldEditValues == null)
			{
				oldEditValues = new DataKey(new OrderedDictionary());
			}
			return oldEditValues;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data rows when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is in edit mode.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the data rows when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is in edit mode.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[DefaultValue(null)]
	public TableItemStyle EditRowStyle
	{
		get
		{
			if (editRowStyle == null)
			{
				editRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					editRowStyle.TrackViewState();
				}
			}
			return editRowStyle;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the empty data row displayed when the data source bound to a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control does not contain any records.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that allows you to set the appearance of the empty data row.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[DefaultValue(null)]
	public TableItemStyle EmptyDataRowStyle
	{
		get
		{
			if (emptyDataRowStyle == null)
			{
				emptyDataRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					emptyDataRowStyle.TrackViewState();
				}
			}
			return emptyDataRowStyle;
		}
	}

	/// <summary>Gets or sets the user-defined content for the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is bound to a data source that does not contain any records.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the empty data row. The default value is <see langword="null" />, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[TemplateContainer(typeof(DetailsView), BindingDirection.OneWay)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	public virtual ITemplate EmptyDataTemplate
	{
		get
		{
			return emptyDataTemplate;
		}
		set
		{
			emptyDataTemplate = value;
		}
	}

	/// <summary>Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is bound to a data source that does not contain any records.</summary>
	/// <returns>The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.</returns>
	[Localizable(true)]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	public virtual string EmptyDataText
	{
		get
		{
			object obj = ViewState["EmptyDataText"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			ViewState["EmptyDataText"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets a value indicating whether client-side callback functions are used for paging operations in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to use client-side callback functions for paging operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool EnablePagingCallbacks
	{
		get
		{
			object obj = ViewState["EnablePagingCallbacks"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			ViewState["EnablePagingCallbacks"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the header column in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the header column in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DefaultValue(null)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle FieldHeaderStyle
	{
		get
		{
			if (fieldHeaderStyle == null)
			{
				fieldHeaderStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					fieldHeaderStyle.TrackViewState();
				}
			}
			return fieldHeaderStyle;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object that represents the footer row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> that represents the footer row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual DetailsViewRow FooterRow
	{
		get
		{
			EnsureChildControls();
			return footerRow;
		}
	}

	/// <summary>Gets or sets the user-defined content for the footer row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the footer row. The default value is <see langword="null" />, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[TemplateContainer(typeof(DetailsView), BindingDirection.OneWay)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	public virtual ITemplate FooterTemplate
	{
		get
		{
			return footerTemplate;
		}
		set
		{
			footerTemplate = value;
		}
	}

	/// <summary>Gets or sets the text to display in the footer row of a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>The text to display in the footer row. The default is an empty string (""), which indicates that this property is not set.</returns>
	[Localizable(true)]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	public virtual string FooterText
	{
		get
		{
			object obj = ViewState["FooterText"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			ViewState["FooterText"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the footer row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the footer row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DefaultValue(null)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle FooterStyle
	{
		get
		{
			if (footerStyle == null)
			{
				footerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					footerStyle.TrackViewState();
				}
			}
			return footerStyle;
		}
	}

	/// <summary>Gets or sets the gridline style for a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.GridLines" /> values. The default is <see langword="GridLines.Both" />.</returns>
	[WebCategory("Appearance")]
	[DefaultValue(GridLines.Both)]
	public virtual GridLines GridLines
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).GridLines;
			}
			return GridLines.Both;
		}
		set
		{
			((TableStyle)base.ControlStyle).GridLines = value;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object that represents the header row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> that represents the header row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual DetailsViewRow HeaderRow
	{
		get
		{
			EnsureChildControls();
			return headerRow;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the header row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the header row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DefaultValue(null)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle HeaderStyle
	{
		get
		{
			if (headerStyle == null)
			{
				headerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					headerStyle.TrackViewState();
				}
			}
			return headerStyle;
		}
	}

	/// <summary>Gets or sets the user-defined content for the header row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the header row. The default value is <see langword="null" />, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[TemplateContainer(typeof(DetailsView), BindingDirection.OneWay)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	public virtual ITemplate HeaderTemplate
	{
		get
		{
			return headerTemplate;
		}
		set
		{
			headerTemplate = value;
		}
	}

	/// <summary>Gets or sets the text to display in the header row of a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>The text to display in the header row. The default is an empty string (""), which indicates that this property is not set.</returns>
	[Localizable(true)]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	public virtual string HeaderText
	{
		get
		{
			object obj = ViewState["HeaderText"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			ViewState["HeaderText"] = value;
			RequireBinding();
		}
	}

	/// <summary>Gets or sets the horizontal alignment of a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control on the page.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> values. The default is <see langword="HorizontalAlign.NotSet" />.</returns>
	[Category("Layout")]
	[DefaultValue(HorizontalAlign.NotSet)]
	public virtual HorizontalAlign HorizontalAlign
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).HorizontalAlign;
			}
			return HorizontalAlign.NotSet;
		}
		set
		{
			((TableStyle)base.ControlStyle).HorizontalAlign = value;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control when the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is in insert mode.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control when the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is in insert mode.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[DefaultValue(null)]
	public TableItemStyle InsertRowStyle
	{
		get
		{
			if (insertRowStyle == null)
			{
				insertRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					insertRowStyle.TrackViewState();
				}
			}
			return insertRowStyle;
		}
	}

	/// <summary>Gets the number of records in the data source.</summary>
	/// <returns>The number of records in the data source.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual int PageCount
	{
		get
		{
			return pageCount;
		}
		private set
		{
			pageCount = value;
		}
	}

	/// <summary>Gets or sets the index of the displayed record.</summary>
	/// <returns>The zero-based index of the data item being displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control from the underlying data source.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see langword="-1" />.</exception>
	[WebCategory("Paging")]
	[Bindable(true, BindingDirection.OneWay)]
	[DefaultValue(0)]
	public virtual int PageIndex
	{
		get
		{
			if (CurrentMode == DetailsViewMode.Insert)
			{
				return -1;
			}
			return pageIndex;
		}
		set
		{
			if (value < -1)
			{
				throw new ArgumentOutOfRangeException("PageIndex must be non-negative");
			}
			if (pageIndex != value && value != -1)
			{
				pageIndex = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object that allows you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> that allows you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Paging")]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	public virtual PagerSettings PagerSettings
	{
		get
		{
			if (pagerSettings == null)
			{
				pagerSettings = new PagerSettings(this);
				if (base.IsTrackingViewState)
				{
					((IStateManager)pagerSettings).TrackViewState();
				}
			}
			return pagerSettings;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the pager row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the pager row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle PagerStyle
	{
		get
		{
			if (pagerStyle == null)
			{
				pagerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					pagerStyle.TrackViewState();
				}
			}
			return pagerStyle;
		}
	}

	/// <summary>Gets or sets the custom content for the pager row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the pager row. The default value is null, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[TemplateContainer(typeof(DetailsView), BindingDirection.OneWay)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	public virtual ITemplate PagerTemplate
	{
		get
		{
			return pagerTemplate;
		}
		set
		{
			pagerTemplate = value;
		}
	}

	/// <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> objects that represent the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection" /> that contains all the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual DetailsViewRowCollection Rows
	{
		get
		{
			EnsureChildControls();
			return rows;
		}
	}

	/// <summary>Gets or sets an object that implements the <see cref="T:System.Web.UI.IAutoFieldGenerator" /> interface in order to automatically populate rows in the view.</summary>
	/// <returns>An object that implement the <see cref="T:System.Web.UI.IAutoFieldGenerator" /> interface.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public IAutoFieldGenerator RowsGenerator { get; set; }

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the data rows in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[DefaultValue(null)]
	public TableItemStyle RowStyle
	{
		get
		{
			if (rowStyle == null)
			{
				rowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					rowStyle.TrackViewState();
				}
			}
			return rowStyle;
		}
	}

	/// <summary>Gets the data key value of the current record in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>The data key value of the current record in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public object SelectedValue => DataKey.Value;

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object that represents the top pager row in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> that represents the top pager row in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual DetailsViewRow TopPagerRow
	{
		get
		{
			EnsureChildControls();
			return topPagerRow;
		}
	}

	/// <summary>Gets the data item bound to the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>An <see cref="T:System.Object" /> that represents the data item bound to the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual object DataItem => dataItem;

	/// <summary>Gets the number of items in the underlying data source.</summary>
	/// <returns>The number of items in the underlying data source.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public int DataItemCount => PageCount;

	/// <summary>Gets the index of the item being displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control from the underlying data source.</summary>
	/// <returns>The zero-based index of the data item being displayed in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control from the underlying data source.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual int DataItemIndex => PageIndex;

	/// <summary>For a description of this member, see <see cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />.</summary>
	/// <returns>Returns <see langword="0" />.</returns>
	int IDataItemContainer.DisplayIndex => PageIndex;

	/// <summary>For a description of this member, see <see cref="P:System.Web.UI.WebControls.DetailsView.DataItemIndex" />.</summary>
	/// <returns>Returns the <see cref="P:System.Web.UI.WebControls.DetailsView.DataItemIndex" /> value.</returns>
	int IDataItemContainer.DataItemIndex => DataItemIndex;

	/// <summary>Gets or sets a value that indicates whether data-model validation is enabled.</summary>
	/// <returns>
	///     <see langword="true" /> if data model validation is enabled; otherwise, <see langword="false" />.</returns>
	[MonoTODO("Make use of it in the code")]
	[DefaultValue(true)]
	public virtual bool EnableModelValidation { get; set; }

	/// <summary>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </summary>
	/// <returns>If <see cref="P:System.Web.UI.WebControls.DetailsView.EnablePagingCallbacks" /> is <see langword="true" />, this property returns <see cref="F:System.Web.UI.HtmlTextWriterTag.Div" />. Otherwise, it returns <see cref="F:System.Web.UI.HtmlTextWriterTag.Table" />. </returns>
	protected override HtmlTextWriterTag TagKey
	{
		get
		{
			if (EnablePagingCallbacks)
			{
				return HtmlTextWriterTag.Div;
			}
			return HtmlTextWriterTag.Table;
		}
	}

	/// <summary>Occurs when the value of the <see cref="P:System.Web.UI.WebControls.DetailsView.PageIndex" /> property changes after a paging operation.</summary>
	public event EventHandler PageIndexChanged
	{
		add
		{
			base.Events.AddHandler(PageIndexChangedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(PageIndexChangedEvent, value);
		}
	}

	/// <summary>Occurs when the value of the <see cref="P:System.Web.UI.WebControls.DetailsView.PageIndex" /> property changes before a paging operation.</summary>
	public event DetailsViewPageEventHandler PageIndexChanging
	{
		add
		{
			base.Events.AddHandler(PageIndexChangingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(PageIndexChangingEvent, value);
		}
	}

	/// <summary>Occurs when a button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked.</summary>
	public event DetailsViewCommandEventHandler ItemCommand
	{
		add
		{
			base.Events.AddHandler(ItemCommandEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemCommandEvent, value);
		}
	}

	/// <summary>Occurs when a record is created in a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	public event EventHandler ItemCreated
	{
		add
		{
			base.Events.AddHandler(ItemCreatedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemCreatedEvent, value);
		}
	}

	/// <summary>Occurs when a Delete button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but after the delete operation.</summary>
	public event DetailsViewDeletedEventHandler ItemDeleted
	{
		add
		{
			base.Events.AddHandler(ItemDeletedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemDeletedEvent, value);
		}
	}

	/// <summary>Occurs when a Delete button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but before the delete operation.</summary>
	public event DetailsViewDeleteEventHandler ItemDeleting
	{
		add
		{
			base.Events.AddHandler(ItemDeletingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemDeletingEvent, value);
		}
	}

	/// <summary>Occurs when an Insert button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but after the insert operation.</summary>
	public event DetailsViewInsertedEventHandler ItemInserted
	{
		add
		{
			base.Events.AddHandler(ItemInsertedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemInsertedEvent, value);
		}
	}

	/// <summary>Occurs when an Insert button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but before the insert operation.</summary>
	public event DetailsViewInsertEventHandler ItemInserting
	{
		add
		{
			base.Events.AddHandler(ItemInsertingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemInsertingEvent, value);
		}
	}

	/// <summary>Occurs when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control attempts to change between edit, insert, and read-only mode, but before the <see cref="P:System.Web.UI.WebControls.DetailsView.CurrentMode" /> property is updated.</summary>
	public event DetailsViewModeEventHandler ModeChanging
	{
		add
		{
			base.Events.AddHandler(ModeChangingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ModeChangingEvent, value);
		}
	}

	/// <summary>Occurs when a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control attempts to change between edit, insert, and read-only mode, but after the <see cref="P:System.Web.UI.WebControls.DetailsView.CurrentMode" /> property is updated.</summary>
	public event EventHandler ModeChanged
	{
		add
		{
			base.Events.AddHandler(ModeChangedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ModeChangedEvent, value);
		}
	}

	/// <summary>Occurs when an Update button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but after the update operation.</summary>
	public event DetailsViewUpdatedEventHandler ItemUpdated
	{
		add
		{
			base.Events.AddHandler(ItemUpdatedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemUpdatedEvent, value);
		}
	}

	/// <summary>Occurs when an Update button within a <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is clicked, but before the update operation.</summary>
	public event DetailsViewUpdateEventHandler ItemUpdating
	{
		add
		{
			base.Events.AddHandler(ItemUpdatingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(ItemUpdatingEvent, value);
		}
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> class.</summary>
	public DetailsView()
	{
		rows = new DetailsViewRowCollection(new ArrayList());
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.PageIndexChanged" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected virtual void OnPageIndexChanged(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[PageIndexChanged])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.PageIndexChanging" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewPageEventArgs" /> that contains the event data.</param>
	/// <exception cref="T:System.Web.HttpException">This method is called when the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is not bound to a data source control, the paging operation was not canceled, and an event handler is not registered for the event.</exception>
	protected virtual void OnPageIndexChanging(DetailsViewPageEventArgs e)
	{
		if (base.Events != null)
		{
			DetailsViewPageEventHandler detailsViewPageEventHandler = (DetailsViewPageEventHandler)base.Events[PageIndexChanging];
			if (detailsViewPageEventHandler != null)
			{
				detailsViewPageEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException(string.Format(unhandledEventExceptionMessage, ID, "PageIndexChanging"));
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemCommand" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewCommandEventArgs" /> that contains the event data.</param>
	protected virtual void OnItemCommand(DetailsViewCommandEventArgs e)
	{
		if (base.Events != null)
		{
			((DetailsViewCommandEventHandler)base.Events[ItemCommand])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemCreated" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected virtual void OnItemCreated(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[ItemCreated])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemDeleted" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewDeletedEventArgs" /> that contains the event data.</param>
	protected virtual void OnItemDeleted(DetailsViewDeletedEventArgs e)
	{
		if (base.Events != null)
		{
			((DetailsViewDeletedEventHandler)base.Events[ItemDeleted])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemInserted" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewInsertedEventArgs" /> that contains the event data.</param>
	protected virtual void OnItemInserted(DetailsViewInsertedEventArgs e)
	{
		if (base.Events != null)
		{
			((DetailsViewInsertedEventHandler)base.Events[ItemInserted])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemInserting" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewInsertEventArgs" /> that contains the event data.</param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemInserting" /> event.</exception>
	protected virtual void OnItemInserting(DetailsViewInsertEventArgs e)
	{
		if (base.Events != null)
		{
			DetailsViewInsertEventHandler detailsViewInsertEventHandler = (DetailsViewInsertEventHandler)base.Events[ItemInserting];
			if (detailsViewInsertEventHandler != null)
			{
				detailsViewInsertEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException(string.Format(unhandledEventExceptionMessage, ID, "ItemInserting"));
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemDeleting" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewDeleteEventArgs" /> that contains the event data.</param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemDeleting" /> event.</exception>
	protected virtual void OnItemDeleting(DetailsViewDeleteEventArgs e)
	{
		if (base.Events != null)
		{
			DetailsViewDeleteEventHandler detailsViewDeleteEventHandler = (DetailsViewDeleteEventHandler)base.Events[ItemDeleting];
			if (detailsViewDeleteEventHandler != null)
			{
				detailsViewDeleteEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException(string.Format(unhandledEventExceptionMessage, ID, "ItemDeleting"));
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ModeChanged" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected virtual void OnModeChanged(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[ModeChanged])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ModeChanging" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewModeEventArgs" /> that contains the event data. </param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.DetailsView.ModeChanging" /> event.</exception>
	protected virtual void OnModeChanging(DetailsViewModeEventArgs e)
	{
		if (base.Events != null)
		{
			DetailsViewModeEventHandler detailsViewModeEventHandler = (DetailsViewModeEventHandler)base.Events[ModeChanging];
			if (detailsViewModeEventHandler != null)
			{
				detailsViewModeEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException(string.Format(unhandledEventExceptionMessage, ID, "ModeChanging"));
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemUpdated" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewUpdatedEventArgs" /> that contains the event data.</param>
	protected virtual void OnItemUpdated(DetailsViewUpdatedEventArgs e)
	{
		if (base.Events != null)
		{
			((DetailsViewUpdatedEventHandler)base.Events[ItemUpdated])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemUpdating" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.DetailsViewUpdateEventArgs" /> that contains the event data.</param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.DetailsView.ItemUpdating" /> event.</exception>
	protected virtual void OnItemUpdating(DetailsViewUpdateEventArgs e)
	{
		if (base.Events != null)
		{
			DetailsViewUpdateEventHandler detailsViewUpdateEventHandler = (DetailsViewUpdateEventHandler)base.Events[ItemUpdating];
			if (detailsViewUpdateEventHandler != null)
			{
				detailsViewUpdateEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException(string.Format(unhandledEventExceptionMessage, ID, "ItemUpdating"));
		}
	}

	/// <summary>Determines whether the specified data type can be bound to a field in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="type">A <see cref="T:System.Type" /> that represents the data type to check.</param>
	/// <returns>
	///     <see langword="true" /> if the specified data type can be bound to a field in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control; otherwise, <see langword="false" />.</returns>
	public virtual bool IsBindableType(Type type)
	{
		if (!type.IsPrimitive && !(type == typeof(string)) && !(type == typeof(DateTime)) && !(type == typeof(Guid)))
		{
			return type == typeof(decimal);
		}
		return true;
	}

	/// <summary>Creates the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that gets passed to the Select command.</summary>
	/// <returns>The <see cref="T:System.Web.UI.DataSourceSelectArguments" /> that gets passed to the Select command</returns>
	protected override DataSourceSelectArguments CreateDataSourceSelectArguments()
	{
		DataSourceSelectArguments dataSourceSelectArguments = new DataSourceSelectArguments();
		DataSourceView data = GetData();
		if (AllowPaging && data.CanPage)
		{
			dataSourceSelectArguments.StartRowIndex = PageIndex;
			if (data.CanRetrieveTotalRowCount)
			{
				dataSourceSelectArguments.RetrieveTotalRowCount = true;
				dataSourceSelectArguments.MaximumRows = 1;
			}
			else
			{
				dataSourceSelectArguments.MaximumRows = -1;
			}
		}
		return dataSourceSelectArguments;
	}

	/// <summary>Creates the complete set of automatically generated and user-defined row fields used to generate the control hierarchy.</summary>
	/// <param name="dataItem">The data item for which to create the row fields.</param>
	/// <param name="useDataSource">
	///       <see langword="true" /> to use the data item to create the automatically generated row fields; otherwise, <see langword="false" />.</param>
	/// <returns>An <see cref="T:System.Collections.ICollection" /> that contains both the automatically generated and the user-defined row fields for the specified data item.</returns>
	protected virtual ICollection CreateFieldSet(object dataItem, bool useDataSource)
	{
		if (AutoGenerateRows)
		{
			IAutoFieldGenerator rowsGenerator = RowsGenerator;
			if (rowsGenerator != null)
			{
				return rowsGenerator.GenerateFields(this);
			}
		}
		ArrayList arrayList = new ArrayList();
		if (AutoGenerateRows)
		{
			if (useDataSource)
			{
				if (dataItem != null)
				{
					arrayList.AddRange(CreateAutoGeneratedRows(dataItem));
				}
			}
			else if (autoFieldProperties != null)
			{
				AutoGeneratedFieldProperties[] array = autoFieldProperties;
				foreach (AutoGeneratedFieldProperties fieldProperties in array)
				{
					arrayList.Add(CreateAutoGeneratedRow(fieldProperties));
				}
			}
		}
		arrayList.AddRange(Fields);
		if (AutoGenerateEditButton || AutoGenerateDeleteButton || AutoGenerateInsertButton)
		{
			CommandField commandField = new CommandField();
			commandField.ShowEditButton = AutoGenerateEditButton;
			commandField.ShowDeleteButton = AutoGenerateDeleteButton;
			commandField.ShowInsertButton = AutoGenerateInsertButton;
			arrayList.Add(commandField);
		}
		return arrayList;
	}

	/// <summary>Creates a set of automatically generated row fields for the specified data item.</summary>
	/// <param name="dataItem">The data item for which to create the automatically generated row fields.</param>
	/// <returns>An <see cref="T:System.Collections.ICollection" /> that contains the automatically generated row fields for the specified data item.</returns>
	/// <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.DetailsView" /> control does not have any properties or attributes from which to generate fields.</exception>
	protected virtual ICollection CreateAutoGeneratedRows(object dataItem)
	{
		if (dataItem == null)
		{
			return null;
		}
		ArrayList arrayList = new ArrayList();
		autoFieldProperties = CreateAutoFieldProperties(dataItem);
		AutoGeneratedFieldProperties[] array = autoFieldProperties;
		foreach (AutoGeneratedFieldProperties fieldProperties in array)
		{
			arrayList.Add(CreateAutoGeneratedRow(fieldProperties));
		}
		return arrayList;
	}

	/// <summary>Creates an <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> object that represents an automatically generated row field using the specified field properties.</summary>
	/// <param name="fieldProperties">An <see cref="T:System.Web.UI.WebControls.AutoGeneratedFieldProperties" /> that contains the properties for the <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" />.</param>
	/// <returns>An <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> that contains the field properties specified by the <paramref name="fieldProperties" /> parameter.</returns>
	protected virtual AutoGeneratedField CreateAutoGeneratedRow(AutoGeneratedFieldProperties fieldProperties)
	{
		return new AutoGeneratedField(fieldProperties);
	}

	private AutoGeneratedFieldProperties[] CreateAutoFieldProperties(object dataItem)
	{
		if (IsBindableType(dataItem.GetType()))
		{
			AutoGeneratedFieldProperties autoGeneratedFieldProperties = new AutoGeneratedFieldProperties();
			((IStateManager)autoGeneratedFieldProperties).TrackViewState();
			autoGeneratedFieldProperties.Name = "Item";
			autoGeneratedFieldProperties.DataField = BoundField.ThisExpression;
			autoGeneratedFieldProperties.Type = dataItem.GetType();
			return new AutoGeneratedFieldProperties[1] { autoGeneratedFieldProperties };
		}
		PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(dataItem, noCustomTypeDesc: false);
		if (properties != null && properties.Count > 0)
		{
			ArrayList arrayList = new ArrayList();
			foreach (PropertyDescriptor item in properties)
			{
				if (!IsBindableType(item.PropertyType))
				{
					continue;
				}
				AutoGeneratedFieldProperties autoGeneratedFieldProperties2 = new AutoGeneratedFieldProperties();
				((IStateManager)autoGeneratedFieldProperties2).TrackViewState();
				autoGeneratedFieldProperties2.Name = item.Name;
				autoGeneratedFieldProperties2.DataField = item.Name;
				for (int i = 0; i < DataKeyNames.Length; i++)
				{
					if (string.Compare(DataKeyNames[i], item.Name, StringComparison.InvariantCultureIgnoreCase) == 0)
					{
						autoGeneratedFieldProperties2.IsReadOnly = true;
						break;
					}
				}
				autoGeneratedFieldProperties2.Type = item.PropertyType;
				arrayList.Add(autoGeneratedFieldProperties2);
			}
			if (arrayList.Count > 0)
			{
				return (AutoGeneratedFieldProperties[])arrayList.ToArray(typeof(AutoGeneratedFieldProperties));
			}
		}
		throw new HttpException($"DetailsView with id '{ID}' did not have any properties or attributes from which to generate fields.  Ensure that your data source has content.");
	}

	/// <summary>Creates a <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object using the specified item index, row type, and row state.</summary>
	/// <param name="rowIndex">The zero-based index of the data item to display.</param>
	/// <param name="rowType">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowType" /> values.</param>
	/// <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> with the specified item index, row type, and row state.</returns>
	protected virtual DetailsViewRow CreateRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState)
	{
		if (rowType == DataControlRowType.Pager)
		{
			return new DetailsViewPagerRow(rowIndex, rowType, rowState);
		}
		return new DetailsViewRow(rowIndex, rowType, rowState);
	}

	private void RequireBinding()
	{
		if (base.Initialized)
		{
			base.RequiresDataBinding = true;
		}
	}

	/// <summary>Creates the containing table for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.Table" /> that represents the containing table for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control. </returns>
	protected virtual Table CreateTable()
	{
		return new ContainedTable(this);
	}

	/// <summary>Creates a default table style object for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.Style" /> that contains the default table style for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	protected override Style CreateControlStyle()
	{
		return new TableStyle
		{
			GridLines = GridLines.Both,
			CellSpacing = 0
		};
	}

	/// <summary>Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="dataSource">An <see cref="T:System.Collections.IEnumerable" /> that represents the data source for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</param>
	/// <param name="dataBinding">
	///       <see langword="true" /> to indicate that this method is being called during data binding; otherwise, <see langword="false" />.</param>
	/// <returns>The number of items in the data source.</returns>
	/// <exception cref="T:System.Web.HttpException">
	///         <paramref name="dataSource" /> returns a null <see cref="T:System.Web.UI.DataSourceView" />. - or -d<paramref name="ataSource" /> is not an <see cref="T:System.Collections.ICollection" /> and cannot return a total row count.- or -
	///         <paramref name="dataBinding" /> is <see langword="false" /> and <paramref name="dataSource" /> does not implement the <see cref="T:System.Collections.ICollection" /> interface.- or -
	///         <paramref name="dataSource" /> does not implement the <see cref="T:System.Collections.ICollection" /> interface and <see cref="P:System.Web.UI.WebControls.DetailsView.AllowPaging" /> is set to <see langword="true" />.</exception>
	protected override int CreateChildControls(IEnumerable dataSource, bool dataBinding)
	{
		PagedDataSource pagedDataSource = new PagedDataSource();
		pagedDataSource.DataSource = ((CurrentMode != DetailsViewMode.Insert) ? dataSource : null);
		pagedDataSource.AllowPaging = AllowPaging;
		pagedDataSource.PageSize = 1;
		pagedDataSource.CurrentPageIndex = PageIndex;
		if (dataBinding && CurrentMode != DetailsViewMode.Insert)
		{
			DataSourceView data = GetData();
			if (data != null && data.CanPage)
			{
				pagedDataSource.AllowServerPaging = true;
				if (base.SelectArguments.RetrieveTotalRowCount)
				{
					pagedDataSource.VirtualCount = base.SelectArguments.TotalRowCount;
				}
			}
		}
		bool flag = AllowPaging && pagedDataSource.PageCount > 1;
		Controls.Clear();
		table = CreateTable();
		Controls.Add(table);
		headerRow = null;
		footerRow = null;
		topPagerRow = null;
		bottomPagerRow = null;
		ArrayList arrayList = new ArrayList();
		if (AllowPaging)
		{
			PageCount = pagedDataSource.DataSourceCount;
			if (PageIndex >= PageCount && PageCount > 0)
			{
				int num2 = (pagedDataSource.CurrentPageIndex = PageCount - 1);
				pageIndex = num2;
			}
			if (pagedDataSource.DataSource != null)
			{
				IEnumerator enumerator = pagedDataSource.GetEnumerator();
				if (enumerator.MoveNext())
				{
					dataItem = enumerator.Current;
				}
			}
		}
		else
		{
			int num3 = 0;
			object obj = null;
			if (pagedDataSource.DataSource != null)
			{
				IEnumerator enumerator2 = pagedDataSource.GetEnumerator();
				while (enumerator2.MoveNext())
				{
					obj = enumerator2.Current;
					if (num3 == PageIndex)
					{
						dataItem = enumerator2.Current;
					}
					num3++;
				}
			}
			PageCount = num3;
			if (PageIndex >= PageCount && PageCount > 0)
			{
				pageIndex = PageCount - 1;
				dataItem = obj;
			}
		}
		if (PageCount == 0 && CurrentMode != DetailsViewMode.Insert)
		{
			DetailsViewRow detailsViewRow = CreateEmptyRow();
			if (detailsViewRow != null)
			{
				table.Rows.Add(detailsViewRow);
				arrayList.Add(detailsViewRow);
			}
		}
		else
		{
			ICollection collection = CreateFieldSet(dataItem, dataBinding && dataItem != null);
			DataControlField[] array = new DataControlField[collection.Count];
			collection.CopyTo(array, 0);
			DataControlField[] array2 = array;
			foreach (DataControlField dataControlField in array2)
			{
				dataControlField.Initialize(sortingEnabled: false, this);
				if (EnablePagingCallbacks)
				{
					dataControlField.ValidateSupportsCallback();
				}
			}
			headerRow = CreateRow(-1, DataControlRowType.Header, DataControlRowState.Normal);
			DataControlFieldCell dataControlFieldCell = new DataControlFieldCell(null);
			dataControlFieldCell.ColumnSpan = 2;
			if (headerTemplate != null)
			{
				headerTemplate.InstantiateIn(dataControlFieldCell);
			}
			else if (!string.IsNullOrEmpty(HeaderText))
			{
				dataControlFieldCell.Text = HeaderText;
			}
			else
			{
				headerRow.Visible = false;
			}
			headerRow.Cells.Add(dataControlFieldCell);
			table.Rows.Add(headerRow);
			if ((flag && PagerSettings.Position == PagerPosition.Top) || PagerSettings.Position == PagerPosition.TopAndBottom)
			{
				topPagerRow = CreateRow(-1, DataControlRowType.Pager, DataControlRowState.Normal);
				InitializePager(topPagerRow, pagedDataSource);
				table.Rows.Add(topPagerRow);
			}
			array2 = array;
			foreach (DataControlField field in array2)
			{
				DataControlRowState rowState = GetRowState(arrayList.Count);
				DetailsViewRow detailsViewRow2 = CreateRow(PageIndex, DataControlRowType.DataRow, rowState);
				InitializeRow(detailsViewRow2, field);
				table.Rows.Add(detailsViewRow2);
				arrayList.Add(detailsViewRow2);
			}
			footerRow = CreateRow(-1, DataControlRowType.Footer, DataControlRowState.Normal);
			DataControlFieldCell dataControlFieldCell2 = new DataControlFieldCell(null);
			dataControlFieldCell2.ColumnSpan = 2;
			if (footerTemplate != null)
			{
				footerTemplate.InstantiateIn(dataControlFieldCell2);
			}
			else if (!string.IsNullOrEmpty(FooterText))
			{
				dataControlFieldCell2.Text = FooterText;
			}
			else
			{
				footerRow.Visible = false;
			}
			footerRow.Cells.Add(dataControlFieldCell2);
			table.Rows.Add(footerRow);
			if ((flag && PagerSettings.Position == PagerPosition.Bottom) || PagerSettings.Position == PagerPosition.TopAndBottom)
			{
				bottomPagerRow = CreateRow(-1, DataControlRowType.Pager, DataControlRowState.Normal);
				InitializePager(bottomPagerRow, pagedDataSource);
				table.Rows.Add(bottomPagerRow);
			}
		}
		rows = new DetailsViewRowCollection(arrayList);
		if (dataBinding)
		{
			DataBind(raiseOnDataBinding: false);
		}
		OnItemCreated(EventArgs.Empty);
		return PageCount;
	}

	/// <summary>Calls the <see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" /> method after verifying that the data listing control requires data binding and that a valid data source control is specified. </summary>
	protected override void EnsureDataBound()
	{
		if (CurrentMode == DetailsViewMode.Insert)
		{
			if (base.RequiresDataBinding)
			{
				OnDataBinding(EventArgs.Empty);
				base.RequiresDataBinding = false;
				InternalPerformDataBinding(null);
				MarkAsDataBound();
				OnDataBound(EventArgs.Empty);
			}
		}
		else
		{
			base.EnsureDataBound();
		}
	}

	private DataControlRowState GetRowState(int index)
	{
		DataControlRowState dataControlRowState = ((index % 2 != 0) ? DataControlRowState.Alternate : DataControlRowState.Normal);
		if (CurrentMode == DetailsViewMode.Edit)
		{
			dataControlRowState |= DataControlRowState.Edit;
		}
		else if (CurrentMode == DetailsViewMode.Insert)
		{
			dataControlRowState |= DataControlRowState.Insert;
		}
		return dataControlRowState;
	}

	/// <summary>Creates the pager row for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="row">The <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> that contains the pager row.</param>
	/// <param name="pagedDataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> that contains the data for the current page.</param>
	protected virtual void InitializePager(DetailsViewRow row, PagedDataSource pagedDataSource)
	{
		TableCell tableCell = new TableCell();
		tableCell.ColumnSpan = 2;
		if (pagerTemplate != null)
		{
			pagerTemplate.InstantiateIn(tableCell);
		}
		else
		{
			tableCell.Controls.Add(PagerSettings.CreatePagerControl(pagedDataSource.CurrentPageIndex, pagedDataSource.PageCount));
		}
		row.Cells.Add(tableCell);
	}

	private DetailsViewRow CreateEmptyRow()
	{
		TableCell tableCell = new TableCell();
		if (emptyDataTemplate != null)
		{
			emptyDataTemplate.InstantiateIn(tableCell);
		}
		else
		{
			if (string.IsNullOrEmpty(EmptyDataText))
			{
				return null;
			}
			tableCell.Text = EmptyDataText;
		}
		DetailsViewRow detailsViewRow = CreateRow(-1, DataControlRowType.EmptyDataRow, DataControlRowState.Normal);
		detailsViewRow.Cells.Add(tableCell);
		return detailsViewRow;
	}

	/// <summary>Initializes the specified <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> object.</summary>
	/// <param name="row">The <see cref="T:System.Web.UI.WebControls.DetailsViewRow" /> to initialize.</param>
	/// <param name="field">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> that corresponds to the row.</param>
	protected virtual void InitializeRow(DetailsViewRow row, DataControlField field)
	{
		if (!field.Visible)
		{
			row.Visible = false;
			return;
		}
		row.ContainingField = field;
		DataControlFieldCell cell;
		if (field.ShowHeader)
		{
			cell = new DataControlFieldCell(field);
			row.Cells.Add(cell);
			field.InitializeCell(cell, DataControlCellType.Header, row.RowState, row.RowIndex);
		}
		cell = new DataControlFieldCell(field);
		if (!field.ShowHeader)
		{
			cell.ColumnSpan = 2;
		}
		row.Cells.Add(cell);
		field.InitializeCell(cell, DataControlCellType.DataCell, row.RowState, row.RowIndex);
		if (CurrentMode == DetailsViewMode.Insert && !field.InsertVisible)
		{
			row.Visible = false;
		}
	}

	private void FillRowDataKey(object dataItem)
	{
		KeyTable.Clear();
		if (cachedKeyProperties == null)
		{
			PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(dataItem);
			cachedKeyProperties = new PropertyDescriptor[DataKeyNames.Length];
			for (int i = 0; i < DataKeyNames.Length; i++)
			{
				PropertyDescriptor propertyDescriptor = properties.Find(DataKeyNames[i], ignoreCase: true);
				if (propertyDescriptor == null)
				{
					throw new InvalidOperationException("Property '" + DataKeyNames[i] + "' not found in object of type " + dataItem.GetType());
				}
				cachedKeyProperties[i] = propertyDescriptor;
			}
		}
		PropertyDescriptor[] array = cachedKeyProperties;
		foreach (PropertyDescriptor propertyDescriptor2 in array)
		{
			KeyTable[propertyDescriptor2.Name] = propertyDescriptor2.GetValue(dataItem);
		}
	}

	private IOrderedDictionary GetRowValues(bool includeReadOnlyFields, bool includePrimaryKey)
	{
		OrderedDictionary orderedDictionary = new OrderedDictionary();
		ExtractRowValues(orderedDictionary, includeReadOnlyFields, includePrimaryKey);
		return orderedDictionary;
	}

	/// <summary>Retrieves the values of each field displayed and stores them in the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object.</summary>
	/// <param name="fieldValues">An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> used to store the field values.</param>
	/// <param name="includeReadOnlyFields">
	///       <see langword="true" /> to include read-only fields; otherwise, <see langword="false" />.</param>
	/// <param name="includeKeys">
	///       <see langword="true" /> to include the primary key field or fields; otherwise, <see langword="false" />.</param>
	protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, bool includeReadOnlyFields, bool includeKeys)
	{
		foreach (DetailsViewRow row in Rows)
		{
			if (row.Cells.Count >= 1 && row.Cells[row.Cells.Count - 1] is DataControlFieldCell dataControlFieldCell)
			{
				dataControlFieldCell.ContainingField.ExtractValuesFromCell(fieldValues, dataControlFieldCell, row.RowState, includeReadOnlyFields);
			}
		}
		if (!includeKeys && DataKeyNames != null)
		{
			string[] array = DataKeyNames;
			foreach (string text in array)
			{
				fieldValues.Remove(text);
			}
		}
	}

	/// <summary>Calls the <see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" /> method of the base class. </summary>
	public sealed override void DataBind()
	{
		cachedKeyProperties = null;
		base.DataBind();
		if (dataItem != null)
		{
			if (CurrentMode == DetailsViewMode.Edit)
			{
				oldEditValues = new DataKey(GetRowValues(includeReadOnlyFields: false, includePrimaryKey: true));
			}
			FillRowDataKey(dataItem);
			key = new DataKey(KeyTable);
		}
	}

	/// <summary>Binds the specified data source to the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="data">An <see cref="T:System.Collections.IEnumerable" /> that represents the data source.</param>
	protected internal override void PerformDataBinding(IEnumerable data)
	{
		base.PerformDataBinding(data);
	}

	/// <summary>Sets up the control hierarchy of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	protected internal virtual void PrepareControlHierarchy()
	{
		if (table == null)
		{
			return;
		}
		table.Caption = Caption;
		table.CaptionAlign = CaptionAlign;
		foreach (DetailsViewRow row in table.Rows)
		{
			switch (row.RowType)
			{
			case DataControlRowType.Header:
				if (headerStyle != null && !headerStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(headerStyle);
				}
				break;
			case DataControlRowType.Footer:
				if (footerStyle != null && !footerStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(footerStyle);
				}
				break;
			case DataControlRowType.Pager:
				if (pagerStyle != null && !pagerStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(pagerStyle);
				}
				break;
			case DataControlRowType.EmptyDataRow:
				if (emptyDataRowStyle != null && !emptyDataRowStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(emptyDataRowStyle);
				}
				break;
			case DataControlRowType.DataRow:
				if (rowStyle != null && !rowStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(rowStyle);
				}
				if ((row.RowState & DataControlRowState.Alternate) != 0 && alternatingRowStyle != null && !alternatingRowStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(alternatingRowStyle);
				}
				break;
			}
			if (row.ContainingField is CommandField)
			{
				if (commandRowStyle != null && !commandRowStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(commandRowStyle);
				}
			}
			else
			{
				if ((row.RowState & DataControlRowState.Edit) != 0 && editRowStyle != null && !editRowStyle.IsEmpty)
				{
					row.ControlStyle.CopyFrom(editRowStyle);
				}
				if ((row.RowState & DataControlRowState.Insert) != 0)
				{
					if (insertRowStyle != null && !insertRowStyle.IsEmpty)
					{
						row.ControlStyle.CopyFrom(insertRowStyle);
					}
					else if (editRowStyle != null && !editRowStyle.IsEmpty)
					{
						row.ControlStyle.CopyFrom(editRowStyle);
					}
				}
			}
			for (int i = 0; i < row.Cells.Count; i++)
			{
				if (!(row.Cells[i] is DataControlFieldCell { ContainingField: not null, ContainingField: var containingField } dataControlFieldCell))
				{
					continue;
				}
				if (i == 0 && containingField.ShowHeader)
				{
					if (fieldHeaderStyle != null && !fieldHeaderStyle.IsEmpty)
					{
						dataControlFieldCell.ControlStyle.CopyFrom(fieldHeaderStyle);
					}
					if (containingField.HeaderStyleCreated && !containingField.HeaderStyle.IsEmpty)
					{
						dataControlFieldCell.ControlStyle.CopyFrom(containingField.HeaderStyle);
					}
					continue;
				}
				if (containingField.ControlStyleCreated && !containingField.ControlStyle.IsEmpty)
				{
					foreach (Control control in dataControlFieldCell.Controls)
					{
						if (control is WebControl webControl)
						{
							webControl.ControlStyle.MergeWith(containingField.ControlStyle);
						}
					}
				}
				if (containingField.ItemStyleCreated && !containingField.ItemStyle.IsEmpty)
				{
					dataControlFieldCell.ControlStyle.CopyFrom(containingField.ItemStyle);
				}
			}
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected internal override void OnInit(EventArgs e)
	{
		Page?.RegisterRequiresControlState(this);
		base.OnInit(e);
	}

	private void OnFieldsChanged(object sender, EventArgs args)
	{
		RequireBinding();
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.DataSourceView.DataSourceViewChanged" /> event.</summary>
	/// <param name="sender">The source of the event.</param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected override void OnDataSourceViewChanged(object sender, EventArgs e)
	{
		base.OnDataSourceViewChanged(sender, e);
		RequireBinding();
	}

	/// <summary>Determines whether the event for the Web server control is passed up the page's user interface (UI) server control hierarchy.</summary>
	/// <param name="source">The source of the event.</param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	/// <returns>
	///     <see langword="true" /> if the event has been canceled; otherwise, <see langword="false" />.</returns>
	protected override bool OnBubbleEvent(object source, EventArgs e)
	{
		if (e is DetailsViewCommandEventArgs detailsViewCommandEventArgs)
		{
			bool causesValidation = false;
			if (detailsViewCommandEventArgs.CommandSource is IButtonControl { CausesValidation: not false } buttonControl)
			{
				Page.Validate(buttonControl.ValidationGroup);
				causesValidation = true;
			}
			ProcessCommand(detailsViewCommandEventArgs, causesValidation);
			return true;
		}
		return base.OnBubbleEvent(source, e);
	}

	private void ProcessCommand(DetailsViewCommandEventArgs args, bool causesValidation)
	{
		OnItemCommand(args);
		ProcessEvent(args.CommandName, args.CommandArgument as string, causesValidation);
	}

	/// <summary>For a description of this member, see <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />.</summary>
	/// <param name="eventArgument">A string that represents an optional event argument to pass to the event handler. </param>
	void IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
	{
		RaisePostBackEvent(eventArgument);
	}

	/// <summary>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control when it posts back to the server.</summary>
	/// <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
	protected virtual void RaisePostBackEvent(string eventArgument)
	{
		ValidateEvent(UniqueID, eventArgument);
		int num = eventArgument.IndexOf('$');
		CommandEventArgs originalArgs = ((num == -1) ? new CommandEventArgs(eventArgument, null) : new CommandEventArgs(eventArgument.Substring(0, num), eventArgument.Substring(num + 1)));
		ProcessCommand(new DetailsViewCommandEventArgs(this, originalArgs), causesValidation: false);
	}

	private void ProcessEvent(string eventName, string param, bool causesValidation)
	{
		switch (eventName)
		{
		case "Page":
		{
			int num = -1;
			switch (param)
			{
			case "First":
				num = 0;
				break;
			case "Last":
				num = PageCount - 1;
				break;
			case "Next":
				num = PageIndex + 1;
				break;
			case "Prev":
				num = PageIndex - 1;
				break;
			default:
			{
				int result = 0;
				int.TryParse(param, out result);
				num = result - 1;
				break;
			}
			}
			SetPageIndex(num);
			break;
		}
		case "First":
			SetPageIndex(0);
			break;
		case "Last":
			SetPageIndex(PageCount - 1);
			break;
		case "Next":
			if (PageIndex < PageCount - 1)
			{
				SetPageIndex(PageIndex + 1);
			}
			break;
		case "Prev":
			if (PageIndex > 0)
			{
				SetPageIndex(PageIndex - 1);
			}
			break;
		case "Edit":
			ProcessChangeMode(DetailsViewMode.Edit);
			break;
		case "New":
			ProcessChangeMode(DetailsViewMode.Insert);
			break;
		case "Update":
			UpdateItem(param, causesValidation);
			break;
		case "Cancel":
			CancelEdit();
			break;
		case "Delete":
			DeleteItem();
			break;
		case "Insert":
			InsertItem(causesValidation);
			break;
		}
	}

	/// <summary>Sets the index of the currently displayed page in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="index">The index value to set.</param>
	public void SetPageIndex(int index)
	{
		DetailsViewPageEventArgs detailsViewPageEventArgs = new DetailsViewPageEventArgs(index);
		OnPageIndexChanging(detailsViewPageEventArgs);
		if (!detailsViewPageEventArgs.Cancel && base.IsBoundUsingDataSourceID && detailsViewPageEventArgs.NewPageIndex >= 0 && detailsViewPageEventArgs.NewPageIndex < PageCount)
		{
			EndRowEdit(switchToDefaultMode: false);
			PageIndex = detailsViewPageEventArgs.NewPageIndex;
			OnPageIndexChanged(EventArgs.Empty);
		}
	}

	/// <summary>Switches the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control to the specified mode. </summary>
	/// <param name="newMode">One of the <see cref="T:System.Web.UI.WebControls.DetailsViewMode" /> values.</param>
	public void ChangeMode(DetailsViewMode newMode)
	{
		CurrentMode = newMode;
		RequireBinding();
	}

	private void ProcessChangeMode(DetailsViewMode newMode)
	{
		DetailsViewModeEventArgs detailsViewModeEventArgs = new DetailsViewModeEventArgs(newMode, cancelingEdit: false);
		OnModeChanging(detailsViewModeEventArgs);
		if (!detailsViewModeEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			ChangeMode(detailsViewModeEventArgs.NewMode);
			OnModeChanged(EventArgs.Empty);
		}
	}

	private void CancelEdit()
	{
		DetailsViewModeEventArgs detailsViewModeEventArgs = new DetailsViewModeEventArgs(DetailsViewMode.ReadOnly, cancelingEdit: true);
		OnModeChanging(detailsViewModeEventArgs);
		if (!detailsViewModeEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			EndRowEdit();
		}
	}

	/// <summary>Updates the current record in the data source.</summary>
	/// <param name="causesValidation">
	///       <see langword="true" /> to perform page validation when the method is called; otherwise, <see langword="false" />.</param>
	/// <exception cref="T:System.Web.HttpException">This method is called when the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is not in edit mode.- or -The <see cref="T:System.Web.UI.DataSourceView" /> associated with the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is <see langword="null" />.</exception>
	public virtual void UpdateItem(bool causesValidation)
	{
		UpdateItem(null, causesValidation);
	}

	private void UpdateItem(string param, bool causesValidation)
	{
		if (!causesValidation || Page == null || Page.IsValid)
		{
			if (CurrentMode != DetailsViewMode.Edit)
			{
				throw new HttpException();
			}
			currentEditOldValues = OldEditValues.Values;
			currentEditRowKeys = DataKey.Values;
			currentEditNewValues = GetRowValues(includeReadOnlyFields: false, includePrimaryKey: false);
			DetailsViewUpdateEventArgs detailsViewUpdateEventArgs = new DetailsViewUpdateEventArgs(param, currentEditRowKeys, currentEditOldValues, currentEditNewValues);
			OnItemUpdating(detailsViewUpdateEventArgs);
			if (!detailsViewUpdateEventArgs.Cancel && base.IsBoundUsingDataSourceID)
			{
				(GetData() ?? throw new HttpException("The DataSourceView associated to data bound control was null")).Update(currentEditRowKeys, currentEditNewValues, currentEditOldValues, UpdateCallback);
			}
		}
	}

	private bool UpdateCallback(int recordsAffected, Exception exception)
	{
		DetailsViewUpdatedEventArgs detailsViewUpdatedEventArgs = new DetailsViewUpdatedEventArgs(recordsAffected, exception, currentEditRowKeys, currentEditOldValues, currentEditNewValues);
		OnItemUpdated(detailsViewUpdatedEventArgs);
		if (!detailsViewUpdatedEventArgs.KeepInEditMode)
		{
			EndRowEdit();
		}
		return detailsViewUpdatedEventArgs.ExceptionHandled;
	}

	/// <summary>Inserts the current record in the data source.</summary>
	/// <param name="causesValidation">
	///       <see langword="true" /> to perform page validation when the method is called; otherwise, <see langword="false" />.</param>
	/// <exception cref="T:System.Web.HttpException">This method is called when the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is not in insert mode.- or -The <see cref="T:System.Web.UI.DataSourceView" /> associated with the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control is <see langword="null" />.</exception>
	public virtual void InsertItem(bool causesValidation)
	{
		InsertItem(null, causesValidation);
	}

	private void InsertItem(string param, bool causesValidation)
	{
		if (!causesValidation || Page == null || Page.IsValid)
		{
			if (CurrentMode != DetailsViewMode.Insert)
			{
				throw new HttpException();
			}
			currentEditNewValues = GetRowValues(includeReadOnlyFields: false, includePrimaryKey: true);
			DetailsViewInsertEventArgs detailsViewInsertEventArgs = new DetailsViewInsertEventArgs(param, currentEditNewValues);
			OnItemInserting(detailsViewInsertEventArgs);
			if (!detailsViewInsertEventArgs.Cancel && base.IsBoundUsingDataSourceID)
			{
				(GetData() ?? throw new HttpException("The DataSourceView associated to data bound control was null")).Insert(currentEditNewValues, InsertCallback);
			}
		}
	}

	private bool InsertCallback(int recordsAffected, Exception exception)
	{
		DetailsViewInsertedEventArgs detailsViewInsertedEventArgs = new DetailsViewInsertedEventArgs(recordsAffected, exception, currentEditNewValues);
		OnItemInserted(detailsViewInsertedEventArgs);
		if (!detailsViewInsertedEventArgs.KeepInInsertMode)
		{
			EndRowEdit();
		}
		return detailsViewInsertedEventArgs.ExceptionHandled;
	}

	/// <summary>Deletes the current record from the data source.</summary>
	public virtual void DeleteItem()
	{
		currentEditRowKeys = DataKey.Values;
		currentEditNewValues = GetRowValues(includeReadOnlyFields: true, includePrimaryKey: false);
		DetailsViewDeleteEventArgs detailsViewDeleteEventArgs = new DetailsViewDeleteEventArgs(PageIndex, currentEditRowKeys, currentEditNewValues);
		OnItemDeleting(detailsViewDeleteEventArgs);
		if (!detailsViewDeleteEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			DataSourceView data = GetData();
			if (data != null)
			{
				data.Delete(currentEditRowKeys, currentEditNewValues, DeleteCallback);
			}
			else
			{
				DetailsViewDeletedEventArgs e = new DetailsViewDeletedEventArgs(0, null, currentEditRowKeys, currentEditNewValues);
				OnItemDeleted(e);
			}
			if (PageIndex > 0 && PageIndex == PageCount - 1)
			{
				PageIndex--;
			}
			RequireBinding();
		}
	}

	private bool DeleteCallback(int recordsAffected, Exception exception)
	{
		DetailsViewDeletedEventArgs detailsViewDeletedEventArgs = new DetailsViewDeletedEventArgs(recordsAffected, exception, currentEditRowKeys, currentEditNewValues);
		OnItemDeleted(detailsViewDeletedEventArgs);
		return detailsViewDeletedEventArgs.ExceptionHandled;
	}

	private void EndRowEdit()
	{
		EndRowEdit(switchToDefaultMode: true);
	}

	private void EndRowEdit(bool switchToDefaultMode)
	{
		if (switchToDefaultMode)
		{
			ChangeMode(DefaultMode);
		}
		oldEditValues = new DataKey(new OrderedDictionary());
		currentEditRowKeys = null;
		currentEditOldValues = null;
		currentEditNewValues = null;
		RequireBinding();
	}

	/// <summary>Loads the state of the properties in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to <see langword="false" />.</summary>
	/// <param name="savedState">An <see cref="T:System.Object" /> that represents the state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</param>
	protected internal override void LoadControlState(object savedState)
	{
		if (savedState != null)
		{
			object[] array = (object[])savedState;
			base.LoadControlState(array[0]);
			pageIndex = (int)array[1];
			pageCount = (int)array[2];
			CurrentMode = (DetailsViewMode)array[3];
			dataKeyNames = (string[])array[4];
			defaultMode = (DetailsViewMode)array[5];
			if (array[6] != null)
			{
				((IStateManager)DataKey).LoadViewState(array[6]);
			}
			if (array[7] != null)
			{
				((IStateManager)OldEditValues).LoadViewState(array[7]);
			}
		}
	}

	/// <summary>Saves the state of the properties in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to <see langword="false" />.</summary>
	/// <returns>Returns the server control's current view state. If there is no view state associated with the control, this method returns <see langword="null" />.</returns>
	protected internal override object SaveControlState()
	{
		object obj = base.SaveControlState();
		return new object[8]
		{
			obj,
			pageIndex,
			pageCount,
			CurrentMode,
			dataKeyNames,
			defaultMode,
			(key == null) ? null : ((IStateManager)key).SaveViewState(),
			(oldEditValues == null) ? null : ((IStateManager)oldEditValues).SaveViewState()
		};
	}

	/// <summary>Marks the starting point to begin tracking and saving view-state changes to the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	protected override void TrackViewState()
	{
		base.TrackViewState();
		if (columns != null)
		{
			((IStateManager)columns).TrackViewState();
		}
		if (pagerSettings != null)
		{
			((IStateManager)pagerSettings).TrackViewState();
		}
		if (alternatingRowStyle != null)
		{
			((IStateManager)alternatingRowStyle).TrackViewState();
		}
		if (footerStyle != null)
		{
			((IStateManager)footerStyle).TrackViewState();
		}
		if (headerStyle != null)
		{
			((IStateManager)headerStyle).TrackViewState();
		}
		if (pagerStyle != null)
		{
			((IStateManager)pagerStyle).TrackViewState();
		}
		if (rowStyle != null)
		{
			((IStateManager)rowStyle).TrackViewState();
		}
		if (editRowStyle != null)
		{
			((IStateManager)editRowStyle).TrackViewState();
		}
		if (insertRowStyle != null)
		{
			((IStateManager)insertRowStyle).TrackViewState();
		}
		if (emptyDataRowStyle != null)
		{
			((IStateManager)emptyDataRowStyle).TrackViewState();
		}
		if (key != null)
		{
			((IStateManager)key).TrackViewState();
		}
		if (autoFieldProperties != null)
		{
			AutoGeneratedFieldProperties[] array = autoFieldProperties;
			for (int i = 0; i < array.Length; i++)
			{
				((IStateManager)array[i]).TrackViewState();
			}
		}
		if (base.ControlStyleCreated)
		{
			base.ControlStyle.TrackViewState();
		}
	}

	/// <summary>Saves the current view state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <returns>An <see cref="T:System.Object" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	protected override object SaveViewState()
	{
		object[] array = new object[13]
		{
			base.SaveViewState(),
			(columns == null) ? null : ((IStateManager)columns).SaveViewState(),
			(pagerSettings == null) ? null : ((IStateManager)pagerSettings).SaveViewState(),
			(alternatingRowStyle == null) ? null : ((IStateManager)alternatingRowStyle).SaveViewState(),
			(footerStyle == null) ? null : ((IStateManager)footerStyle).SaveViewState(),
			(headerStyle == null) ? null : ((IStateManager)headerStyle).SaveViewState(),
			(pagerStyle == null) ? null : ((IStateManager)pagerStyle).SaveViewState(),
			(rowStyle == null) ? null : ((IStateManager)rowStyle).SaveViewState(),
			(insertRowStyle == null) ? null : ((IStateManager)insertRowStyle).SaveViewState(),
			(editRowStyle == null) ? null : ((IStateManager)editRowStyle).SaveViewState(),
			(emptyDataRowStyle == null) ? null : ((IStateManager)emptyDataRowStyle).SaveViewState(),
			null,
			null
		};
		if (autoFieldProperties != null)
		{
			object[] array2 = new object[autoFieldProperties.Length];
			bool flag = true;
			for (int i = 0; i < array2.Length; i++)
			{
				array2[i] = ((IStateManager)autoFieldProperties[i]).SaveViewState();
				if (array2[i] != null)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				array[11] = array2;
			}
		}
		if (base.ControlStyleCreated)
		{
			array[12] = base.ControlStyle.SaveViewState();
		}
		for (int num = array.Length - 1; num >= 0; num--)
		{
			if (array[num] != null)
			{
				return array;
			}
		}
		return null;
	}

	/// <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="savedState">An <see cref="T:System.Object" /> that represents the state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</param>
	protected override void LoadViewState(object savedState)
	{
		if (savedState == null)
		{
			base.LoadViewState((object)null);
			return;
		}
		object[] array = (object[])savedState;
		if (array[11] != null)
		{
			object[] array2 = (object[])array[11];
			autoFieldProperties = new AutoGeneratedFieldProperties[array2.Length];
			for (int i = 0; i < array2.Length; i++)
			{
				IStateManager stateManager = new AutoGeneratedFieldProperties();
				stateManager.TrackViewState();
				stateManager.LoadViewState(array2[i]);
				autoFieldProperties[i] = (AutoGeneratedFieldProperties)stateManager;
			}
		}
		base.LoadViewState(array[0]);
		if (array[1] != null)
		{
			((IStateManager)Fields).LoadViewState(array[1]);
		}
		if (array[2] != null)
		{
			((IStateManager)PagerSettings).LoadViewState(array[2]);
		}
		if (array[3] != null)
		{
			((IStateManager)AlternatingRowStyle).LoadViewState(array[3]);
		}
		if (array[4] != null)
		{
			((IStateManager)FooterStyle).LoadViewState(array[4]);
		}
		if (array[5] != null)
		{
			((IStateManager)HeaderStyle).LoadViewState(array[5]);
		}
		if (array[6] != null)
		{
			((IStateManager)PagerStyle).LoadViewState(array[6]);
		}
		if (array[7] != null)
		{
			((IStateManager)RowStyle).LoadViewState(array[7]);
		}
		if (array[8] != null)
		{
			((IStateManager)InsertRowStyle).LoadViewState(array[8]);
		}
		if (array[9] != null)
		{
			((IStateManager)EditRowStyle).LoadViewState(array[9]);
		}
		if (array[10] != null)
		{
			((IStateManager)EmptyDataRowStyle).LoadViewState(array[10]);
		}
		if (array[12] != null)
		{
			base.ControlStyle.LoadViewState(array[12]);
		}
	}

	/// <summary>Raises the callback event using the specified arguments.</summary>
	/// <param name="eventArgument">The event arguments.</param>
	void ICallbackEventHandler.RaiseCallbackEvent(string eventArgument)
	{
		RaiseCallbackEvent(eventArgument);
	}

	/// <summary>Creates the arguments for the callback handler in the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method.</summary>
	/// <param name="eventArgument">The argument to pass to the event handler.</param>
	protected virtual void RaiseCallbackEvent(string eventArgument)
	{
		string[] array = eventArgument.Split('|');
		PageIndex = int.Parse(array[0]);
		RaisePostBackEvent(array[1]);
		DataBind();
	}

	/// <summary>See the method <see cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />.</summary>
	/// <returns>The results of the callback.</returns>
	string ICallbackEventHandler.GetCallbackResult()
	{
		return GetCallbackResult();
	}

	/// <summary>Returns the result of a callback event that targets a control.</summary>
	/// <returns>The results of the callback.</returns>
	protected virtual string GetCallbackResult()
	{
		PrepareControlHierarchy();
		StringWriter stringWriter = new StringWriter();
		stringWriter.Write(PageIndex + "|");
		HtmlTextWriter writer = new HtmlTextWriter(stringWriter);
		RenderGrid(writer);
		return stringWriter.ToString();
	}

	/// <summary>Returns the callback string created using the specified argument.</summary>
	/// <param name="buttonControl">The control that initiated the callback.</param>
	/// <param name="argument">The callback code.</param>
	/// <returns>The complete callback string to be sent to the client.</returns>
	protected virtual string GetCallbackScript(IButtonControl buttonControl, string argument)
	{
		if (EnablePagingCallbacks)
		{
			Page?.ClientScript.RegisterForEventValidation(UniqueID, argument);
			return "javascript:DetailsView_ClientEvent (\"" + ClientID + "\",\"" + buttonControl.CommandName + "$" + buttonControl.CommandArgument + "\"); return false;";
		}
		return null;
	}

	/// <summary>Creates the callback script for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</summary>
	/// <param name="buttonControl">The button control that posted the page back to the server.</param>
	/// <param name="argument">The argument for the callback event.</param>
	/// <returns>The callback script for the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</returns>
	string ICallbackContainer.GetCallbackScript(IButtonControl control, string argument)
	{
		return GetCallbackScript(control, argument);
	}

	/// <summary>Sets the initialized state of the data-bound control before the control is loaded.</summary>
	/// <param name="sender">The <see cref="T:System.Web.UI.Page" /> that raised the event.</param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected override void OnPagePreLoad(object sender, EventArgs e)
	{
		base.OnPagePreLoad(sender, e);
		if (Page.IsPostBack && EnablePagingCallbacks && int.TryParse(Page.Request.Form[ClientID + "_Page"], out var result))
		{
			PageIndex = result;
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected internal override void OnPreRender(EventArgs e)
	{
		base.OnPreRender(e);
		Page page = Page;
		if (EnablePagingCallbacks && page != null)
		{
			ClientScriptManager clientScript = page.ClientScript;
			if (!clientScript.IsClientScriptIncludeRegistered(typeof(DetailsView), "DetailsView.js"))
			{
				string webResourceUrl = clientScript.GetWebResourceUrl(typeof(DetailsView), "DetailsView.js");
				clientScript.RegisterClientScriptInclude(typeof(DetailsView), "DetailsView.js", webResourceUrl);
			}
			clientScript.RegisterHiddenField(ClientID + "_Page", PageIndex.ToString());
			string text = ClientID + "_data";
			string script = string.Format("var {0} = new Object ();\n{0}.pageIndex = {1};\n{0}.uid = {2};\n{0}.form = {3};\n", text, ClientScriptManager.GetScriptLiteral(PageIndex), ClientScriptManager.GetScriptLiteral(UniqueID), page.theForm);
			clientScript.RegisterStartupScript(typeof(TreeView), UniqueID, script, addScriptTags: true);
			clientScript.GetCallbackEventReference(this, "null", string.Empty, "null");
			clientScript.GetPostBackClientHyperlink(this, string.Empty, registerForEventValidation: true);
		}
	}

	/// <summary>Displays the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control on the client using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
	/// <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that contains the output stream to render on the client.</param>
	protected internal override void Render(HtmlTextWriter writer)
	{
		PrepareControlHierarchy();
		if (EnablePagingCallbacks)
		{
			writer.AddAttribute(HtmlTextWriterAttribute.Id, ClientID + "_div");
		}
		writer.RenderBeginTag(HtmlTextWriterTag.Div);
		RenderGrid(writer);
		writer.RenderEndTag();
	}

	private void RenderGrid(HtmlTextWriter writer)
	{
		if (table != null)
		{
			table.Render(writer);
		}
	}

	/// <summary>For a description of this member, see <see cref="M:System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)" />.</summary>
	/// <param name="buttonControl">The control generating the client-side postback event.</param>
	/// <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> with the information required for <see cref="Overload:System.Web.UI.Page.GetPostBackEventReference" /> to construct a valid script that, when executed on the client, initiates a client postback. </returns>
	/// <exception cref="T:System.ArgumentNullException">
	///         <paramref name="buttonControl" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.InvalidOperationException">
	///         <paramref name="buttonControl" /> causes validation in the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control and attempts to use the same <see cref="T:System.Web.UI.WebControls.DetailsView" /> control as a postback target.</exception>
	PostBackOptions IPostBackContainer.GetPostBackOptions(IButtonControl control)
	{
		if (control == null)
		{
			throw new ArgumentNullException("control");
		}
		if (control.CausesValidation)
		{
			throw new InvalidOperationException("A button that causes validation in DetailsView '" + ID + "' is attempting to use the container GridView as the post back target.  The button should either turn off validation or use itself as the post back container.");
		}
		return new PostBackOptions(this)
		{
			Argument = control.CommandName + "$" + control.CommandArgument,
			RequiresJavaScriptProtocol = true
		};
	}

	static DetailsView()
	{
		PageIndexChanged = new object();
		PageIndexChanging = new object();
		ItemCommand = new object();
		ItemCreated = new object();
		ItemDeleted = new object();
		ItemDeleting = new object();
		ItemInserted = new object();
		ItemInserting = new object();
		ModeChanging = new object();
		ModeChanged = new object();
		ItemUpdated = new object();
		ItemUpdating = new object();
	}
}
