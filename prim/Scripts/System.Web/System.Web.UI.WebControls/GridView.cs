using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Security.Permissions;

namespace System.Web.UI.WebControls;

/// <summary>Displays the values of a data source in a table where each column represents a field and each row represents a record. The <see cref="T:System.Web.UI.WebControls.GridView" /> control enables you to select, sort, and edit these items.</summary>
[SupportsEventValidation]
[Designer("System.Web.UI.Design.WebControls.GridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")]
[ControlValueProperty("SelectedValue")]
[DefaultEvent("SelectedIndexChanged")]
[DataKeyProperty("DataKey")]
[AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
[AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
public class GridView : CompositeDataBoundControl, ICallbackEventHandler, ICallbackContainer, IPostBackEventHandler, IPostBackContainer, IPersistedSelector, IDataKeysControl, IDataBoundListControl, IDataBoundControl, IFieldControl
{
	private Table table;

	private GridViewRowCollection rows;

	private GridViewRow bottomPagerRow;

	private GridViewRow topPagerRow;

	private IOrderedDictionary currentEditRowKeys;

	private IOrderedDictionary currentEditNewValues;

	private IOrderedDictionary currentEditOldValues;

	private ITemplate pagerTemplate;

	private ITemplate emptyDataTemplate;

	private PropertyDescriptor[] cachedKeyProperties;

	private PropertyDescriptor[] cachedSuffixKeyProperties;

	private DataControlFieldCollection columns;

	private PagerSettings pagerSettings;

	private TableItemStyle alternatingRowStyle;

	private TableItemStyle editRowStyle;

	private TableItemStyle emptyDataRowStyle;

	private TableItemStyle footerStyle;

	private TableItemStyle headerStyle;

	private TableItemStyle pagerStyle;

	private TableItemStyle rowStyle;

	private TableItemStyle selectedRowStyle;

	private TableItemStyle sortedAscendingCellStyle;

	private TableItemStyle sortedAscendingHeaderStyle;

	private TableItemStyle sortedDescendingCellStyle;

	private TableItemStyle sortedDescendingHeaderStyle;

	private List<DataKey> _dataKeySuffixList;

	private DataKeyArray rowSuffixKeys;

	private List<DataKey> _dataKeyList;

	private DataKeyArray keys;

	private DataKey oldEditValues;

	private AutoGeneratedFieldProperties[] autoFieldProperties;

	private string[] dataKeyNames;

	private readonly string[] emptyKeys = new string[0];

	private IEnumerator _dataEnumerator;

	private static readonly object PageIndexChangedEvent;

	private static readonly object PageIndexChangingEvent;

	private static readonly object RowCancelingEditEvent;

	private static readonly object RowCommandEvent;

	private static readonly object RowCreatedEvent;

	private static readonly object RowDataBoundEvent;

	private static readonly object RowDeletedEvent;

	private static readonly object RowDeletingEvent;

	private static readonly object RowEditingEvent;

	private static readonly object RowUpdatedEvent;

	private static readonly object RowUpdatingEvent;

	private static readonly object SelectedIndexChangedEvent;

	private static readonly object SelectedIndexChangingEvent;

	private static readonly object SortedEvent;

	private static readonly object SortingEvent;

	private int pageIndex;

	private int selectedIndex = -1;

	private int editIndex = -1;

	private int pageCount;

	private SortDirection sortDirection;

	private string sortExpression;

	private const string onPreRenderScript = "var {0} = new Object ();\n{0}.pageIndex = {1};\n{0}.sortExp = {2};\n{0}.sortDir = {3};\n{0}.uid = {4};\n{0}.form = {5};\n";

	/// <summary>Gets or sets a value indicating whether the paging feature is enabled.</summary>
	/// <returns>
	///     <see langword="true" /> if the paging feature is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Paging")]
	[DefaultValue(false)]
	public virtual bool AllowPaging
	{
		get
		{
			object obj = ViewState["AllowPaging"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != AllowPaging)
			{
				ViewState["AllowPaging"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether the sorting feature is enabled.</summary>
	/// <returns>
	///     <see langword="true" /> if the sorting feature is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AllowSorting
	{
		get
		{
			object obj = ViewState["AllowSorting"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != AllowSorting)
			{
				ViewState["AllowSorting"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of alternating data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of alternating data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle AlternatingRowStyle
	{
		get
		{
			if (alternatingRowStyle == null)
			{
				alternatingRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					alternatingRowStyle.TrackViewState();
				}
			}
			return alternatingRowStyle;
		}
	}

	/// <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with an Edit button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with an Edit button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateEditButton
	{
		get
		{
			object obj = ViewState["AutoGenerateEditButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != AutoGenerateEditButton)
			{
				ViewState["AutoGenerateEditButton"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Delete button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Delete button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateDeleteButton
	{
		get
		{
			object obj = ViewState["AutoGenerateDeleteButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != AutoGenerateDeleteButton)
			{
				ViewState["AutoGenerateDeleteButton"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Select button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Select button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool AutoGenerateSelectButton
	{
		get
		{
			object obj = ViewState["AutoGenerateSelectButton"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != AutoGenerateSelectButton)
			{
				ViewState["AutoGenerateSelectButton"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether bound fields are automatically created for each field in the data source.</summary>
	/// <returns>
	///     <see langword="true" /> to automatically create bound fields for each field in the data source; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
	[WebCategory("Behavior")]
	[DefaultValue(true)]
	public virtual bool AutoGenerateColumns
	{
		get
		{
			object obj = ViewState["AutoGenerateColumns"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return true;
		}
		set
		{
			if (value != AutoGenerateColumns)
			{
				ViewState["AutoGenerateColumns"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets the URL to an image to display in the background of a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The URL of an image to display in the background of the <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is an empty string (""), which indicates that this property is not set.</returns>
	[UrlProperty]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	[Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public virtual string BackImageUrl
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).BackImageUrl;
			}
			return string.Empty;
		}
		set
		{
			((TableStyle)base.ControlStyle).BackImageUrl = value;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the bottom pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the bottom pager row in the control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual GridViewRow BottomPagerRow
	{
		get
		{
			EnsureDataBound();
			return bottomPagerRow;
		}
	}

	/// <summary>Gets or sets the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>A string that represents the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default value is an empty string ("").</returns>
	[WebCategory("Accessibility")]
	[DefaultValue("")]
	[Localizable(true)]
	public virtual string Caption
	{
		get
		{
			object obj = ViewState["Caption"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			ViewState["Caption"] = value;
		}
	}

	/// <summary>Gets or sets the horizontal or vertical position of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> values. The default is <see langword="TableCaptionAlign.NotSet" />, which uses the browser's default setting.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> enumeration values.</exception>
	[WebCategory("Accessibility")]
	[DefaultValue(TableCaptionAlign.NotSet)]
	public virtual TableCaptionAlign CaptionAlign
	{
		get
		{
			object obj = ViewState["CaptionAlign"];
			if (obj != null)
			{
				return (TableCaptionAlign)obj;
			}
			return TableCaptionAlign.NotSet;
		}
		set
		{
			ViewState["CaptionAlign"] = value;
		}
	}

	/// <summary>Gets or sets the amount of space between the contents of a cell and the cell's border.</summary>
	/// <returns>The amount of space, in pixels, between the contents of a cell and the cell's border. The default value is -1, which indicates that this property is not set.</returns>
	[WebCategory("Layout")]
	[DefaultValue(-1)]
	public virtual int CellPadding
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).CellPadding;
			}
			return -1;
		}
		set
		{
			((TableStyle)base.ControlStyle).CellPadding = value;
		}
	}

	/// <summary>Gets or sets the amount of space between cells.</summary>
	/// <returns>The amount of space, in pixels, between cells. The default value is 0.</returns>
	[WebCategory("Layout")]
	[DefaultValue(0)]
	public virtual int CellSpacing
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).CellSpacing;
			}
			return 0;
		}
		set
		{
			((TableStyle)base.ControlStyle).CellSpacing = value;
		}
	}

	/// <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that represent the column fields in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> that contains all the column fields in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[Editor("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[MergableProperty(false)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DefaultValue(null)]
	[WebCategory("Misc")]
	public virtual DataControlFieldCollection Columns
	{
		get
		{
			if (columns == null)
			{
				columns = new DataControlFieldCollection();
				columns.FieldsChanged += OnFieldsChanged;
				if (base.IsTrackingViewState)
				{
					((IStateManager)columns).TrackViewState();
				}
			}
			return columns;
		}
	}

	/// <summary>Gets or sets the control that will automatically generate the columns for a <see cref="T:System.Web.UI.WebControls.GridView" /> control that uses ASP.NET Dynamic Data features.</summary>
	/// <returns>The control that will automatically generate the columns for a <see cref="T:System.Web.UI.WebControls.GridView" /> control that uses ASP.NET Dynamic Data features.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public IAutoFieldGenerator ColumnsGenerator { get; set; }

	/// <summary>Gets or sets an array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>An array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[DefaultValue(null)]
	[WebCategory("Data")]
	[TypeConverter(typeof(StringArrayConverter))]
	[Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public virtual string[] DataKeyNames
	{
		get
		{
			if (dataKeyNames != null)
			{
				return dataKeyNames;
			}
			return emptyKeys;
		}
		set
		{
			dataKeyNames = value;
			RequireBinding();
		}
	}

	private List<DataKey> DataKeyList
	{
		get
		{
			if (_dataKeyList == null)
			{
				_dataKeyList = new List<DataKey>();
			}
			return _dataKeyList;
		}
	}

	private List<DataKey> DataKeySuffixList
	{
		get
		{
			if (_dataKeySuffixList == null)
			{
				_dataKeySuffixList = new List<DataKey>();
			}
			return _dataKeySuffixList;
		}
	}

	/// <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataKey" /> objects that represent the data key value of each row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.DataKeyArray" /> that contains the data key of each row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual DataKeyArray DataKeys
	{
		get
		{
			if (keys == null)
			{
				keys = new DataKeyArray(DataKeyList);
				if (base.IsTrackingViewState)
				{
					((IStateManager)keys).TrackViewState();
				}
			}
			return keys;
		}
	}

	private DataKey OldEditValues
	{
		get
		{
			if (oldEditValues == null)
			{
				oldEditValues = new DataKey(new OrderedDictionary());
			}
			return oldEditValues;
		}
	}

	/// <summary>Gets or sets the index of the row to edit.</summary>
	/// <returns>The zero-based index of the row to edit. The default is -1, which indicates that no row is being edited.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The specified index is less than -1.</exception>
	[WebCategory("Misc")]
	[DefaultValue(-1)]
	public virtual int EditIndex
	{
		get
		{
			return editIndex;
		}
		set
		{
			if (value != editIndex)
			{
				editIndex = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the row selected for editing in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the row being edited in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle EditRowStyle
	{
		get
		{
			if (editRowStyle == null)
			{
				editRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					editRowStyle.TrackViewState();
				}
			}
			return editRowStyle;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that enables you to set the appearance of the null row.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle EmptyDataRowStyle
	{
		get
		{
			if (emptyDataRowStyle == null)
			{
				emptyDataRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					emptyDataRowStyle.TrackViewState();
				}
			}
			return emptyDataRowStyle;
		}
	}

	/// <summary>Gets or sets the user-defined content for the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the empty data row. The default value is <see langword="null" />, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[TemplateContainer(typeof(GridViewRow), BindingDirection.OneWay)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	public virtual ITemplate EmptyDataTemplate
	{
		get
		{
			return emptyDataTemplate;
		}
		set
		{
			emptyDataTemplate = value;
		}
	}

	/// <summary>Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
	/// <returns>The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.</returns>
	[Localizable(true)]
	[WebCategory("Appearance")]
	[DefaultValue("")]
	public virtual string EmptyDataText
	{
		get
		{
			object obj = ViewState["EmptyDataText"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			if (!(value == EmptyDataText))
			{
				ViewState["EmptyDataText"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether client-side callbacks are used for sorting and paging operations.</summary>
	/// <returns>
	///     <see langword="true" /> to use client-side callbacks for sorting and paging operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	/// <exception cref="T:System.NotSupportedException">The <see cref="P:System.Web.UI.WebControls.GridView.Columns" /> collection contains a column that does not support callbacks, such as <see cref="T:System.Web.UI.WebControls.TemplateField" />.</exception>
	[WebCategory("Behavior")]
	[DefaultValue(false)]
	public virtual bool EnableSortingAndPagingCallbacks
	{
		get
		{
			object obj = ViewState["EnableSortingAndPagingCallbacks"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != EnableSortingAndPagingCallbacks)
			{
				ViewState["EnableSortingAndPagingCallbacks"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value that indicates whether a validator control will handle exceptions that occur during insert or update operations.</summary>
	/// <returns>
	///     <see langword="true" /> if a validator control will handle exceptions that occur during insert or update operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[MonoTODO("Make use of it in the code")]
	[DefaultValue(true)]
	public virtual bool EnableModelValidation { get; set; }

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual GridViewRow FooterRow
	{
		get
		{
			if (table != null)
			{
				for (int num = table.Rows.Count - 1; num >= 0; num--)
				{
					GridViewRow gridViewRow = (GridViewRow)table.Rows[num];
					switch (gridViewRow.RowType)
					{
					case DataControlRowType.Footer:
						return gridViewRow;
					}
				}
			}
			return null;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DefaultValue(null)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle FooterStyle
	{
		get
		{
			if (footerStyle == null)
			{
				footerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					footerStyle.TrackViewState();
				}
			}
			return footerStyle;
		}
	}

	/// <summary>Gets or sets the gridline style for a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.GridLines" /> values. The default is <see langword="GridLines.Both" />.</returns>
	[WebCategory("Appearance")]
	[DefaultValue(GridLines.Both)]
	public virtual GridLines GridLines
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).GridLines;
			}
			return GridLines.Both;
		}
		set
		{
			((TableStyle)base.ControlStyle).GridLines = value;
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual GridViewRow HeaderRow
	{
		get
		{
			if (table != null)
			{
				int i = 0;
				for (int count = table.Rows.Count; i < count; i++)
				{
					GridViewRow gridViewRow = (GridViewRow)table.Rows[i];
					switch (gridViewRow.RowType)
					{
					case DataControlRowType.Header:
						return gridViewRow;
					}
				}
			}
			return null;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DefaultValue(null)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle HeaderStyle
	{
		get
		{
			if (headerStyle == null)
			{
				headerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					headerStyle.TrackViewState();
				}
			}
			return headerStyle;
		}
	}

	/// <summary>Gets or sets the horizontal alignment of a <see cref="T:System.Web.UI.WebControls.GridView" /> control on the page.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> values. The default is <see langword="HorizontalAlign.NotSet" />.</returns>
	[Category("Layout")]
	[DefaultValue(HorizontalAlign.NotSet)]
	public virtual HorizontalAlign HorizontalAlign
	{
		get
		{
			if (base.ControlStyleCreated)
			{
				return ((TableStyle)base.ControlStyle).HorizontalAlign;
			}
			return HorizontalAlign.NotSet;
		}
		set
		{
			((TableStyle)base.ControlStyle).HorizontalAlign = value;
		}
	}

	/// <summary>Gets the number of pages required to display the records of the data source in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The number of pages in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual int PageCount
	{
		get
		{
			return pageCount;
		}
		private set
		{
			pageCount = value;
		}
	}

	/// <summary>Gets or sets the index of the currently displayed page.</summary>
	/// <returns>The zero-based index of the currently displayed page.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Web.UI.WebControls.GridView.PageIndex" /> property is set to a value less than 0.</exception>
	[WebCategory("Paging")]
	[Browsable(true)]
	[DefaultValue(0)]
	public virtual int PageIndex
	{
		get
		{
			return pageIndex;
		}
		set
		{
			if (value != pageIndex)
			{
				pageIndex = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets the number of records to display on a page in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The number of records to display on a single page. The default is 10.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Web.UI.WebControls.GridView.PageSize" /> property is set to a value less than 1. </exception>
	[DefaultValue(10)]
	[WebCategory("Paging")]
	public virtual int PageSize
	{
		get
		{
			object obj = ViewState["PageSize"];
			if (obj != null)
			{
				return (int)obj;
			}
			return 10;
		}
		set
		{
			if (value != PageSize)
			{
				ViewState["PageSize"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object that enables you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> that enables you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Paging")]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	public virtual PagerSettings PagerSettings
	{
		get
		{
			if (pagerSettings == null)
			{
				pagerSettings = new PagerSettings(this);
				if (base.IsTrackingViewState)
				{
					((IStateManager)pagerSettings).TrackViewState();
				}
			}
			return pagerSettings;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle PagerStyle
	{
		get
		{
			if (pagerStyle == null)
			{
				pagerStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					pagerStyle.TrackViewState();
				}
			}
			return pagerStyle;
		}
	}

	/// <summary>Gets or sets the custom content for the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the pager row. The default value is null, which indicates that this property is not set.</returns>
	[DefaultValue(null)]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	[TemplateContainer(typeof(GridViewRow))]
	public virtual ITemplate PagerTemplate
	{
		get
		{
			return pagerTemplate;
		}
		set
		{
			pagerTemplate = value;
		}
	}

	/// <summary>Gets or sets the name of the column to use as the column header for the <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>The name of the column to use as the column header. The default is an empty string (""), which indicates that this property is not set.</returns>
	[DefaultValue("")]
	[WebCategory("Accessibility")]
	public virtual string RowHeaderColumn
	{
		get
		{
			object obj = ViewState["RowHeaderColumn"];
			if (obj != null)
			{
				return (string)obj;
			}
			return string.Empty;
		}
		set
		{
			if (!(value == RowHeaderColumn))
			{
				ViewState["RowHeaderColumn"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.GridViewRow" /> objects that represent the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" /> that contains all the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual GridViewRowCollection Rows
	{
		get
		{
			EnsureChildControls();
			if (rows == null)
			{
				rows = new GridViewRowCollection(new ArrayList());
			}
			return rows;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle RowStyle
	{
		get
		{
			if (rowStyle == null)
			{
				rowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					rowStyle.TrackViewState();
				}
			}
			return rowStyle;
		}
	}

	/// <summary>Gets the <see cref="T:System.Web.UI.WebControls.DataKey" /> object that contains the data key value for the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The <see cref="T:System.Web.UI.WebControls.DataKey" /> for the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is <see langword="null" />, which indicates that no row is currently selected.</returns>
	/// <exception cref="T:System.InvalidOperationException">No data keys are specified in the <see cref="P:System.Web.UI.WebControls.GridView.DataKeyNames" /> property.</exception>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual DataKey SelectedDataKey
	{
		get
		{
			if (DataKeyNames.Length == 0)
			{
				throw new InvalidOperationException($"Data keys must be specified on GridView '{ID}' before the selected data keys can be retrieved.  Use the DataKeyNames property to specify data keys.");
			}
			if (selectedIndex >= 0 && selectedIndex < DataKeys.Count)
			{
				return DataKeys[selectedIndex];
			}
			return null;
		}
	}

	/// <summary>Gets or sets the data-key value for the persisted selected item in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The data key for the persisted selected item in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is <see langword="null" />, which indicates that no item is currently selected.</returns>
	[MonoTODO]
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual DataKey SelectedPersistedDataKey { get; set; }

	/// <summary>For a description of this member, see <see cref="P:System.Web.UI.WebControls.IPersistedSelector.DataKey" />.</summary>
	/// <returns>The data-key value for the persisted selected record in a data-bound control.</returns>
	[MonoTODO]
	DataKey IPersistedSelector.DataKey
	{
		get
		{
			return SelectedPersistedDataKey;
		}
		set
		{
			SelectedPersistedDataKey = value;
		}
	}

	/// <summary>Gets or sets the index of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The zero-based index of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is -1, which indicates that no row is currently selected.</returns>
	/// <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Web.UI.WebControls.GridView.SelectedIndex" /> property is set to a value less than -1. </exception>
	[Bindable(true)]
	[DefaultValue(-1)]
	public virtual int SelectedIndex
	{
		get
		{
			return selectedIndex;
		}
		set
		{
			if (rows != null && selectedIndex >= 0 && selectedIndex < Rows.Count)
			{
				int index = selectedIndex;
				selectedIndex = -1;
				Rows[index].RowState = GetRowState(index);
			}
			selectedIndex = value;
			if (rows != null && selectedIndex >= 0 && selectedIndex < Rows.Count)
			{
				Rows[selectedIndex].RowState = GetRowState(selectedIndex);
			}
		}
	}

	/// <summary>Gets a reference to a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the selected row in the control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the selected row in the control.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual GridViewRow SelectedRow
	{
		get
		{
			if (selectedIndex >= 0 && selectedIndex < Rows.Count)
			{
				return Rows[selectedIndex];
			}
			return null;
		}
	}

	/// <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[WebCategory("Styles")]
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[NotifyParentProperty(true)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	public TableItemStyle SelectedRowStyle
	{
		get
		{
			if (selectedRowStyle == null)
			{
				selectedRowStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					selectedRowStyle.TrackViewState();
				}
			}
			return selectedRowStyle;
		}
	}

	/// <summary>Gets the data key value of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The data key value of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	[Browsable(false)]
	public object SelectedValue
	{
		get
		{
			if (SelectedDataKey != null)
			{
				return SelectedDataKey.Value;
			}
			return null;
		}
	}

	/// <summary>Gets or sets a value indicating whether the footer row is displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display the footer row; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
	[WebCategory("Appearance")]
	[DefaultValue(false)]
	public virtual bool ShowFooter
	{
		get
		{
			object obj = ViewState["ShowFooter"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return false;
		}
		set
		{
			if (value != ShowFooter)
			{
				ViewState["ShowFooter"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets a value indicating whether the header row is displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>
	///     <see langword="true" /> to display the header row; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
	[WebCategory("Appearance")]
	[DefaultValue(true)]
	public virtual bool ShowHeader
	{
		get
		{
			object obj = ViewState["ShowHeader"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return true;
		}
		set
		{
			if (value != ShowHeader)
			{
				ViewState["ShowHeader"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets the sort direction of the column being sorted.</summary>
	/// <returns>One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values. The default is <see langword="SortDirection.Ascending" />.</returns>
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[Browsable(false)]
	[DefaultValue(SortDirection.Ascending)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual SortDirection SortDirection
	{
		get
		{
			return sortDirection;
		}
		private set
		{
			if (sortDirection != value)
			{
				sortDirection = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets the sort expression associated with the column or columns being sorted.</summary>
	/// <returns>The sort expression associated with the column or columns being sorted.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public virtual string SortExpression
	{
		get
		{
			if (sortExpression == null)
			{
				return string.Empty;
			}
			return sortExpression;
		}
		private set
		{
			if (!(sortExpression == value))
			{
				sortExpression = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the top pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the top pager row in the control.</returns>
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	[Browsable(false)]
	public virtual GridViewRow TopPagerRow
	{
		get
		{
			EnsureDataBound();
			return topPagerRow;
		}
	}

	/// <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.GridView" /> control renders its header in an accessible format. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
	/// <returns>
	///     <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.GridView" /> control renders its header in an accessible format; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
	[WebCategory("Accessibility")]
	[DefaultValue(true)]
	public virtual bool UseAccessibleHeader
	{
		get
		{
			object obj = ViewState["UseAccessibleHeader"];
			if (obj != null)
			{
				return (bool)obj;
			}
			return true;
		}
		set
		{
			if (value != UseAccessibleHeader)
			{
				ViewState["UseAccessibleHeader"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets the names of the data fields whose values are appended to the <see cref="P:System.Web.UI.Control.ClientID" /> property value to uniquely identify each instance of a data-bound control.</summary>
	/// <returns>The names of the data fields whose values are used to uniquely identify each instance of a data-bound control when ASP.NET generates the <see cref="P:System.Web.UI.Control.ClientID" /> value.</returns>
	[TypeConverter(typeof(StringArrayConverter))]
	[DefaultValue(null)]
	public virtual string[] ClientIDRowSuffix { get; set; }

	/// <summary>Gets the data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the <see cref="P:System.Web.UI.Control.ClientID" /> value.</summary>
	/// <returns>The data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the <see cref="P:System.Web.UI.Control.ClientID" /> value.</returns>
	[Browsable(false)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public DataKeyArray ClientIDRowSuffixDataKeys
	{
		get
		{
			if (rowSuffixKeys == null)
			{
				rowSuffixKeys = new DataKeyArray(DataKeySuffixList);
				if (base.IsTrackingViewState)
				{
					((IStateManager)rowSuffixKeys).TrackViewState();
				}
			}
			return rowSuffixKeys;
		}
	}

	/// <summary>Gets or sets a value that indicates whether the selection of a row is based on index or on data-key values.</summary>
	/// <returns>
	///     <see langword="true" /> if the row selection is based on data-key values; otherwise, <see langword="false" />. The default value is <see langword="false" />.</returns>
	[DefaultValue(false)]
	public virtual bool EnablePersistedSelection
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets the control that automatically generates the columns for a data-bound control for use by ASP.NET Dynamic Data. </summary>
	/// <returns>The control that automatically generates the columns for a data-bound control.</returns>
	IAutoFieldGenerator IFieldControl.FieldsGenerator
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>Gets or sets a value that indicates whether the heading of a column in the <see cref="T:System.Web.UI.WebControls.GridView" /> control is visible when the column has no data. </summary>
	/// <returns>
	///     <see langword="true" /> if the header is visible; otherwise, <see langword="false" />.</returns>
	[DefaultValue(false)]
	public virtual bool ShowHeaderWhenEmpty
	{
		get
		{
			return ViewState.GetBool("ShowHeaderWhenEmpty", def: false);
		}
		set
		{
			if (value != ShowHeaderWhenEmpty)
			{
				ViewState["ShowHeaderWhenEmpty"] = value;
				RequireBinding();
			}
		}
	}

	/// <summary>Gets or sets the CSS style for a <see cref="T:System.Web.UI.WebControls.GridView" /> column when the column is sorted in ascending order. </summary>
	/// <returns>
	///     <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> control when the column is sorted in ascending order; otherwise, <see langword="false" />.</returns>
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	public TableItemStyle SortedAscendingCellStyle
	{
		get
		{
			if (sortedAscendingCellStyle == null)
			{
				sortedAscendingCellStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					((IStateManager)sortedAscendingCellStyle).TrackViewState();
				}
			}
			return sortedAscendingCellStyle;
		}
	}

	/// <summary>Gets or sets the CSS style to apply to a <see cref="T:System.Web.UI.WebControls.GridView" /> column heading when the column is sorted in ascending order.</summary>
	/// <returns>
	///     <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> heading when the column is sorted in ascending order; otherwise, <see langword="false" />.</returns>
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	public TableItemStyle SortedAscendingHeaderStyle
	{
		get
		{
			if (sortedAscendingHeaderStyle == null)
			{
				sortedAscendingHeaderStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					((IStateManager)sortedAscendingHeaderStyle).TrackViewState();
				}
			}
			return sortedAscendingHeaderStyle;
		}
	}

	/// <summary>Gets or sets the style of a <see cref="T:System.Web.UI.WebControls.GridView" /> column when the column is sorted in descending order.</summary>
	/// <returns>
	///     <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> when the column is sorted in descending order; otherwise, <see langword="false" />.</returns>
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	public TableItemStyle SortedDescendingCellStyle
	{
		get
		{
			if (sortedDescendingCellStyle == null)
			{
				sortedDescendingCellStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					((IStateManager)sortedDescendingCellStyle).TrackViewState();
				}
			}
			return sortedDescendingCellStyle;
		}
	}

	/// <summary>Gets or sets the style to apply to a <see cref="T:System.Web.UI.WebControls.GridView" /> column heading when the column is sorted in descending order.</summary>
	/// <returns>
	///     <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> heading when the column is sorted in descending order; otherwise, <see langword="false" />.</returns>
	[PersistenceMode(PersistenceMode.InnerProperty)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
	[NotifyParentProperty(true)]
	public TableItemStyle SortedDescendingHeaderStyle
	{
		get
		{
			if (sortedDescendingHeaderStyle == null)
			{
				sortedDescendingHeaderStyle = new TableItemStyle();
				if (base.IsTrackingViewState)
				{
					((IStateManager)sortedDescendingHeaderStyle).TrackViewState();
				}
			}
			return sortedDescendingHeaderStyle;
		}
	}

	private Table ContainedTable
	{
		get
		{
			if (table == null)
			{
				table = CreateChildTable();
				Controls.Add(table);
			}
			return table;
		}
	}

	/// <summary>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</returns>
	protected override HtmlTextWriterTag TagKey
	{
		get
		{
			if (EnableSortingAndPagingCallbacks)
			{
				return HtmlTextWriterTag.Div;
			}
			return HtmlTextWriterTag.Table;
		}
	}

	/// <summary>Occurs when one of the pager buttons is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the paging operation.</summary>
	public event EventHandler PageIndexChanged
	{
		add
		{
			base.Events.AddHandler(PageIndexChangedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(PageIndexChangedEvent, value);
		}
	}

	/// <summary>Occurs when one of the pager buttons is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the paging operation.</summary>
	public event GridViewPageEventHandler PageIndexChanging
	{
		add
		{
			base.Events.AddHandler(PageIndexChangingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(PageIndexChangingEvent, value);
		}
	}

	/// <summary>Occurs when the Cancel button of a row in edit mode is clicked, but before the row exits edit mode.</summary>
	public event GridViewCancelEditEventHandler RowCancelingEdit
	{
		add
		{
			base.Events.AddHandler(RowCancelingEditEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowCancelingEditEvent, value);
		}
	}

	/// <summary>Occurs when a button is clicked in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	public event GridViewCommandEventHandler RowCommand
	{
		add
		{
			base.Events.AddHandler(RowCommandEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowCommandEvent, value);
		}
	}

	/// <summary>Occurs when a row is created in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	public event GridViewRowEventHandler RowCreated
	{
		add
		{
			base.Events.AddHandler(RowCreatedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowCreatedEvent, value);
		}
	}

	/// <summary>Occurs when a data row is bound to data in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	public event GridViewRowEventHandler RowDataBound
	{
		add
		{
			base.Events.AddHandler(RowDataBoundEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowDataBoundEvent, value);
		}
	}

	/// <summary>Occurs when a row's Delete button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control deletes the row.</summary>
	public event GridViewDeletedEventHandler RowDeleted
	{
		add
		{
			base.Events.AddHandler(RowDeletedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowDeletedEvent, value);
		}
	}

	/// <summary>Occurs when a row's Delete button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control deletes the row.</summary>
	public event GridViewDeleteEventHandler RowDeleting
	{
		add
		{
			base.Events.AddHandler(RowDeletingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowDeletingEvent, value);
		}
	}

	/// <summary>Occurs when a row's Edit button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control enters edit mode.</summary>
	public event GridViewEditEventHandler RowEditing
	{
		add
		{
			base.Events.AddHandler(RowEditingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowEditingEvent, value);
		}
	}

	/// <summary>Occurs when a row's Update button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control updates the row.</summary>
	public event GridViewUpdatedEventHandler RowUpdated
	{
		add
		{
			base.Events.AddHandler(RowUpdatedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowUpdatedEvent, value);
		}
	}

	/// <summary>Occurs when a row's Update button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control updates the row.</summary>
	public event GridViewUpdateEventHandler RowUpdating
	{
		add
		{
			base.Events.AddHandler(RowUpdatingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(RowUpdatingEvent, value);
		}
	}

	/// <summary>Occurs when a row's Select button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the select operation.</summary>
	public event EventHandler SelectedIndexChanged
	{
		add
		{
			base.Events.AddHandler(SelectedIndexChangedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(SelectedIndexChangedEvent, value);
		}
	}

	/// <summary>Occurs when a row's Select button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the select operation.</summary>
	public event GridViewSelectEventHandler SelectedIndexChanging
	{
		add
		{
			base.Events.AddHandler(SelectedIndexChangingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(SelectedIndexChangingEvent, value);
		}
	}

	/// <summary>Occurs when the hyperlink to sort a column is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the sort operation.</summary>
	public event EventHandler Sorted
	{
		add
		{
			base.Events.AddHandler(SortedEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(SortedEvent, value);
		}
	}

	/// <summary>Occurs when the hyperlink to sort a column is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the sort operation.</summary>
	public event GridViewSortEventHandler Sorting
	{
		add
		{
			base.Events.AddHandler(SortingEvent, value);
		}
		remove
		{
			base.Events.RemoveHandler(SortingEvent, value);
		}
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.GridView" /> class.</summary>
	public GridView()
	{
		EnableModelValidation = true;
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanged" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data. </param>
	protected virtual void OnPageIndexChanged(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[PageIndexChanged])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewPageEventArgs" /> that contains event data. </param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" /> event.</exception>
	protected virtual void OnPageIndexChanging(GridViewPageEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewPageEventHandler gridViewPageEventHandler = (GridViewPageEventHandler)base.Events[PageIndexChanging];
			if (gridViewPageEventHandler != null)
			{
				gridViewPageEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event PageIndexChanging which wasn't handled.");
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCancelEditEventArgs" /> that contains event data. </param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" /> event.</exception>
	protected virtual void OnRowCancelingEdit(GridViewCancelEditEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewCancelEditEventHandler gridViewCancelEditEventHandler = (GridViewCancelEditEventHandler)base.Events[RowCancelingEdit];
			if (gridViewCancelEditEventHandler != null)
			{
				gridViewCancelEditEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event RowCancelingEdit which wasn't handled.");
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" /> that contains event data.</param>
	protected virtual void OnRowCommand(GridViewCommandEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewCommandEventHandler)base.Events[RowCommand])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data. </param>
	protected virtual void OnRowCreated(GridViewRowEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewRowEventHandler)base.Events[RowCreated])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data.</param>
	protected virtual void OnRowDataBound(GridViewRowEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewRowEventHandler)base.Events[RowDataBound])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleted" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewDeletedEventArgs" /> that contains event data. </param>
	protected virtual void OnRowDeleted(GridViewDeletedEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewDeletedEventHandler)base.Events[RowDeleted])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewDeleteEventArgs" /> that contains event data. </param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" /> event.</exception>
	protected virtual void OnRowDeleting(GridViewDeleteEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewDeleteEventHandler gridViewDeleteEventHandler = (GridViewDeleteEventHandler)base.Events[RowDeleting];
			if (gridViewDeleteEventHandler != null)
			{
				gridViewDeleteEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event RowDeleting which wasn't handled.");
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewEditEventArgs" /> that contains event data. </param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" /> event.</exception>
	protected virtual void OnRowEditing(GridViewEditEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewEditEventHandler gridViewEditEventHandler = (GridViewEditEventHandler)base.Events[RowEditing];
			if (gridViewEditEventHandler != null)
			{
				gridViewEditEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event RowEditing which wasn't handled.");
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdated" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewUpdatedEventArgs" /> that contains event data.</param>
	protected virtual void OnRowUpdated(GridViewUpdatedEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewUpdatedEventHandler)base.Events[RowUpdated])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewUpdateEventArgs" /> that contains event data.</param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" /> event.</exception>
	protected virtual void OnRowUpdating(GridViewUpdateEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewUpdateEventHandler gridViewUpdateEventHandler = (GridViewUpdateEventHandler)base.Events[RowUpdating];
			if (gridViewUpdateEventHandler != null)
			{
				gridViewUpdateEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event RowUpdating which wasn't handled.");
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanged" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
	protected virtual void OnSelectedIndexChanged(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[SelectedIndexChanged])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanging" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewSelectEventArgs" /> that contains event data.</param>
	protected virtual void OnSelectedIndexChanging(GridViewSelectEventArgs e)
	{
		if (base.Events != null)
		{
			((GridViewSelectEventHandler)base.Events[SelectedIndexChanging])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.Sorted" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
	protected virtual void OnSorted(EventArgs e)
	{
		if (base.Events != null)
		{
			((EventHandler)base.Events[Sorted])?.Invoke(this, e);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.Sorting" /> event.</summary>
	/// <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs" /> that contains event data.</param>
	/// <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.Sorting" /> event.</exception>
	protected virtual void OnSorting(GridViewSortEventArgs e)
	{
		if (base.Events != null)
		{
			GridViewSortEventHandler gridViewSortEventHandler = (GridViewSortEventHandler)base.Events[Sorting];
			if (gridViewSortEventHandler != null)
			{
				gridViewSortEventHandler(this, e);
				return;
			}
		}
		if (!base.IsBoundUsingDataSourceID)
		{
			throw new HttpException($"The GridView '{ID}' fired event Sorting which wasn't handled.");
		}
	}

	/// <summary>Determines whether the specified data type can be bound to a column in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="type">A <see cref="T:System.Type" /> that represents the data type to test. </param>
	/// <returns>
	///     <see langword="true" /> if the specified data type can be bound to a column in a <see cref="T:System.Web.UI.WebControls.GridView" /> control; otherwise, <see langword="false" />.</returns>
	public virtual bool IsBindableType(Type type)
	{
		if (!type.IsPrimitive && !(type == typeof(string)) && !(type == typeof(decimal)) && !(type == typeof(DateTime)))
		{
			return type == typeof(Guid);
		}
		return true;
	}

	/// <summary>Creates the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that contains the arguments that get passed to the data source for processing.</summary>
	/// <returns>A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> that contains the arguments that get passed to the data source.</returns>
	protected override DataSourceSelectArguments CreateDataSourceSelectArguments()
	{
		DataSourceSelectArguments empty = DataSourceSelectArguments.Empty;
		DataSourceView data = GetData();
		if (AllowPaging && data.CanPage)
		{
			empty.StartRowIndex = PageIndex * PageSize;
			if (data.CanRetrieveTotalRowCount)
			{
				empty.RetrieveTotalRowCount = true;
				empty.MaximumRows = PageSize;
			}
			else
			{
				empty.MaximumRows = -1;
			}
		}
		if (base.IsBoundUsingDataSourceID && !string.IsNullOrEmpty(sortExpression))
		{
			if (sortDirection == SortDirection.Ascending)
			{
				empty.SortExpression = sortExpression;
			}
			else
			{
				empty.SortExpression = sortExpression + " DESC";
			}
		}
		return empty;
	}

	/// <summary>Creates the set of column fields used to build the control hierarchy.</summary>
	/// <param name="dataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> that represents the data source. </param>
	/// <param name="useDataSource">
	///       <see langword="true" /> to use the data source specified by the <paramref name="dataSource" /> parameter; otherwise, <see langword="false" />. </param>
	/// <returns>A <see cref="T:System.Collections.ICollection" /> that contains the fields used to build the control hierarchy.</returns>
	protected virtual ICollection CreateColumns(PagedDataSource dataSource, bool useDataSource)
	{
		bool autoGenerateColumns = AutoGenerateColumns;
		if (autoGenerateColumns)
		{
			IAutoFieldGenerator columnsGenerator = ColumnsGenerator;
			if (columnsGenerator != null)
			{
				return columnsGenerator.GenerateFields(this);
			}
		}
		ArrayList arrayList = new ArrayList();
		if (AutoGenerateEditButton || AutoGenerateDeleteButton || AutoGenerateSelectButton)
		{
			CommandField commandField = new CommandField();
			commandField.ShowEditButton = AutoGenerateEditButton;
			commandField.ShowDeleteButton = AutoGenerateDeleteButton;
			commandField.ShowSelectButton = AutoGenerateSelectButton;
			arrayList.Add(commandField);
		}
		arrayList.AddRange(Columns);
		if (autoGenerateColumns)
		{
			if (useDataSource)
			{
				autoFieldProperties = CreateAutoFieldProperties(dataSource);
			}
			if (autoFieldProperties != null)
			{
				AutoGeneratedFieldProperties[] array = autoFieldProperties;
				foreach (AutoGeneratedFieldProperties fieldProperties in array)
				{
					arrayList.Add(CreateAutoGeneratedColumn(fieldProperties));
				}
			}
		}
		return arrayList;
	}

	/// <summary>Creates an automatically generated column field.</summary>
	/// <param name="fieldProperties">An <see cref="T:System.Web.UI.WebControls.AutoGeneratedFieldProperties" /> that represents the properties of the automatically generated column field to create.</param>
	/// <returns>An <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> that represents the automatically generated column field specified by the <paramref name="fieldProperties" /> parameter.</returns>
	protected virtual AutoGeneratedField CreateAutoGeneratedColumn(AutoGeneratedFieldProperties fieldProperties)
	{
		return new AutoGeneratedField(fieldProperties);
	}

	private AutoGeneratedFieldProperties[] CreateAutoFieldProperties(PagedDataSource source)
	{
		if (source == null)
		{
			return null;
		}
		PropertyDescriptorCollection propertyDescriptorCollection = source.GetItemProperties(new PropertyDescriptor[0]);
		Type type = null;
		List<AutoGeneratedFieldProperties> list = new List<AutoGeneratedFieldProperties>();
		if (propertyDescriptorCollection == null)
		{
			object obj = null;
			PropertyInfo property = source.DataSource.GetType().GetProperty("Item", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public, null, null, new Type[1] { typeof(int) }, null);
			if (property != null)
			{
				type = property.PropertyType;
			}
			if (type == null || type == typeof(object))
			{
				IEnumerator enumerator = source.GetEnumerator();
				if (enumerator != null && enumerator.MoveNext())
				{
					obj = enumerator.Current;
					_dataEnumerator = enumerator;
				}
				if (obj != null)
				{
					type = obj.GetType();
				}
			}
			if (obj != null && obj is ICustomTypeDescriptor)
			{
				propertyDescriptorCollection = TypeDescriptor.GetProperties(obj);
			}
			else if (type != null)
			{
				if (IsBindableType(type))
				{
					AutoGeneratedFieldProperties autoGeneratedFieldProperties = new AutoGeneratedFieldProperties();
					((IStateManager)autoGeneratedFieldProperties).TrackViewState();
					autoGeneratedFieldProperties.Name = "Item";
					autoGeneratedFieldProperties.DataField = BoundField.ThisExpression;
					autoGeneratedFieldProperties.Type = type;
					list.Add(autoGeneratedFieldProperties);
				}
				else
				{
					propertyDescriptorCollection = TypeDescriptor.GetProperties(type);
				}
			}
		}
		if (propertyDescriptorCollection != null && propertyDescriptorCollection.Count > 0)
		{
			foreach (PropertyDescriptor item in propertyDescriptorCollection)
			{
				if (!IsBindableType(item.PropertyType) || (!(type == null) && !(item.ComponentType == type)))
				{
					continue;
				}
				AutoGeneratedFieldProperties autoGeneratedFieldProperties2 = new AutoGeneratedFieldProperties();
				((IStateManager)autoGeneratedFieldProperties2).TrackViewState();
				autoGeneratedFieldProperties2.Name = item.Name;
				autoGeneratedFieldProperties2.DataField = item.Name;
				for (int i = 0; i < DataKeyNames.Length; i++)
				{
					if (string.Compare(DataKeyNames[i], item.Name, StringComparison.InvariantCultureIgnoreCase) == 0)
					{
						autoGeneratedFieldProperties2.IsReadOnly = true;
						break;
					}
				}
				autoGeneratedFieldProperties2.Type = item.PropertyType;
				list.Add(autoGeneratedFieldProperties2);
			}
		}
		if (list.Count > 0)
		{
			return list.ToArray();
		}
		return new AutoGeneratedFieldProperties[0];
	}

	/// <summary>Creates a row in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="rowIndex">The index of the row to create. </param>
	/// <param name="dataSourceIndex">The index of the data source item to bind to the row. </param>
	/// <param name="rowType">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowType" /> values. </param>
	/// <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values. </param>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> created using the specified parameters.</returns>
	protected virtual GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType, DataControlRowState rowState)
	{
		return new GridViewRow(rowIndex, dataSourceIndex, rowType, rowState);
	}

	private void RequireBinding()
	{
		if (base.Initialized)
		{
			base.RequiresDataBinding = true;
		}
	}

	/// <summary>Creates a new child table.</summary>
	/// <returns>Always returns a new <see cref="T:System.Web.UI.WebControls.Table" /> that represents the child table.</returns>
	protected virtual Table CreateChildTable()
	{
		return new ContainedTable(this);
	}

	private void CreateHeaderRow(Table mainTable, DataControlField[] fields, bool dataBinding)
	{
		GridViewRow gridViewRow = CreateRow(-1, -1, DataControlRowType.Header, DataControlRowState.Normal);
		InitializeRow(gridViewRow, fields);
		OnRowCreated(new GridViewRowEventArgs(gridViewRow));
		mainTable.Rows.Add(gridViewRow);
		if (dataBinding)
		{
			gridViewRow.DataBind();
			OnRowDataBound(new GridViewRowEventArgs(gridViewRow));
		}
	}

	/// <summary>Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.GridView" /> control using the specified data source.</summary>
	/// <param name="dataSource">An <see cref="T:System.Collections.IEnumerable" /> that contains the data source for the <see cref="T:System.Web.UI.WebControls.GridView" /> control. </param>
	/// <param name="dataBinding">
	///       <see langword="true" /> to indicate that the child controls are bound to data; otherwise, <see langword="false" />. </param>
	/// <returns>The number of rows created.</returns>
	/// <exception cref="T:System.Web.HttpException">
	///         <paramref name="dataSource" /> returns a null <see cref="T:System.Web.UI.DataSourceView" />.-or-
	///         <paramref name="dataSource" /> does not implement the <see cref="T:System.Collections.ICollection" /> interface and cannot return a <see cref="P:System.Web.UI.DataSourceSelectArguments.TotalRowCount" />. -or-
	///         <see cref="P:System.Web.UI.WebControls.GridView.AllowPaging" /> is <see langword="true" /> and <paramref name="dataSource" /> does not implement the <see cref="T:System.Collections.ICollection" /> interface and cannot perform data source paging.-or-
	///         <paramref name="dataSource" /> does not implement the <see cref="T:System.Collections.ICollection" /> interface and <paramref name="dataBinding" /> is set to <see langword="false" />.</exception>
	protected override int CreateChildControls(IEnumerable dataSource, bool dataBinding)
	{
		Controls.Clear();
		table = null;
		rows = null;
		if (dataSource == null)
		{
			return 0;
		}
		PagedDataSource pagedDataSource;
		if (dataBinding)
		{
			DataSourceView data = GetData();
			pagedDataSource = new PagedDataSource();
			pagedDataSource.DataSource = dataSource;
			if (AllowPaging)
			{
				pagedDataSource.AllowPaging = true;
				pagedDataSource.PageSize = PageSize;
				if (data.CanPage)
				{
					pagedDataSource.AllowServerPaging = true;
					if (base.SelectArguments.RetrieveTotalRowCount)
					{
						pagedDataSource.VirtualCount = base.SelectArguments.TotalRowCount;
					}
				}
				if (PageIndex >= pagedDataSource.PageCount)
				{
					pageIndex = pagedDataSource.PageCount - 1;
				}
				pagedDataSource.CurrentPageIndex = PageIndex;
			}
			PageCount = pagedDataSource.PageCount;
		}
		else
		{
			pagedDataSource = new PagedDataSource();
			pagedDataSource.DataSource = dataSource;
			if (AllowPaging)
			{
				pagedDataSource.AllowPaging = true;
				pagedDataSource.PageSize = PageSize;
				pagedDataSource.CurrentPageIndex = PageIndex;
			}
		}
		bool flag = AllowPaging && PageCount >= 1 && PagerSettings.Visible;
		ArrayList arrayList = new ArrayList();
		_dataEnumerator = null;
		ICollection collection = CreateColumns(pagedDataSource, dataBinding);
		int count = collection.Count;
		DataControlField[] array = new DataControlField[count];
		collection.CopyTo(array, 0);
		for (int i = 0; i < count; i++)
		{
			DataControlField dataControlField = array[i];
			dataControlField.Initialize(AllowSorting, this);
			if (EnableSortingAndPagingCallbacks)
			{
				dataControlField.ValidateSupportsCallback();
			}
		}
		bool flag2 = false;
		IEnumerator enumerator;
		if (_dataEnumerator != null)
		{
			enumerator = _dataEnumerator;
			flag2 = true;
		}
		else
		{
			enumerator = pagedDataSource.GetEnumerator();
		}
		Table containedTable = ContainedTable;
		List<DataKey> list;
		string[] keyNames;
		List<DataKey> list2;
		string[] keyNames2;
		if (dataBinding)
		{
			list = DataKeyList;
			keyNames = DataKeyNames;
			list2 = DataKeySuffixList;
			keyNames2 = ClientIDRowSuffix;
		}
		else
		{
			list = null;
			keyNames = null;
			list2 = null;
			keyNames2 = null;
		}
		while (flag2 || enumerator.MoveNext())
		{
			flag2 = false;
			object current = enumerator.Current;
			if (arrayList.Count == 0)
			{
				if (flag && (PagerSettings.Position == PagerPosition.Top || PagerSettings.Position == PagerPosition.TopAndBottom))
				{
					topPagerRow = CreatePagerRow(count, pagedDataSource);
					OnRowCreated(new GridViewRowEventArgs(topPagerRow));
					containedTable.Rows.Add(topPagerRow);
					if (dataBinding)
					{
						topPagerRow.DataBind();
						OnRowDataBound(new GridViewRowEventArgs(topPagerRow));
					}
					if (PageCount == 1)
					{
						topPagerRow.Visible = false;
					}
				}
				if (ShowHeader)
				{
					CreateHeaderRow(containedTable, array, dataBinding);
				}
			}
			DataControlRowState rowState = GetRowState(arrayList.Count);
			GridViewRow gridViewRow = CreateRow(arrayList.Count, arrayList.Count, DataControlRowType.DataRow, rowState);
			gridViewRow.DataItem = current;
			arrayList.Add(gridViewRow);
			InitializeRow(gridViewRow, array);
			OnRowCreated(new GridViewRowEventArgs(gridViewRow));
			containedTable.Rows.Add(gridViewRow);
			if (dataBinding)
			{
				gridViewRow.DataBind();
				if (EditIndex == gridViewRow.RowIndex)
				{
					oldEditValues = new DataKey(GetRowValues(gridViewRow, includeReadOnlyFields: true, includePrimaryKey: true));
				}
				list.Add(new DataKey(CreateRowDataKey(gridViewRow), keyNames));
				list2.Add(new DataKey(CreateRowSuffixDataKey(gridViewRow), keyNames2));
				OnRowDataBound(new GridViewRowEventArgs(gridViewRow));
			}
		}
		if (arrayList.Count == 0)
		{
			if (ShowHeader && ShowHeaderWhenEmpty)
			{
				CreateHeaderRow(containedTable, array, dataBinding);
			}
			GridViewRow gridViewRow2 = CreateEmptyrRow(count);
			if (gridViewRow2 != null)
			{
				OnRowCreated(new GridViewRowEventArgs(gridViewRow2));
				containedTable.Rows.Add(gridViewRow2);
				if (dataBinding)
				{
					gridViewRow2.DataBind();
					OnRowDataBound(new GridViewRowEventArgs(gridViewRow2));
				}
			}
			if (containedTable.Rows.Count == 0)
			{
				table = null;
			}
			return 0;
		}
		GridViewRow gridViewRow3 = CreateRow(-1, -1, DataControlRowType.Footer, DataControlRowState.Normal);
		InitializeRow(gridViewRow3, array);
		OnRowCreated(new GridViewRowEventArgs(gridViewRow3));
		containedTable.Rows.Add(gridViewRow3);
		if (dataBinding)
		{
			gridViewRow3.DataBind();
			OnRowDataBound(new GridViewRowEventArgs(gridViewRow3));
		}
		if (flag && (PagerSettings.Position == PagerPosition.Bottom || PagerSettings.Position == PagerPosition.TopAndBottom))
		{
			bottomPagerRow = CreatePagerRow(count, pagedDataSource);
			OnRowCreated(new GridViewRowEventArgs(bottomPagerRow));
			containedTable.Rows.Add(bottomPagerRow);
			if (dataBinding)
			{
				bottomPagerRow.DataBind();
				OnRowDataBound(new GridViewRowEventArgs(bottomPagerRow));
			}
			if (PageCount == 1)
			{
				bottomPagerRow.Visible = false;
			}
		}
		rows = new GridViewRowCollection(arrayList);
		if (!dataBinding)
		{
			return -1;
		}
		if (AllowPaging)
		{
			return pagedDataSource.DataSourceCount;
		}
		return arrayList.Count;
	}

	/// <summary>Creates the default style for the control.</summary>
	/// <returns>A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style for the control.</returns>
	protected override Style CreateControlStyle()
	{
		return new TableStyle(ViewState)
		{
			GridLines = GridLines.Both,
			CellSpacing = 0
		};
	}

	private DataControlRowState GetRowState(int index)
	{
		DataControlRowState dataControlRowState = ((index % 2 != 0) ? DataControlRowState.Alternate : DataControlRowState.Normal);
		if (index == SelectedIndex)
		{
			dataControlRowState |= DataControlRowState.Selected;
		}
		if (index == EditIndex)
		{
			dataControlRowState |= DataControlRowState.Edit;
		}
		return dataControlRowState;
	}

	private GridViewRow CreatePagerRow(int fieldCount, PagedDataSource dataSource)
	{
		GridViewRow gridViewRow = CreateRow(-1, -1, DataControlRowType.Pager, DataControlRowState.Normal);
		InitializePager(gridViewRow, fieldCount, dataSource);
		return gridViewRow;
	}

	/// <summary>Initializes the pager row displayed when the paging feature is enabled.</summary>
	/// <param name="row">A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the pager row to initialize. </param>
	/// <param name="columnSpan">The number of columns the pager row should span. </param>
	/// <param name="pagedDataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> that represents the data source. </param>
	protected virtual void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
	{
		TableCell tableCell = new TableCell();
		if (columnSpan > 1)
		{
			tableCell.ColumnSpan = columnSpan;
		}
		if (pagerTemplate != null)
		{
			pagerTemplate.InstantiateIn(tableCell);
		}
		else
		{
			tableCell.Controls.Add(PagerSettings.CreatePagerControl(pagedDataSource.CurrentPageIndex, pagedDataSource.PageCount));
		}
		row.Cells.Add(tableCell);
	}

	private GridViewRow CreateEmptyrRow(int fieldCount)
	{
		if (emptyDataTemplate == null && string.IsNullOrEmpty(EmptyDataText))
		{
			return null;
		}
		GridViewRow gridViewRow = CreateRow(-1, -1, DataControlRowType.EmptyDataRow, DataControlRowState.Normal);
		TableCell tableCell = new TableCell
		{
			ColumnSpan = fieldCount
		};
		if (emptyDataTemplate != null)
		{
			emptyDataTemplate.InstantiateIn(tableCell);
		}
		else
		{
			tableCell.Text = EmptyDataText;
		}
		gridViewRow.Cells.Add(tableCell);
		return gridViewRow;
	}

	/// <summary>Initializes a row in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="row">A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the row to initialize. </param>
	/// <param name="fields">An array of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that represent the column fields in the <see cref="T:System.Web.UI.WebControls.GridView" /> control. </param>
	protected virtual void InitializeRow(GridViewRow row, DataControlField[] fields)
	{
		bool flag = false;
		DataControlCellType cellType;
		switch (row.RowType)
		{
		case DataControlRowType.Header:
			cellType = DataControlCellType.Header;
			flag = UseAccessibleHeader;
			break;
		case DataControlRowType.Footer:
			cellType = DataControlCellType.Footer;
			break;
		default:
			cellType = DataControlCellType.DataCell;
			break;
		}
		foreach (DataControlField dataControlField in fields)
		{
			DataControlFieldCell cell = ((!((dataControlField is BoundField && ((BoundField)dataControlField).DataField == RowHeaderColumn) || flag)) ? new DataControlFieldCell(dataControlField) : new DataControlFieldHeaderCell(dataControlField, (!flag) ? TableHeaderScope.Row : TableHeaderScope.Column));
			row.Cells.Add(cell);
			dataControlField.InitializeCell(cell, cellType, row.RowState, row.RowIndex);
		}
	}

	private void LoadAndCacheProperties(string[] names, object dataItem, ref PropertyDescriptor[] cache)
	{
		if (cache != null)
		{
			return;
		}
		PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(dataItem);
		int num = ((names != null) ? names.Length : 0);
		cache = new PropertyDescriptor[num];
		for (int i = 0; i < num; i++)
		{
			string text = names[i];
			PropertyDescriptor propertyDescriptor = properties.Find(text, ignoreCase: true);
			if (propertyDescriptor == null)
			{
				throw new InvalidOperationException("Property '" + text + "' not found in object of type " + dataItem.GetType());
			}
			cache[i] = propertyDescriptor;
		}
	}

	private IOrderedDictionary CreateDictionaryFromProperties(PropertyDescriptor[] cache, object dataItem)
	{
		OrderedDictionary orderedDictionary = new OrderedDictionary();
		foreach (PropertyDescriptor propertyDescriptor in cache)
		{
			orderedDictionary[propertyDescriptor.Name] = propertyDescriptor.GetValue(dataItem);
		}
		return orderedDictionary;
	}

	private IOrderedDictionary CreateRowDataKey(GridViewRow row)
	{
		object dataItem = row.DataItem;
		LoadAndCacheProperties(DataKeyNames, dataItem, ref cachedKeyProperties);
		return CreateDictionaryFromProperties(cachedKeyProperties, dataItem);
	}

	private IOrderedDictionary CreateRowSuffixDataKey(GridViewRow row)
	{
		object dataItem = row.DataItem;
		LoadAndCacheProperties(ClientIDRowSuffix, dataItem, ref cachedSuffixKeyProperties);
		return CreateDictionaryFromProperties(cachedSuffixKeyProperties, dataItem);
	}

	private IOrderedDictionary GetRowValues(GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey)
	{
		OrderedDictionary orderedDictionary = new OrderedDictionary();
		ExtractRowValues(orderedDictionary, row, includeReadOnlyFields, includePrimaryKey);
		return orderedDictionary;
	}

	/// <summary>Retrieves the values of each field declared within the specified row and stores them in the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object.</summary>
	/// <param name="fieldValues">An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> used to store the field values.</param>
	/// <param name="row">The <see cref="T:System.Web.UI.WebControls.GridViewRow" /> from which to retrieve the field values.</param>
	/// <param name="includeReadOnlyFields">
	///       <see langword="true" /> to include read-only fields; otherwise, <see langword="false" />.</param>
	/// <param name="includePrimaryKey">
	///       <see langword="true" /> to include the primary key field or fields; otherwise, <see langword="false" />.</param>
	protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey)
	{
		foreach (TableCell cell in row.Cells)
		{
			if (cell is DataControlFieldCell { ContainingField: var containingField } dataControlFieldCell && (containingField == null || containingField.Visible))
			{
				dataControlFieldCell.ContainingField.ExtractValuesFromCell(fieldValues, dataControlFieldCell, row.RowState, includeReadOnlyFields);
			}
		}
		if (!includePrimaryKey && DataKeyNames != null)
		{
			string[] array = DataKeyNames;
			foreach (string key in array)
			{
				fieldValues.Remove(key);
			}
		}
	}

	/// <summary>Binds the data source to the <see cref="T:System.Web.UI.WebControls.GridView" /> control. This method cannot be inherited.</summary>
	public sealed override void DataBind()
	{
		DataKeyList.Clear();
		cachedKeyProperties = null;
		base.DataBind();
		keys = new DataKeyArray(DataKeyList);
		GridViewRow headerRow = HeaderRow;
		if (headerRow != null)
		{
			headerRow.Visible = ShowHeader;
		}
		headerRow = FooterRow;
		if (headerRow != null)
		{
			headerRow.Visible = ShowFooter;
		}
	}

	/// <summary>Binds the specified data source to the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="data">An <see cref="T:System.Collections.IEnumerable" /> that contains the data source.</param>
	protected internal override void PerformDataBinding(IEnumerable data)
	{
		base.PerformDataBinding(data);
	}

	/// <summary>Establishes the control hierarchy.</summary>
	protected internal virtual void PrepareControlHierarchy()
	{
		if (table == null)
		{
			return;
		}
		table.Caption = Caption;
		table.CaptionAlign = CaptionAlign;
		table.CopyBaseAttributes(this);
		foreach (GridViewRow row in table.Rows)
		{
			switch (row.RowType)
			{
			case DataControlRowType.Header:
				if (headerStyle != null && !headerStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(headerStyle);
				}
				row.Visible = ShowHeader;
				break;
			case DataControlRowType.Footer:
				if (footerStyle != null && !footerStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(footerStyle);
				}
				row.Visible = ShowFooter;
				break;
			case DataControlRowType.Pager:
				if (pagerStyle != null && !pagerStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(pagerStyle);
				}
				break;
			case DataControlRowType.EmptyDataRow:
				if (emptyDataRowStyle != null && !emptyDataRowStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(emptyDataRowStyle);
				}
				break;
			case DataControlRowType.DataRow:
				if ((row.RowState & DataControlRowState.Edit) != 0 && editRowStyle != null && !editRowStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(editRowStyle);
				}
				if ((row.RowState & DataControlRowState.Selected) != 0 && selectedRowStyle != null && !selectedRowStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(selectedRowStyle);
				}
				if ((row.RowState & DataControlRowState.Alternate) != 0 && alternatingRowStyle != null && !alternatingRowStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(alternatingRowStyle);
				}
				if (rowStyle != null && !rowStyle.IsEmpty)
				{
					row.ControlStyle.MergeWith(rowStyle);
				}
				break;
			}
			string value = SortExpression;
			bool flag = !string.IsNullOrEmpty(value);
			foreach (TableCell cell in row.Cells)
			{
				if (!(cell is DataControlFieldCell { ContainingField: { } containingField }))
				{
					continue;
				}
				if (!containingField.Visible)
				{
					cell.Visible = false;
					continue;
				}
				switch (row.RowType)
				{
				case DataControlRowType.Header:
					if (containingField.HeaderStyleCreated && !containingField.HeaderStyle.IsEmpty)
					{
						cell.ControlStyle.MergeWith(containingField.HeaderStyle);
					}
					if (flag)
					{
						MergeWithSortingStyle(value, sortedAscendingHeaderStyle, sortedDescendingHeaderStyle, containingField, cell);
					}
					continue;
				case DataControlRowType.Footer:
					if (containingField.FooterStyleCreated && !containingField.FooterStyle.IsEmpty)
					{
						cell.ControlStyle.MergeWith(containingField.FooterStyle);
					}
					continue;
				}
				if (containingField.ControlStyleCreated && !containingField.ControlStyle.IsEmpty)
				{
					foreach (Control control in cell.Controls)
					{
						if (control is WebControl webControl)
						{
							webControl.ControlStyle.MergeWith(containingField.ControlStyle);
						}
					}
				}
				if (containingField.ItemStyleCreated && !containingField.ItemStyle.IsEmpty)
				{
					cell.ControlStyle.MergeWith(containingField.ItemStyle);
				}
				if (flag)
				{
					MergeWithSortingStyle(value, sortedAscendingCellStyle, sortedDescendingCellStyle, containingField, cell);
				}
			}
		}
	}

	private void MergeWithSortingStyle(string sortExpression, TableItemStyle ascending, TableItemStyle descending, DataControlField field, TableCell cell)
	{
		if (string.Compare(field.SortExpression, sortExpression, StringComparison.OrdinalIgnoreCase) == 0)
		{
			cell.ControlStyle.MergeWith((SortDirection == SortDirection.Ascending) ? ascending : descending);
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data. </param>
	protected internal override void OnInit(EventArgs e)
	{
		Page?.RegisterRequiresControlState(this);
		base.OnInit(e);
	}

	private void OnFieldsChanged(object sender, EventArgs args)
	{
		RequireBinding();
	}

	/// <summary>Rebinds the <see cref="T:System.Web.UI.WebControls.GridView" /> control to its data after the <see cref="P:System.Web.UI.WebControls.DataBoundControl.DataMember" />, <see cref="P:System.Web.UI.WebControls.BaseDataBoundControl.DataSource" />, or <see cref="P:System.Web.UI.WebControls.DataBoundControl.DataSourceID" /> property is changed.</summary>
	protected override void OnDataPropertyChanged()
	{
		base.OnDataPropertyChanged();
		RequireBinding();
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.DataSourceView.DataSourceViewChanged" /> event.</summary>
	/// <param name="sender">The source of the event.</param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected override void OnDataSourceViewChanged(object sender, EventArgs e)
	{
		base.OnDataSourceViewChanged(sender, e);
		RequireBinding();
	}

	/// <summary>Determines whether the event for the Web server control is passed up the page's user interface (UI) server control hierarchy.</summary>
	/// <param name="source">The source of the event. </param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains event data. </param>
	/// <returns>
	///     <see langword="true" /> if the event has been canceled; otherwise, <see langword="false" />.</returns>
	protected override bool OnBubbleEvent(object source, EventArgs e)
	{
		if (e is GridViewCommandEventArgs gridViewCommandEventArgs)
		{
			bool causesValidation = false;
			if (gridViewCommandEventArgs.CommandSource is IButtonControl { CausesValidation: not false } buttonControl)
			{
				Page.Validate(buttonControl.ValidationGroup);
				causesValidation = true;
			}
			OnRowCommand(gridViewCommandEventArgs);
			string text = gridViewCommandEventArgs.CommandArgument as string;
			if (text == null || text.Length == 0)
			{
				GridViewRow row = gridViewCommandEventArgs.Row;
				if (row != null)
				{
					text = row.RowIndex.ToString();
				}
			}
			ProcessEvent(gridViewCommandEventArgs.CommandName, text, causesValidation);
			return true;
		}
		return base.OnBubbleEvent(source, e);
	}

	/// <summary>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView" /> control when it posts back to the server.</summary>
	/// <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
	void IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
	{
		ValidateEvent(UniqueID, eventArgument);
		RaisePostBackEvent(eventArgument);
	}

	/// <summary>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView" /> control when it posts back to the server.</summary>
	/// <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
	protected virtual void RaisePostBackEvent(string eventArgument)
	{
		int num = eventArgument.IndexOf('$');
		GridViewCommandEventArgs gridViewCommandEventArgs = ((num == -1) ? new GridViewCommandEventArgs(this, new CommandEventArgs(eventArgument, null)) : new GridViewCommandEventArgs(this, new CommandEventArgs(eventArgument.Substring(0, num), eventArgument.Substring(num + 1))));
		OnRowCommand(gridViewCommandEventArgs);
		ProcessEvent(gridViewCommandEventArgs.CommandName, (string)gridViewCommandEventArgs.CommandArgument, causesValidation: false);
	}

	private void ProcessEvent(string eventName, string param, bool causesValidation)
	{
		switch (eventName)
		{
		case "Page":
		{
			int num2 = -1;
			switch (param)
			{
			case "First":
				num2 = 0;
				break;
			case "Last":
				num2 = PageCount - 1;
				break;
			case "Next":
				num2 = PageIndex + 1;
				break;
			case "Prev":
				num2 = PageIndex - 1;
				break;
			default:
			{
				int result = 0;
				int.TryParse(param, out result);
				num2 = result - 1;
				break;
			}
			}
			SetPageIndex(num2);
			break;
		}
		case "First":
			SetPageIndex(0);
			break;
		case "Last":
			SetPageIndex(PageCount - 1);
			break;
		case "Next":
			if (PageIndex < PageCount - 1)
			{
				SetPageIndex(PageIndex + 1);
			}
			break;
		case "Prev":
			if (PageIndex > 0)
			{
				SetPageIndex(PageIndex - 1);
			}
			break;
		case "Select":
			SelectRow(int.Parse(param));
			break;
		case "Edit":
			SetEditRow(int.Parse(param));
			break;
		case "Update":
		{
			int num = int.Parse(param);
			UpdateRow(Rows[num], num, causesValidation);
			break;
		}
		case "Cancel":
			CancelEdit();
			break;
		case "Delete":
			DeleteRow(int.Parse(param));
			break;
		case "Sort":
			Sort(param);
			break;
		}
	}

	private void Sort(string newSortExpression)
	{
		SortDirection sortDirection = SortDirection.Ascending;
		if (sortExpression == newSortExpression && this.sortDirection == SortDirection.Ascending)
		{
			sortDirection = SortDirection.Descending;
		}
		Sort(newSortExpression, sortDirection);
	}

	/// <summary>Sorts the <see cref="T:System.Web.UI.WebControls.GridView" /> control based on the specified sort expression and direction.</summary>
	/// <param name="sortExpression">The sort expression with which to sort the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</param>
	/// <param name="sortDirection">One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values.</param>
	/// <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source control, but the <see cref="T:System.Web.UI.DataSourceView" /> that is associated with the data source is <see langword="null" />.</exception>
	public virtual void Sort(string sortExpression, SortDirection sortDirection)
	{
		GridViewSortEventArgs gridViewSortEventArgs = new GridViewSortEventArgs(sortExpression, sortDirection);
		OnSorting(gridViewSortEventArgs);
		if (!gridViewSortEventArgs.Cancel)
		{
			if (base.IsBoundUsingDataSourceID)
			{
				EditIndex = -1;
				PageIndex = 0;
				SortExpression = gridViewSortEventArgs.SortExpression;
				SortDirection = gridViewSortEventArgs.SortDirection;
			}
			OnSorted(EventArgs.Empty);
		}
	}

	/// <summary>Selects the row to edit in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="rowIndex">The index of the row to edit.</param>
	public void SelectRow(int rowIndex)
	{
		GridViewSelectEventArgs gridViewSelectEventArgs = new GridViewSelectEventArgs(rowIndex);
		OnSelectedIndexChanging(gridViewSelectEventArgs);
		if (!gridViewSelectEventArgs.Cancel)
		{
			RequireBinding();
			SelectedIndex = gridViewSelectEventArgs.NewSelectedIndex;
			OnSelectedIndexChanged(EventArgs.Empty);
		}
	}

	/// <summary>Sets the page index of the <see cref="T:System.Web.UI.WebControls.GridView" /> control by using the row index.</summary>
	/// <param name="rowIndex">The index of the row on the page to edit.</param>
	public void SetPageIndex(int rowIndex)
	{
		GridViewPageEventArgs gridViewPageEventArgs = new GridViewPageEventArgs(rowIndex);
		OnPageIndexChanging(gridViewPageEventArgs);
		if (!gridViewPageEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			EndRowEdit();
			PageIndex = gridViewPageEventArgs.NewPageIndex;
			OnPageIndexChanged(EventArgs.Empty);
		}
	}

	/// <summary>Puts a row in edit mode in a <see cref="T:System.Web.UI.WebControls.GridView" /> control by using the specified row index.</summary>
	/// <param name="rowIndex">The index of the row to edit.</param>
	public void SetEditRow(int rowIndex)
	{
		GridViewEditEventArgs gridViewEditEventArgs = new GridViewEditEventArgs(rowIndex);
		OnRowEditing(gridViewEditEventArgs);
		if (!gridViewEditEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			EditIndex = gridViewEditEventArgs.NewEditIndex;
		}
	}

	private void CancelEdit()
	{
		GridViewCancelEditEventArgs gridViewCancelEditEventArgs = new GridViewCancelEditEventArgs(EditIndex);
		OnRowCancelingEdit(gridViewCancelEditEventArgs);
		if (!gridViewCancelEditEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			EndRowEdit();
		}
	}

	/// <summary>Updates the record at the specified row index using the field values of the row.</summary>
	/// <param name="rowIndex">The index of the row to update.</param>
	/// <param name="causesValidation">
	///       <see langword="true" /> to perform page validation when this method is called; otherwise, <see langword="false" />.</param>
	/// <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source control, but the <see cref="T:System.Web.UI.DataSourceView" /> associated with the data source is <see langword="null" />.</exception>
	[MonoTODO("Support two-way binding expressions")]
	public virtual void UpdateRow(int rowIndex, bool causesValidation)
	{
		if (rowIndex != EditIndex)
		{
			throw new NotSupportedException();
		}
		GridViewRow row = Rows[rowIndex];
		UpdateRow(row, rowIndex, causesValidation);
	}

	private void UpdateRow(GridViewRow row, int rowIndex, bool causesValidation)
	{
		if (!causesValidation || Page == null || Page.IsValid)
		{
			currentEditOldValues = CopyOrderedDictionary(OldEditValues.Values);
			currentEditRowKeys = CopyOrderedDictionary(DataKeys[rowIndex].Values);
			currentEditNewValues = GetRowValues(row, includeReadOnlyFields: false, includePrimaryKey: false);
			GridViewUpdateEventArgs gridViewUpdateEventArgs = new GridViewUpdateEventArgs(rowIndex, currentEditRowKeys, currentEditOldValues, currentEditNewValues);
			OnRowUpdating(gridViewUpdateEventArgs);
			if (!gridViewUpdateEventArgs.Cancel && base.IsBoundUsingDataSourceID)
			{
				(GetData() ?? throw new HttpException("The DataSourceView associated to data bound control was null")).Update(currentEditRowKeys, currentEditNewValues, currentEditOldValues, UpdateCallback);
			}
		}
	}

	private static IOrderedDictionary CopyOrderedDictionary(IOrderedDictionary sourceDic)
	{
		OrderedDictionary orderedDictionary = new OrderedDictionary();
		foreach (object key in sourceDic.Keys)
		{
			orderedDictionary.Add(key, sourceDic[key]);
		}
		return orderedDictionary;
	}

	private bool UpdateCallback(int recordsAffected, Exception exception)
	{
		GridViewUpdatedEventArgs gridViewUpdatedEventArgs = new GridViewUpdatedEventArgs(recordsAffected, exception, currentEditRowKeys, currentEditOldValues, currentEditNewValues);
		OnRowUpdated(gridViewUpdatedEventArgs);
		if (!gridViewUpdatedEventArgs.KeepInEditMode)
		{
			EndRowEdit();
		}
		return gridViewUpdatedEventArgs.ExceptionHandled;
	}

	/// <summary>Deletes the record at the specified index from the data source.</summary>
	/// <param name="rowIndex">The index of the row to delete.</param>
	/// <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is not bound to a data source control.</exception>
	/// <exception cref="T:System.NotSupportedException">The data source control that the <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to does not support delete operations, or there is no delete command defined for the data source.</exception>
	public virtual void DeleteRow(int rowIndex)
	{
		GridViewRow row = Rows[rowIndex];
		currentEditRowKeys = CopyOrderedDictionary(DataKeys[rowIndex].Values);
		currentEditNewValues = GetRowValues(row, includeReadOnlyFields: true, includePrimaryKey: true);
		GridViewDeleteEventArgs gridViewDeleteEventArgs = new GridViewDeleteEventArgs(rowIndex, currentEditRowKeys, currentEditNewValues);
		OnRowDeleting(gridViewDeleteEventArgs);
		if (!gridViewDeleteEventArgs.Cancel && base.IsBoundUsingDataSourceID)
		{
			RequireBinding();
			DataSourceView data = GetData();
			if (data != null)
			{
				data.Delete(currentEditRowKeys, currentEditNewValues, DeleteCallback);
				return;
			}
			GridViewDeletedEventArgs e = new GridViewDeletedEventArgs(0, null, currentEditRowKeys, currentEditNewValues);
			OnRowDeleted(e);
		}
	}

	private bool DeleteCallback(int recordsAffected, Exception exception)
	{
		GridViewDeletedEventArgs gridViewDeletedEventArgs = new GridViewDeletedEventArgs(recordsAffected, exception, currentEditRowKeys, currentEditNewValues);
		OnRowDeleted(gridViewDeletedEventArgs);
		return gridViewDeletedEventArgs.ExceptionHandled;
	}

	private void EndRowEdit()
	{
		EditIndex = -1;
		oldEditValues = new DataKey(new OrderedDictionary());
		currentEditRowKeys = null;
		currentEditOldValues = null;
		currentEditNewValues = null;
	}

	/// <summary>Loads the state of the properties in the <see cref="T:System.Web.UI.WebControls.GridView" /> control that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to <see langword="false" />.</summary>
	/// <param name="savedState">An <see cref="T:System.Object" /> that contains the saved control state values for the control.</param>
	protected internal override void LoadControlState(object savedState)
	{
		if (savedState != null)
		{
			object[] array = (object[])savedState;
			base.LoadControlState(array[0]);
			pageIndex = (int)array[1];
			selectedIndex = (int)array[2];
			editIndex = (int)array[3];
			sortExpression = (string)array[4];
			sortDirection = (SortDirection)array[5];
			DataKeyNames = (string[])array[6];
			if (array[7] != null)
			{
				LoadDataKeyArrayState((object[])array[7], out keys);
			}
			if (array[8] != null)
			{
				((IStateManager)OldEditValues).LoadViewState(array[8]);
			}
			pageCount = (int)array[9];
			if (array[10] != null)
			{
				ClientIDRowSuffix = (string[])array[10];
			}
			if (array[11] != null)
			{
				LoadDataKeyArrayState((object[])array[11], out rowSuffixKeys);
			}
		}
	}

	/// <summary>Saves the state of the properties in the <see cref="T:System.Web.UI.WebControls.GridView" /> control that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to <see langword="false" />.</summary>
	/// <returns>Returns the server control's current view state. If there is no view state associated with the control, this method returns <see langword="null" />.</returns>
	protected internal override object SaveControlState()
	{
		if (EnableSortingAndPagingCallbacks)
		{
			ClientScriptManager clientScriptManager = Page?.ClientScript;
			if (clientScriptManager != null)
			{
				clientScriptManager.RegisterHiddenField(ClientID + "_Page", PageIndex.ToString());
				clientScriptManager.RegisterHiddenField(ClientID + "_SortExpression", SortExpression);
				clientScriptManager.RegisterHiddenField(ClientID + "_SortDirection", ((int)SortDirection).ToString());
			}
		}
		object obj = base.SaveControlState();
		return new object[12]
		{
			obj,
			pageIndex,
			selectedIndex,
			editIndex,
			sortExpression,
			sortDirection,
			DataKeyNames,
			SaveDataKeyArrayState(keys),
			(oldEditValues == null) ? null : ((IStateManager)oldEditValues).SaveViewState(),
			pageCount,
			ClientIDRowSuffix,
			SaveDataKeyArrayState(rowSuffixKeys)
		};
	}

	private object[] SaveDataKeyArrayState(DataKeyArray keys)
	{
		if (keys == null)
		{
			return null;
		}
		object[] array = new object[keys.Count];
		for (int i = 0; i < keys.Count; i++)
		{
			array[i] = ((IStateManager)keys[i]).SaveViewState();
		}
		return array;
	}

	private void LoadDataKeyArrayState(object[] state, out DataKeyArray keys)
	{
		List<DataKey> dataKeyList = DataKeyList;
		string[] array = DataKeyNames;
		int capacity = array.Length;
		for (int i = 0; i < state.Length; i++)
		{
			DataKey dataKey = new DataKey(new OrderedDictionary(capacity), array);
			((IStateManager)dataKey).LoadViewState(state[i]);
			dataKeyList.Add(dataKey);
		}
		keys = new DataKeyArray(dataKeyList);
	}

	/// <summary>Tracks view-state changes to the <see cref="T:System.Web.UI.WebControls.GridView" /> control so they can be stored in the control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through the <see cref="P:System.Web.UI.Control.ViewState" /> property.</summary>
	protected override void TrackViewState()
	{
		base.TrackViewState();
		if (columns != null)
		{
			((IStateManager)columns).TrackViewState();
		}
		if (pagerSettings != null)
		{
			((IStateManager)pagerSettings).TrackViewState();
		}
		if (alternatingRowStyle != null)
		{
			((IStateManager)alternatingRowStyle).TrackViewState();
		}
		if (footerStyle != null)
		{
			((IStateManager)footerStyle).TrackViewState();
		}
		if (headerStyle != null)
		{
			((IStateManager)headerStyle).TrackViewState();
		}
		if (pagerStyle != null)
		{
			((IStateManager)pagerStyle).TrackViewState();
		}
		if (rowStyle != null)
		{
			((IStateManager)rowStyle).TrackViewState();
		}
		if (selectedRowStyle != null)
		{
			((IStateManager)selectedRowStyle).TrackViewState();
		}
		if (editRowStyle != null)
		{
			((IStateManager)editRowStyle).TrackViewState();
		}
		if (emptyDataRowStyle != null)
		{
			((IStateManager)emptyDataRowStyle).TrackViewState();
		}
		if (sortedAscendingCellStyle != null)
		{
			((IStateManager)sortedAscendingCellStyle).TrackViewState();
		}
		if (sortedAscendingHeaderStyle != null)
		{
			((IStateManager)sortedAscendingHeaderStyle).TrackViewState();
		}
		if (sortedDescendingCellStyle != null)
		{
			((IStateManager)sortedDescendingCellStyle).TrackViewState();
		}
		if (sortedDescendingHeaderStyle != null)
		{
			((IStateManager)sortedDescendingHeaderStyle).TrackViewState();
		}
		if (rowSuffixKeys != null)
		{
			((IStateManager)rowSuffixKeys).TrackViewState();
		}
		if (keys != null)
		{
			((IStateManager)keys).TrackViewState();
		}
		if (autoFieldProperties != null)
		{
			AutoGeneratedFieldProperties[] array = autoFieldProperties;
			for (int i = 0; i < array.Length; i++)
			{
				((IStateManager)array[i]).TrackViewState();
			}
		}
	}

	/// <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <returns>A <see cref="T:System.Object" /> that contains the saved view state values for the control.</returns>
	protected override object SaveViewState()
	{
		object[] array = null;
		if (autoFieldProperties != null)
		{
			object[] array2 = new object[autoFieldProperties.Length];
			bool flag = true;
			for (int i = 0; i < array2.Length; i++)
			{
				array2[i] = ((IStateManager)autoFieldProperties[i]).SaveViewState();
				if (array2[i] != null)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				array = array2;
			}
		}
		object[] array3 = new object[16]
		{
			base.SaveViewState(),
			(columns == null) ? null : ((IStateManager)columns).SaveViewState(),
			(pagerSettings == null) ? null : ((IStateManager)pagerSettings).SaveViewState(),
			(alternatingRowStyle == null) ? null : ((IStateManager)alternatingRowStyle).SaveViewState(),
			(footerStyle == null) ? null : ((IStateManager)footerStyle).SaveViewState(),
			(headerStyle == null) ? null : ((IStateManager)headerStyle).SaveViewState(),
			(pagerStyle == null) ? null : ((IStateManager)pagerStyle).SaveViewState(),
			(rowStyle == null) ? null : ((IStateManager)rowStyle).SaveViewState(),
			(selectedRowStyle == null) ? null : ((IStateManager)selectedRowStyle).SaveViewState(),
			(editRowStyle == null) ? null : ((IStateManager)editRowStyle).SaveViewState(),
			(emptyDataRowStyle == null) ? null : ((IStateManager)emptyDataRowStyle).SaveViewState(),
			array,
			(sortedAscendingCellStyle == null) ? null : ((IStateManager)sortedAscendingCellStyle).SaveViewState(),
			(sortedAscendingHeaderStyle == null) ? null : ((IStateManager)sortedAscendingHeaderStyle).SaveViewState(),
			(sortedDescendingCellStyle == null) ? null : ((IStateManager)sortedDescendingCellStyle).SaveViewState(),
			(sortedDescendingHeaderStyle == null) ? null : ((IStateManager)sortedDescendingHeaderStyle).SaveViewState()
		};
		for (int num = array3.Length - 1; num >= 0; num--)
		{
			if (array3[num] != null)
			{
				return array3;
			}
		}
		return null;
	}

	/// <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
	/// <param name="savedState">An <see cref="T:System.Object" /> that contains the saved view state values for the control. </param>
	protected override void LoadViewState(object savedState)
	{
		if (savedState == null)
		{
			base.LoadViewState((object)null);
			return;
		}
		object[] array = (object[])savedState;
		if (array[11] != null)
		{
			object[] array2 = (object[])array[11];
			autoFieldProperties = new AutoGeneratedFieldProperties[array2.Length];
			for (int i = 0; i < array2.Length; i++)
			{
				IStateManager stateManager = new AutoGeneratedFieldProperties();
				stateManager.TrackViewState();
				stateManager.LoadViewState(array2[i]);
				autoFieldProperties[i] = (AutoGeneratedFieldProperties)stateManager;
			}
		}
		base.LoadViewState(array[0]);
		if (array[1] != null)
		{
			((IStateManager)Columns).LoadViewState(array[1]);
		}
		if (array[2] != null)
		{
			((IStateManager)PagerSettings).LoadViewState(array[2]);
		}
		if (array[3] != null)
		{
			((IStateManager)AlternatingRowStyle).LoadViewState(array[3]);
		}
		if (array[4] != null)
		{
			((IStateManager)FooterStyle).LoadViewState(array[4]);
		}
		if (array[5] != null)
		{
			((IStateManager)HeaderStyle).LoadViewState(array[5]);
		}
		if (array[6] != null)
		{
			((IStateManager)PagerStyle).LoadViewState(array[6]);
		}
		if (array[7] != null)
		{
			((IStateManager)RowStyle).LoadViewState(array[7]);
		}
		if (array[8] != null)
		{
			((IStateManager)SelectedRowStyle).LoadViewState(array[8]);
		}
		if (array[9] != null)
		{
			((IStateManager)EditRowStyle).LoadViewState(array[9]);
		}
		if (array[10] != null)
		{
			((IStateManager)EmptyDataRowStyle).LoadViewState(array[10]);
		}
		if (array[12] != null)
		{
			((IStateManager)sortedAscendingCellStyle).LoadViewState(array[12]);
		}
		if (array[13] != null)
		{
			((IStateManager)sortedAscendingHeaderStyle).LoadViewState(array[13]);
		}
		if (array[14] != null)
		{
			((IStateManager)sortedDescendingCellStyle).LoadViewState(array[14]);
		}
		if (array[15] != null)
		{
			((IStateManager)sortedDescendingHeaderStyle).LoadViewState(array[15]);
		}
	}

	/// <summary>Creates the arguments for the callback handler in the <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" /> method.</summary>
	/// <param name="eventArgument">The argument to pass to the event handler.</param>
	void ICallbackEventHandler.RaiseCallbackEvent(string eventArgument)
	{
		RaiseCallbackEvent(eventArgument);
	}

	/// <summary>Creates the arguments for the callback handler in the <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" /> method.</summary>
	/// <param name="eventArgument">The argument to pass to the event handler.</param>
	protected virtual void RaiseCallbackEvent(string eventArgument)
	{
		string[] array = eventArgument.Split('|');
		PageIndex = int.Parse(array[0]);
		SortExpression = HttpUtility.UrlDecode(array[1]);
		SortDirection = (SortDirection)int.Parse(array[2]);
		RaisePostBackEvent(array[3]);
		DataBind();
	}

	/// <summary>Returns the result of a callback event that targets a control.</summary>
	/// <returns>The results of the callback.</returns>
	string ICallbackEventHandler.GetCallbackResult()
	{
		return GetCallbackResult();
	}

	/// <summary>Returns the result of a callback event that targets a control.</summary>
	/// <returns>The results of the callback.</returns>
	protected virtual string GetCallbackResult()
	{
		PrepareControlHierarchy();
		StringWriter stringWriter = new StringWriter();
		stringWriter.Write(PageIndex.ToString() + "|" + SortExpression + "|" + (int)SortDirection + "|");
		HtmlTextWriter writer = new HtmlTextWriter(stringWriter);
		RenderGrid(writer);
		return stringWriter.ToString();
	}

	/// <summary>Creates the callback script for a button that performs a sorting operation.</summary>
	/// <param name="buttonControl">The button control for which to create the callback script.</param>
	/// <param name="argument">The arguments to pass to the callback script.</param>
	/// <returns>The callback script for a button that performs a sorting operation.</returns>
	string ICallbackContainer.GetCallbackScript(IButtonControl buttonControl, string argument)
	{
		return GetCallbackScript(buttonControl, argument);
	}

	/// <summary>Creates the callback script for a button that performs a sorting operation.</summary>
	/// <param name="buttonControl">The button control for which to create the callback script.</param>
	/// <param name="argument">The arguments to pass to the callback script.</param>
	/// <returns>The callback script for a button that performs a sorting operation.</returns>
	protected virtual string GetCallbackScript(IButtonControl buttonControl, string argument)
	{
		if (EnableSortingAndPagingCallbacks)
		{
			Page?.ClientScript.RegisterForEventValidation(UniqueID, argument);
			return "javascript:GridView_ClientEvent (\"" + ClientID + "\",\"" + buttonControl.CommandName + "$" + buttonControl.CommandArgument + "\"); return false;";
		}
		return null;
	}

	/// <summary>Sets the initialized state of the data-bound control before the control is loaded.</summary>
	/// <param name="sender">The source of the event.</param>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected override void OnPagePreLoad(object sender, EventArgs e)
	{
		base.OnPagePreLoad(sender, e);
		Page page = Page;
		if (page == null || !page.IsPostBack || !EnableSortingAndPagingCallbacks)
		{
			return;
		}
		HttpRequest request = page.Request;
		if (request != null)
		{
			if (int.TryParse(request.Form[ClientID + "_Page"], out var result))
			{
				PageIndex = result;
			}
			if (int.TryParse(request.Form[ClientID + "_SortDirection"], out result))
			{
				SortDirection = (SortDirection)result;
			}
			SortExpression = request.Form[ClientID + "_SortExpression"];
		}
	}

	/// <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.</summary>
	/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
	protected internal override void OnPreRender(EventArgs e)
	{
		base.OnPreRender(e);
		if (!EnableSortingAndPagingCallbacks)
		{
			return;
		}
		Page page = Page;
		ClientScriptManager clientScriptManager = page?.ClientScript;
		if (clientScriptManager != null)
		{
			if (!clientScriptManager.IsClientScriptIncludeRegistered(typeof(GridView), "GridView.js"))
			{
				string webResourceUrl = clientScriptManager.GetWebResourceUrl(typeof(GridView), "GridView.js");
				clientScriptManager.RegisterClientScriptInclude(typeof(GridView), "GridView.js", webResourceUrl);
			}
			string text = ClientID + "_data";
			string script = string.Format("var {0} = new Object ();\n{0}.pageIndex = {1};\n{0}.sortExp = {2};\n{0}.sortDir = {3};\n{0}.uid = {4};\n{0}.form = {5};\n", text, ClientScriptManager.GetScriptLiteral(PageIndex), ClientScriptManager.GetScriptLiteral((SortExpression == null) ? string.Empty : SortExpression), ClientScriptManager.GetScriptLiteral((int)SortDirection), ClientScriptManager.GetScriptLiteral(UniqueID), page.theForm);
			clientScriptManager.RegisterStartupScript(typeof(TreeView), UniqueID, script, addScriptTags: true);
			clientScriptManager.GetCallbackEventReference(this, "null", string.Empty, "null");
			clientScriptManager.GetPostBackClientHyperlink(this, string.Empty);
		}
	}

	/// <summary>Renders the Web server control content to the client's browser using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
	/// <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> used to render the server control content on the client's browser. </param>
	protected internal override void Render(HtmlTextWriter writer)
	{
		PrepareControlHierarchy();
		if (EnableSortingAndPagingCallbacks)
		{
			writer.AddAttribute(HtmlTextWriterAttribute.Id, ClientID + "_div");
		}
		writer.RenderBeginTag(HtmlTextWriterTag.Div);
		RenderGrid(writer);
		writer.RenderEndTag();
	}

	private void RenderGrid(HtmlTextWriter writer)
	{
		if (table != null)
		{
			table.Render(writer);
		}
	}

	/// <summary>Creates a <see cref="T:System.Web.UI.PostBackOptions" /> object that represents the postback behavior of the specified button control.</summary>
	/// <param name="buttonControl">The button control for which to create the callback script.</param>
	/// <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> that represents the postback behavior of the specified button control.</returns>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="buttonControl" /> parameter contains <see langword="null" />.</exception>
	/// <exception cref="T:System.InvalidOperationException">
	///         <paramref name="buttonControl" /> causes validation and is attempting to post back to the same container it validates.</exception>
	PostBackOptions IPostBackContainer.GetPostBackOptions(IButtonControl control)
	{
		if (control == null)
		{
			throw new ArgumentNullException("control");
		}
		if (control.CausesValidation)
		{
			throw new InvalidOperationException("A button that causes validation in GridView '" + ID + "' is attempting to use the container GridView as the post back target.  The button should either turn off validation or use itself as the post back container.");
		}
		return new PostBackOptions(this)
		{
			Argument = control.CommandName + "$" + control.CommandArgument,
			RequiresJavaScriptProtocol = true
		};
	}

	static GridView()
	{
		PageIndexChanged = new object();
		PageIndexChanging = new object();
		RowCancelingEdit = new object();
		RowCommand = new object();
		RowCreated = new object();
		RowDataBound = new object();
		RowDeleted = new object();
		RowDeleting = new object();
		RowEditing = new object();
		RowUpdated = new object();
		RowUpdating = new object();
		SelectedIndexChanged = new object();
		SelectedIndexChanging = new object();
		Sorted = new object();
		Sorting = new object();
	}
}
