using System.Collections.Specialized;
using System.Configuration;
using System.Configuration.Provider;
using System.Data;
using System.Data.Common;
using System.Security.Cryptography;
using System.Text;
using System.Web.Configuration;
using System.Web.Hosting;
using System.Web.Properties;
using Mono.Data.Sqlite;

namespace System.Web.Security;

internal class SqliteMembershipProvider : MembershipProvider
{
	private enum FailureType
	{
		Password,
		PasswordAnswer
	}

	private const string m_TableName = "Users";

	private string m_ConnectionString = string.Empty;

	private const int m_NewPasswordLength = 8;

	private bool machineKeyIsAutoGenerated;

	private MachineKeySection m_MachineKey;

	private string m_ApplicationName = string.Empty;

	private bool m_EnablePasswordReset;

	private bool m_EnablePasswordRetrieval;

	private bool m_RequiresQuestionAndAnswer;

	private bool m_RequiresUniqueEmail;

	private int m_MaxInvalidPasswordAttempts;

	private int m_PasswordAttemptWindow;

	private MembershipPasswordFormat m_PasswordFormat;

	private int m_MinRequiredNonAlphanumericCharacters;

	private int m_MinRequiredPasswordLength;

	private string m_PasswordStrengthRegularExpression = string.Empty;

	public override string ApplicationName
	{
		get
		{
			return m_ApplicationName;
		}
		set
		{
			m_ApplicationName = value;
		}
	}

	public override bool EnablePasswordReset => m_EnablePasswordReset;

	public override bool EnablePasswordRetrieval => m_EnablePasswordRetrieval;

	public override bool RequiresQuestionAndAnswer => m_RequiresQuestionAndAnswer;

	public override bool RequiresUniqueEmail => m_RequiresUniqueEmail;

	public override int MaxInvalidPasswordAttempts => m_MaxInvalidPasswordAttempts;

	public override int PasswordAttemptWindow => m_PasswordAttemptWindow;

	public override MembershipPasswordFormat PasswordFormat => m_PasswordFormat;

	public override int MinRequiredNonAlphanumericCharacters => m_MinRequiredNonAlphanumericCharacters;

	public override int MinRequiredPasswordLength => m_MinRequiredPasswordLength;

	public override string PasswordStrengthRegularExpression => m_PasswordStrengthRegularExpression;

	private DbParameter AddParameter(DbCommand command, string parameterName, object parameterValue)
	{
		return AddParameter(command, parameterName, ParameterDirection.Input, parameterValue);
	}

	private DbParameter AddParameter(DbCommand command, string parameterName, ParameterDirection direction, object parameterValue)
	{
		DbParameter dbParameter = command.CreateParameter();
		dbParameter.ParameterName = parameterName;
		dbParameter.Value = parameterValue;
		dbParameter.Direction = direction;
		command.Parameters.Add(dbParameter);
		return dbParameter;
	}

	public override void Initialize(string name, NameValueCollection config)
	{
		if (config == null)
		{
			throw new ArgumentNullException("Config", System.Web.Properties.Resources.ErrArgumentNull);
		}
		if (string.IsNullOrEmpty(name))
		{
			name = System.Web.Properties.Resources.MembershipProviderDefaultName;
		}
		if (string.IsNullOrEmpty(config["description"]))
		{
			config.Remove("description");
			config.Add("description", System.Web.Properties.Resources.MembershipProviderDefaultDescription);
		}
		base.Initialize(name, config);
		m_ApplicationName = GetConfigValue(config["applicationName"], HostingEnvironment.ApplicationVirtualPath);
		m_MaxInvalidPasswordAttempts = Convert.ToInt32(GetConfigValue(config["maxInvalidPasswordAttempts"], "5"));
		m_PasswordAttemptWindow = Convert.ToInt32(GetConfigValue(config["passwordAttemptWindow"], "10"));
		m_MinRequiredNonAlphanumericCharacters = Convert.ToInt32(GetConfigValue(config["minRequiredNonAlphanumericCharacters"], "1"));
		m_MinRequiredPasswordLength = Convert.ToInt32(GetConfigValue(config["minRequiredPasswordLength"], "7"));
		m_PasswordStrengthRegularExpression = Convert.ToString(GetConfigValue(config["passwordStrengthRegularExpression"], ""));
		m_EnablePasswordReset = Convert.ToBoolean(GetConfigValue(config["enablePasswordReset"], "true"));
		m_EnablePasswordRetrieval = Convert.ToBoolean(GetConfigValue(config["enablePasswordRetrieval"], "true"));
		m_RequiresQuestionAndAnswer = Convert.ToBoolean(GetConfigValue(config["requiresQuestionAndAnswer"], "false"));
		m_RequiresUniqueEmail = Convert.ToBoolean(GetConfigValue(config["requiresUniqueEmail"], "true"));
		switch (GetConfigValue(config["passwordFormat"], "Hashed"))
		{
		case "Hashed":
			m_PasswordFormat = MembershipPasswordFormat.Hashed;
			break;
		case "Encrypted":
			m_PasswordFormat = MembershipPasswordFormat.Encrypted;
			break;
		case "Clear":
			m_PasswordFormat = MembershipPasswordFormat.Clear;
			break;
		default:
			throw new ProviderException(System.Web.Properties.Resources.ErrPwFormatNotSupported);
		}
		string text = config["connectionStringName"];
		if (string.IsNullOrEmpty(text))
		{
			throw new ArgumentOutOfRangeException("ConnectionStringName", System.Web.Properties.Resources.ErrArgumentNullOrEmpty);
		}
		ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[text];
		if (connectionStringSettings == null || string.IsNullOrEmpty(connectionStringSettings.ConnectionString.Trim()))
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrConnectionStringNullOrEmpty);
		}
		m_ConnectionString = connectionStringSettings.ConnectionString;
		m_MachineKey = (MachineKeySection)WebConfigurationManager.GetSection("system.web/machineKey", null);
		if (m_PasswordFormat.Equals(MembershipPasswordFormat.Clear))
		{
			return;
		}
		if (m_MachineKey == null)
		{
			throw new ArgumentNullException("system.web/machineKey", System.Web.Properties.Resources.ErrArgumentNull);
		}
		if (m_MachineKey.ValidationKey.Contains("AutoGenerate"))
		{
			machineKeyIsAutoGenerated = true;
			if (m_PasswordFormat.Equals(MembershipPasswordFormat.Encrypted))
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrAutoGeneratedKeyNotSupported);
			}
		}
	}

	public override bool ChangePassword(string username, string oldPassword, string newPassword)
	{
		if (!ValidateUser(username, oldPassword))
		{
			return false;
		}
		ValidatePasswordEventArgs validatePasswordEventArgs = new ValidatePasswordEventArgs(username, newPassword, isNewUser: true);
		OnValidatingPassword(validatePasswordEventArgs);
		if (validatePasswordEventArgs.Cancel)
		{
			if (validatePasswordEventArgs.FailureInformation != null)
			{
				throw validatePasswordEventArgs.FailureInformation;
			}
			throw new MembershipPasswordException(System.Web.Properties.Resources.ErrPasswordChangeCanceled);
		}
		int num = 0;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("UPDATE \"{0}\" SET \"Password\" = @Password, \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Password", EncodePassword(newPassword));
			AddParameter(sqliteCommand, "@LastPasswordChangedDate", DateTime.Now);
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				num = sqliteCommand.ExecuteNonQuery();
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (num > 0)
		{
			return true;
		}
		return false;
	}

	public override bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
	{
		if (!ValidateUser(username, password))
		{
			return false;
		}
		int num = 0;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion, \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@PasswordQuestion", newPasswordQuestion);
			AddParameter(sqliteCommand, "@PasswordAnswer", EncodePassword(newPasswordAnswer));
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				num = sqliteCommand.ExecuteNonQuery();
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (num > 0)
		{
			return true;
		}
		return false;
	}

	public override MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status)
	{
		ValidatePasswordEventArgs validatePasswordEventArgs = new ValidatePasswordEventArgs(username, password, isNewUser: true);
		OnValidatingPassword(validatePasswordEventArgs);
		if (validatePasswordEventArgs.Cancel)
		{
			status = MembershipCreateStatus.InvalidPassword;
			return null;
		}
		if (RequiresUniqueEmail && string.IsNullOrEmpty(email))
		{
			status = MembershipCreateStatus.InvalidEmail;
			return null;
		}
		if (RequiresUniqueEmail && !string.IsNullOrEmpty(GetUserNameByEmail(email)))
		{
			status = MembershipCreateStatus.DuplicateEmail;
			return null;
		}
		if (GetUser(username, userIsOnline: false) == null)
		{
			DateTime now = DateTime.Now;
			if (providerUserKey == null)
			{
				providerUserKey = Guid.NewGuid();
			}
			else if (!(providerUserKey is Guid))
			{
				status = MembershipCreateStatus.InvalidProviderUserKey;
				return null;
			}
			using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("INSERT INTO \"{0}\" (\"pId\", \"Username\", \"Password\", \"Email\", \"PasswordQuestion\", \"PasswordAnswer\", \"IsApproved\", \"CreationDate\", \"LastPasswordChangedDate\", \"LastActivityDate\", \"ApplicationName\", \"IsLockedOut\", \"LastLockedOutDate\", \"FailedPasswordAttemptCount\", \"FailedPasswordAttemptWindowStart\", \"FailedPasswordAnswerAttemptCount\", \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId, @Username, @Password, @Email, @PasswordQuestion, @PasswordAnswer, @IsApproved, @CreationDate, @LastPasswordChangedDate, @LastActivityDate, @ApplicationName, @IsLockedOut, @LastLockedOutDate, @FailedPasswordAttemptCount, @FailedPasswordAttemptWindowStart, @FailedPasswordAnswerAttemptCount, @FailedPasswordAnswerAttemptWindowStart)", "Users");
			AddParameter(sqliteCommand, "@pId", providerUserKey);
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@Password", EncodePassword(password));
			AddParameter(sqliteCommand, "@Email", email);
			AddParameter(sqliteCommand, "@PasswordQuestion", passwordQuestion);
			AddParameter(sqliteCommand, "@PasswordAnswer", EncodePassword(passwordAnswer));
			AddParameter(sqliteCommand, "@IsApproved", isApproved);
			AddParameter(sqliteCommand, "@CreationDate", now);
			AddParameter(sqliteCommand, "@LastPasswordChangedDate", now);
			AddParameter(sqliteCommand, "@LastActivityDate", now);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			AddParameter(sqliteCommand, "@IsLockedOut", false);
			AddParameter(sqliteCommand, "@LastLockedOutDate", now);
			AddParameter(sqliteCommand, "@FailedPasswordAttemptCount", 0);
			AddParameter(sqliteCommand, "@FailedPasswordAttemptWindowStart", now);
			AddParameter(sqliteCommand, "@FailedPasswordAnswerAttemptCount", 0);
			AddParameter(sqliteCommand, "@FailedPasswordAnswerAttemptWindowStart", now);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				if (sqliteCommand.ExecuteNonQuery() > 0)
				{
					status = MembershipCreateStatus.Success;
				}
				else
				{
					status = MembershipCreateStatus.UserRejected;
				}
			}
			catch (SqliteException)
			{
				status = MembershipCreateStatus.ProviderError;
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
			return GetUser(username, userIsOnline: false);
		}
		status = MembershipCreateStatus.DuplicateUserName;
		return null;
	}

	public override bool DeleteUser(string username, bool deleteAllRelatedData)
	{
		int num = 0;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				num = sqliteCommand.ExecuteNonQuery();
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (num > 0)
		{
			return true;
		}
		return false;
	}

	public override MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords)
	{
		totalRecords = 0;
		MembershipUserCollection membershipUserCollection = new MembershipUserCollection();
		emailToMatch = emailToMatch.Replace('*', '%');
		emailToMatch = emailToMatch.Replace('?', '_');
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using (SqliteCommand sqliteCommand = sqliteConnection.CreateCommand())
		{
			sqliteCommand.CommandText = string.Format("SELECT Count(*) FROM \"{0}\" WHERE \"Email\" LIKE @Email AND  \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Email", emailToMatch);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				int.TryParse(sqliteCommand.ExecuteScalar().ToString(), out totalRecords);
				if (totalRecords <= 0)
				{
					return membershipUserCollection;
				}
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
		sqliteCommand2.CommandText = string.Format("SELECT \"pId\", \"Username\", \"Email\", \"PasswordQuestion\", \"Comment\", \"IsApproved\", \"IsLockedOut\", \"CreationDate\", \"LastLoginDate\", \"LastActivityDate\", \"LastPasswordChangedDate\", \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" LIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex", "Users");
		AddParameter(sqliteCommand2, "@Email", emailToMatch);
		AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
		AddParameter(sqliteCommand2, "@MaxCount", pageSize);
		AddParameter(sqliteCommand2, "@StartIndex", pageSize * pageIndex);
		try
		{
			sqliteConnection.Open();
			sqliteCommand2.Prepare();
			using SqliteDataReader sqliteDataReader = sqliteCommand2.ExecuteReader();
			while (sqliteDataReader.Read())
			{
				MembershipUser userFromReader = GetUserFromReader(sqliteDataReader);
				membershipUserCollection.Add(userFromReader);
			}
			return membershipUserCollection;
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
	{
		totalRecords = 0;
		MembershipUserCollection membershipUserCollection = new MembershipUserCollection();
		usernameToMatch = usernameToMatch.Replace('*', '%');
		usernameToMatch = usernameToMatch.Replace('?', '_');
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using (SqliteCommand sqliteCommand = sqliteConnection.CreateCommand())
		{
			sqliteCommand.CommandText = string.Format("SELECT Count(*) FROM \"{0}\" WHERE \"Username\" LIKE @Username AND  \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Username", usernameToMatch);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				int.TryParse(sqliteCommand.ExecuteScalar().ToString(), out totalRecords);
				if (totalRecords <= 0)
				{
					return membershipUserCollection;
				}
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
		sqliteCommand2.CommandText = string.Format("SELECT \"pId\", \"Username\", \"Email\", \"PasswordQuestion\", \"Comment\", \"IsApproved\", \"IsLockedOut\", \"CreationDate\", \"LastLoginDate\", \"LastActivityDate\", \"LastPasswordChangedDate\", \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" LIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex", "Users");
		AddParameter(sqliteCommand2, "@Username", usernameToMatch);
		AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
		AddParameter(sqliteCommand2, "@MaxCount", pageSize);
		AddParameter(sqliteCommand2, "@StartIndex", pageSize * pageIndex);
		try
		{
			sqliteConnection.Open();
			sqliteCommand2.Prepare();
			using SqliteDataReader sqliteDataReader = sqliteCommand2.ExecuteReader();
			while (sqliteDataReader.Read())
			{
				MembershipUser userFromReader = GetUserFromReader(sqliteDataReader);
				membershipUserCollection.Add(userFromReader);
			}
			return membershipUserCollection;
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords)
	{
		totalRecords = 0;
		MembershipUserCollection membershipUserCollection = new MembershipUserCollection();
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using (SqliteCommand sqliteCommand = sqliteConnection.CreateCommand())
		{
			sqliteCommand.CommandText = string.Format("SELECT Count(*) FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				int.TryParse(sqliteCommand.ExecuteScalar().ToString(), out totalRecords);
				if (totalRecords <= 0)
				{
					return membershipUserCollection;
				}
			}
			catch (SqliteException ex)
			{
				throw ex;
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
		sqliteCommand2.CommandText = string.Format("SELECT \"pId\", \"Username\", \"Email\", \"PasswordQuestion\", \"Comment\", \"IsApproved\", \"IsLockedOut\", \"CreationDate\", \"LastLoginDate\", \"LastActivityDate\", \"LastPasswordChangedDate\", \"LastLockedOutDate\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex", "Users");
		AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
		AddParameter(sqliteCommand2, "@MaxCount", pageSize);
		AddParameter(sqliteCommand2, "@StartIndex", pageSize * pageIndex);
		try
		{
			sqliteConnection.Open();
			sqliteCommand2.Prepare();
			using SqliteDataReader sqliteDataReader = sqliteCommand2.ExecuteReader();
			while (sqliteDataReader.Read())
			{
				MembershipUser userFromReader = GetUserFromReader(sqliteDataReader);
				membershipUserCollection.Add(userFromReader);
			}
			return membershipUserCollection;
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override int GetNumberOfUsersOnline()
	{
		int num = 0;
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
		TimeSpan value = new TimeSpan(0, Membership.UserIsOnlineTimeWindow, 0);
		DateTime dateTime = DateTime.Now.Subtract(value);
		sqliteCommand.CommandText = string.Format("SELECT Count(*) FROM \"{0}\" WHERE \"LastActivityDate\" > @CompareTime AND  \"ApplicationName\" = @ApplicationName", "Users");
		AddParameter(sqliteCommand, "@CompareTime", dateTime);
		AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
		try
		{
			sqliteConnection.Open();
			sqliteCommand.Prepare();
			return (int)sqliteCommand.ExecuteScalar();
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override string GetPassword(string username, string answer)
	{
		if (!EnablePasswordRetrieval)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrPasswordRetrievalNotEnabled);
		}
		if (PasswordFormat == MembershipPasswordFormat.Hashed)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrCantRetrieveHashedPw);
		}
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
		sqliteCommand.CommandText = string.Format("SELECT \"Password\", \"PasswordAnswer\", \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
		AddParameter(sqliteCommand, "@Username", username);
		AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
		try
		{
			sqliteConnection.Open();
			sqliteCommand.Prepare();
			using SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader();
			if (sqliteDataReader.HasRows)
			{
				sqliteDataReader.Read();
				string text = sqliteDataReader.GetString(0);
				string @string = sqliteDataReader.GetString(1);
				bool boolean = sqliteDataReader.GetBoolean(2);
				sqliteDataReader.Close();
				if (boolean)
				{
					throw new MembershipPasswordException(System.Web.Properties.Resources.ErrUserIsLoggedOut);
				}
				if (m_RequiresQuestionAndAnswer && !CheckPassword(answer, @string))
				{
					UpdateFailureCount(username, FailureType.PasswordAnswer);
					throw new MembershipPasswordException(System.Web.Properties.Resources.ErrIncorrectPasswordAnswer);
				}
				if (m_PasswordFormat == MembershipPasswordFormat.Encrypted)
				{
					text = UnEncodePassword(text);
				}
				return text;
			}
			throw new MembershipPasswordException(System.Web.Properties.Resources.ErrUserNotFound);
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override MembershipUser GetUser(string username, bool userIsOnline)
	{
		MembershipUser membershipUser = null;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("SELECT \"pId\", \"Username\", \"Email\", \"PasswordQuestion\", \"Comment\", \"IsApproved\", \"IsLockedOut\", \"CreationDate\", \"LastLoginDate\", \"LastActivityDate\", \"LastPasswordChangedDate\", \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				using SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader();
				if (sqliteDataReader.HasRows)
				{
					sqliteDataReader.Read();
					membershipUser = GetUserFromReader(sqliteDataReader);
					if (userIsOnline)
					{
						using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
						sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId", "Users");
						AddParameter(sqliteCommand2, "@LastActivityDate", DateTime.Now);
						AddParameter(sqliteCommand2, "@pId", membershipUser.ProviderUserKey);
						sqliteCommand2.Prepare();
						sqliteCommand2.ExecuteNonQuery();
					}
				}
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		return membershipUser;
	}

	public override MembershipUser GetUser(object providerUserKey, bool userIsOnline)
	{
		MembershipUser membershipUser = null;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("SELECT \"pId\", \"Username\", \"Email\", \"PasswordQuestion\", \"Comment\", \"IsApproved\", \"IsLockedOut\", \"CreationDate\", \"LastLoginDate\", \"LastActivityDate\", \"LastPasswordChangedDate\", \"LastLockedOutDate\" FROM \"{0}\" WHERE \"pId\" = @pId", "Users");
			AddParameter(sqliteCommand, "@pId", providerUserKey);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				using SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader();
				if (sqliteDataReader.HasRows)
				{
					sqliteDataReader.Read();
					membershipUser = GetUserFromReader(sqliteDataReader);
					if (userIsOnline)
					{
						using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
						sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId", "Users");
						AddParameter(sqliteCommand2, "@LastActivityDate", DateTime.Now);
						AddParameter(sqliteCommand2, "@pId", membershipUser.ProviderUserKey);
						sqliteCommand2.Prepare();
						sqliteCommand2.ExecuteNonQuery();
					}
				}
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		return membershipUser;
	}

	public override string GetUserNameByEmail(string email)
	{
		string empty = string.Empty;
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
		sqliteCommand.CommandText = string.Format("SELECT \"Username\" FROM \"{0}\" WHERE \"Email\" = @Email AND \"ApplicationName\" = @ApplicationName", "Users");
		AddParameter(sqliteCommand, "@Email", email);
		AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
		try
		{
			sqliteConnection.Open();
			sqliteCommand.Prepare();
			return (sqliteCommand.ExecuteScalar() as string) ?? string.Empty;
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override string ResetPassword(string username, string answer)
	{
		if (!m_EnablePasswordReset)
		{
			throw new NotSupportedException(System.Web.Properties.Resources.ErrPasswordResetNotEnabled);
		}
		if (string.IsNullOrEmpty(answer) && m_RequiresQuestionAndAnswer)
		{
			UpdateFailureCount(username, FailureType.PasswordAnswer);
			throw new ProviderException(System.Web.Properties.Resources.ErrPasswordAnswerRequired);
		}
		string text = Membership.GeneratePassword(8, m_MinRequiredNonAlphanumericCharacters);
		ValidatePasswordEventArgs validatePasswordEventArgs = new ValidatePasswordEventArgs(username, text, isNewUser: true);
		OnValidatingPassword(validatePasswordEventArgs);
		if (validatePasswordEventArgs.Cancel)
		{
			if (validatePasswordEventArgs.FailureInformation != null)
			{
				throw validatePasswordEventArgs.FailureInformation;
			}
			throw new MembershipPasswordException(System.Web.Properties.Resources.ErrPasswordResetCanceled);
		}
		int num = 0;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("SELECT \"PasswordAnswer\", \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				string empty = string.Empty;
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				using (SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader())
				{
					if (!sqliteDataReader.HasRows)
					{
						throw new MembershipPasswordException(System.Web.Properties.Resources.ErrUserNotFound);
					}
					sqliteDataReader.Read();
					empty = sqliteDataReader.GetString(0);
					bool boolean = sqliteDataReader.GetBoolean(1);
					sqliteDataReader.Close();
					if (boolean)
					{
						throw new MembershipPasswordException(System.Web.Properties.Resources.ErrUserIsLoggedOut);
					}
					if (m_RequiresQuestionAndAnswer && !CheckPassword(answer, empty))
					{
						UpdateFailureCount(username, FailureType.PasswordAnswer);
						throw new MembershipPasswordException(System.Web.Properties.Resources.ErrIncorrectPasswordAnswer);
					}
				}
				using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
				sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"Password\" = @Password, \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut", "Users");
				AddParameter(sqliteCommand2, "@Password", EncodePassword(text));
				AddParameter(sqliteCommand2, "@LastPasswordChangedDate", DateTime.Now);
				AddParameter(sqliteCommand2, "@Username", username);
				AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
				AddParameter(sqliteCommand2, "@IsLockedOut", false);
				sqliteCommand2.Prepare();
				num = sqliteCommand2.ExecuteNonQuery();
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (num > 0)
		{
			return text;
		}
		throw new MembershipPasswordException(System.Web.Properties.Resources.ErrPasswordResetAborted);
	}

	public override bool UnlockUser(string userName)
	{
		int num = 0;
		using (SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString))
		{
			using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
			sqliteCommand.CommandText = string.Format("UPDATE  \"{0}\" SET \"IsLockedOut\" = @IsLockedOut, \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@IsLockedOut", false);
			AddParameter(sqliteCommand, "@LastLockedOutDate", DateTime.Now);
			AddParameter(sqliteCommand, "@Username", userName);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				num = sqliteCommand.ExecuteNonQuery();
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (num > 0)
		{
			return true;
		}
		return false;
	}

	public override void UpdateUser(MembershipUser user)
	{
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using SqliteCommand sqliteCommand = sqliteConnection.CreateCommand();
		sqliteCommand.CommandText = string.Format("UPDATE  \"{0}\" SET \"Email\" = @Email, \"Comment\" = @Comment, \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
		AddParameter(sqliteCommand, "@Email", user.Email);
		AddParameter(sqliteCommand, "@Comment", user.Comment);
		AddParameter(sqliteCommand, "@IsApproved", user.IsApproved);
		AddParameter(sqliteCommand, "@Username", user.UserName);
		AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
		try
		{
			sqliteConnection.Open();
			sqliteCommand.Prepare();
			sqliteCommand.ExecuteNonQuery();
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}

	public override bool ValidateUser(string username, string password)
	{
		string dbpassword = string.Empty;
		bool flag = false;
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using (SqliteCommand sqliteCommand = sqliteConnection.CreateCommand())
		{
			sqliteCommand.CommandText = string.Format("SELECT \"Password\", \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut", "Users");
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			AddParameter(sqliteCommand, "@IsLockedOut", false);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				using SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader();
				if (!sqliteDataReader.HasRows)
				{
					return false;
				}
				sqliteDataReader.Read();
				dbpassword = sqliteDataReader.GetString(0);
				flag = sqliteDataReader.GetBoolean(1);
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		if (CheckPassword(password, dbpassword) && flag)
		{
			using (SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand())
			{
				sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
				AddParameter(sqliteCommand2, "@LastLoginDate", DateTime.Now);
				AddParameter(sqliteCommand2, "@Username", username);
				AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
				try
				{
					sqliteConnection.Open();
					sqliteCommand2.Prepare();
					sqliteCommand2.ExecuteNonQuery();
					return true;
				}
				catch (SqliteException)
				{
					throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
				}
				finally
				{
					sqliteConnection?.Close();
				}
			}
		}
		return false;
	}

	private string GetConfigValue(string configValue, string defaultValue)
	{
		if (string.IsNullOrEmpty(configValue))
		{
			return defaultValue;
		}
		return configValue;
	}

	private MembershipUser GetUserFromReader(SqliteDataReader reader)
	{
		object value = reader.GetValue(0);
		string @string = reader.GetString(1);
		string email = string.Empty;
		if (!reader.IsDBNull(2))
		{
			email = reader.GetString(2);
		}
		string passwordQuestion = string.Empty;
		if (!reader.IsDBNull(3))
		{
			passwordQuestion = reader.GetString(3);
		}
		string comment = string.Empty;
		if (!reader.IsDBNull(4))
		{
			comment = reader.GetString(4);
		}
		bool boolean = reader.GetBoolean(5);
		bool boolean2 = reader.GetBoolean(6);
		DateTime dateTime = reader.GetDateTime(7);
		DateTime lastLoginDate = default(DateTime);
		if (!reader.IsDBNull(8))
		{
			lastLoginDate = reader.GetDateTime(8);
		}
		DateTime dateTime2 = reader.GetDateTime(9);
		DateTime dateTime3 = reader.GetDateTime(10);
		DateTime lastLockoutDate = default(DateTime);
		if (!reader.IsDBNull(11))
		{
			lastLockoutDate = reader.GetDateTime(11);
		}
		return new MembershipUser(Name, @string, value, email, passwordQuestion, comment, boolean, boolean2, dateTime, lastLoginDate, dateTime2, dateTime3, lastLockoutDate);
	}

	private bool CheckPassword(string password, string dbpassword)
	{
		string text = password;
		string value = dbpassword;
		switch (PasswordFormat)
		{
		case MembershipPasswordFormat.Encrypted:
			value = UnEncodePassword(dbpassword);
			break;
		case MembershipPasswordFormat.Hashed:
			text = EncodePassword(password);
			break;
		}
		if (text.Equals(value))
		{
			return true;
		}
		return false;
	}

	private string EncodePassword(string password)
	{
		if (string.IsNullOrEmpty(password))
		{
			return password;
		}
		string result = password;
		switch (PasswordFormat)
		{
		case MembershipPasswordFormat.Encrypted:
			result = Convert.ToBase64String(EncryptPassword(Encoding.Unicode.GetBytes(password)));
			break;
		case MembershipPasswordFormat.Hashed:
		{
			HMACSHA1 hMACSHA = new HMACSHA1();
			if (machineKeyIsAutoGenerated)
			{
				hMACSHA.Key = MachineKeySection.Config.GetValidationKey();
			}
			else
			{
				hMACSHA.Key = HexToByte(m_MachineKey.ValidationKey);
			}
			result = Convert.ToBase64String(hMACSHA.ComputeHash(Encoding.Unicode.GetBytes(password)));
			break;
		}
		default:
			throw new ProviderException(System.Web.Properties.Resources.ErrPwFormatNotSupported);
		case MembershipPasswordFormat.Clear:
			break;
		}
		return result;
	}

	private string UnEncodePassword(string encodedPassword)
	{
		string text = encodedPassword;
		switch (PasswordFormat)
		{
		case MembershipPasswordFormat.Encrypted:
			text = Encoding.Unicode.GetString(DecryptPassword(Convert.FromBase64String(text)));
			break;
		case MembershipPasswordFormat.Hashed:
			throw new ProviderException(System.Web.Properties.Resources.ErrCantDecodeHashedPw);
		default:
			throw new ProviderException(System.Web.Properties.Resources.ErrPwFormatNotSupported);
		case MembershipPasswordFormat.Clear:
			break;
		}
		return text;
	}

	private byte[] HexToByte(string hexString)
	{
		byte[] array = new byte[hexString.Length / 2];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
		}
		return array;
	}

	private void UpdateFailureCount(string username, FailureType failType)
	{
		DateTime dateTime = default(DateTime);
		int num = 0;
		using SqliteConnection sqliteConnection = new SqliteConnection(m_ConnectionString);
		using (SqliteCommand sqliteCommand = sqliteConnection.CreateCommand())
		{
			sqliteCommand.CommandText = string.Format("SELECT \"FailedPasswordAttemptCount\", \"FailedPasswordAttemptWindowStart\", \"FailedPasswordAnswerAttemptCount\", \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			AddParameter(sqliteCommand, "@Username", username);
			AddParameter(sqliteCommand, "@ApplicationName", m_ApplicationName);
			try
			{
				sqliteConnection.Open();
				sqliteCommand.Prepare();
				using SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader();
				if (sqliteDataReader.HasRows)
				{
					sqliteDataReader.Read();
					if (failType.Equals(FailureType.Password))
					{
						num = sqliteDataReader.GetInt32(0);
						dateTime = sqliteDataReader.GetDateTime(1);
					}
					else if (failType.Equals(FailureType.PasswordAnswer))
					{
						num = sqliteDataReader.GetInt32(2);
						dateTime = sqliteDataReader.GetDateTime(3);
					}
				}
			}
			catch (SqliteException)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
			}
			finally
			{
				sqliteConnection?.Close();
			}
		}
		using SqliteCommand sqliteCommand2 = sqliteConnection.CreateCommand();
		DateTime dateTime2 = dateTime.AddMinutes(m_PasswordAttemptWindow);
		try
		{
			if (num == 0 || DateTime.Now > dateTime2)
			{
				if (failType.Equals(FailureType.Password))
				{
					sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count, \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
				}
				else if (failType.Equals(FailureType.PasswordAnswer))
				{
					sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count, \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
				}
				AddParameter(sqliteCommand2, "@Count", 1);
				AddParameter(sqliteCommand2, "@WindowStart", DateTime.Now);
				AddParameter(sqliteCommand2, "@Username", username);
				AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
				if (sqliteCommand2.ExecuteNonQuery() < 0)
				{
					throw new ProviderException(System.Web.Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);
				}
				return;
			}
			num++;
			if (num >= m_MaxInvalidPasswordAttempts)
			{
				sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut, \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
				AddParameter(sqliteCommand2, "@IsLockedOut", true);
				AddParameter(sqliteCommand2, "@LastLockedOutDate", DateTime.Now);
				AddParameter(sqliteCommand2, "@Username", username);
				AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
				if (sqliteCommand2.ExecuteNonQuery() < 0)
				{
					throw new ProviderException(string.Format(System.Web.Properties.Resources.ErrCantLogoutUser, username));
				}
				return;
			}
			if (failType.Equals(FailureType.Password))
			{
				sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			}
			else if (failType.Equals(FailureType.PasswordAnswer))
			{
				sqliteCommand2.CommandText = string.Format("UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName", "Users");
			}
			AddParameter(sqliteCommand2, "@Count", num);
			AddParameter(sqliteCommand2, "@Username", username);
			AddParameter(sqliteCommand2, "@ApplicationName", m_ApplicationName);
			if (sqliteCommand2.ExecuteNonQuery() < 0)
			{
				throw new ProviderException(System.Web.Properties.Resources.ErrCantUpdateFailtureCount);
			}
		}
		catch (SqliteException)
		{
			throw new ProviderException(System.Web.Properties.Resources.ErrOperationAborted);
		}
		finally
		{
			sqliteConnection?.Close();
		}
	}
}
