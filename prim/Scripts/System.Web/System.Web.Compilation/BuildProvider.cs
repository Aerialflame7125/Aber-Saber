using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Web.Configuration;
using System.Web.Hosting;
using System.Web.Util;

namespace System.Web.Compilation;

/// <summary>Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.</summary>
public abstract class BuildProvider
{
	private static Dictionary<string, Type> registeredBuildProviderTypes;

	private ArrayList ref_assemblies;

	private ICollection vpath_deps;

	private CompilationSection compilationSection;

	private VirtualPath vpath;

	private CompilationSection CompilationConfig
	{
		get
		{
			if (compilationSection == null)
			{
				compilationSection = WebConfigurationManager.GetWebApplicationSection("system.web/compilation") as CompilationSection;
			}
			return compilationSection;
		}
	}

	internal virtual string LanguageName => CompilationConfig.DefaultLanguage;

	/// <summary>Represents the compiler type used by a build provider to generate source code for a custom file type.</summary>
	/// <returns>A read-only <see cref="T:System.Web.Compilation.CompilerType" /> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns <see langword="null" />.</returns>
	public virtual CompilerType CodeCompilerType => null;

	/// <summary>Represents the assemblies to compile with the source generated by the build provider.</summary>
	/// <returns>A read-only collection of assemblies that can be referenced by the source code generated by the build provider.</returns>
	protected ICollection ReferencedAssemblies => ref_assemblies;

	/// <summary>Represents the file to be built by this build provider implementation.</summary>
	/// <returns>A read-only string that specifies the virtual path of a file to be compiled by this build provider.</returns>
	protected internal string VirtualPath
	{
		get
		{
			if (vpath == null)
			{
				return null;
			}
			return vpath.Absolute;
		}
	}

	internal VirtualPath VirtualPathInternal => vpath;

	/// <summary>Represents a collection of virtual paths that must be built before the build provider generates code.</summary>
	/// <returns>A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.</returns>
	public virtual ICollection VirtualPathDependencies
	{
		get
		{
			if (vpath_deps == null)
			{
				vpath_deps = new OneNullCollection();
			}
			return vpath_deps;
		}
	}

	internal virtual CodeCompileUnit CodeUnit => null;

	/// <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.BuildProvider" /> class. </summary>
	protected BuildProvider()
	{
		ref_assemblies = new ArrayList();
	}

	internal void SetVirtualPath(VirtualPath virtualPath)
	{
		vpath = virtualPath;
	}

	internal virtual void GenerateCode()
	{
	}

	internal virtual IDictionary<string, bool> ExtractDependencies()
	{
		return null;
	}

	/// <summary>Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.</summary>
	/// <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
	public virtual void GenerateCode(AssemblyBuilder assemblyBuilder)
	{
	}

	/// <summary>Generates a string to be persisted in the compiled assembly.</summary>
	/// <param name="results">The compilation results for the build provider's virtual path.</param>
	/// <returns>A string to be persisted in the build environment, or <see langword="null" /> if the <see cref="T:System.Web.Compilation.BuildProvider" /> instance does not implement <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />.</returns>
	public virtual string GetCustomString(CompilerResults results)
	{
		return null;
	}

	/// <summary>Returns the compiler settings for the default language in the application.</summary>
	/// <returns>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the default language in the application. The base class returns the default compiler based on the application configuration file.</returns>
	protected CompilerType GetDefaultCompilerType()
	{
		return BuildManager.GetDefaultCompilerTypeForLanguage(CompilationConfig.DefaultLanguage, CompilationConfig);
	}

	/// <summary>Returns the compiler settings for the build provider based on the specified language.</summary>
	/// <param name="language">A code language name.</param>
	/// <returns>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the build provider based on the specified language. The base class returns the default compiler settings for the language based on the application configuration file.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///         <paramref name="language" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Web.HttpException">
	///         <paramref name="language" /> does not match a configured compiler for the build provider.</exception>
	protected CompilerType GetDefaultCompilerTypeForLanguage(string language)
	{
		return BuildManager.GetDefaultCompilerTypeForLanguage(language, null);
	}

	/// <summary>Returns a type generated by the build provider from the virtual path.</summary>
	/// <param name="results">The compilation results for the build provider's virtual path.</param>
	/// <returns>The type that is generated by the build provider for the virtual path. The base class returns <see langword="null" />.</returns>
	public virtual Type GetGeneratedType(CompilerResults results)
	{
		return null;
	}

	/// <summary>Returns a value indicating actions required when a virtual path is built.</summary>
	/// <param name="results">The compilation results for the build provider's virtual path.</param>
	/// <returns>A <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value indicating actions required after the virtual path is built within the ASP.NET build environment.</returns>
	public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results)
	{
		return BuildProviderResultFlags.Default;
	}

	/// <summary>Opens a text reader for reading from the virtual path of the current build provider object.</summary>
	/// <returns>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</returns>
	protected TextReader OpenReader()
	{
		return OpenReader(VirtualPath);
	}

	/// <summary>Opens a text reader for reading from a specified virtual path.</summary>
	/// <param name="virtualPath">The virtual path to read.</param>
	/// <returns>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the specified virtual path.</returns>
	protected TextReader OpenReader(string virtualPath)
	{
		return new StreamReader(OpenStream(virtualPath), WebEncoding.FileEncoding);
	}

	/// <summary>Opens a stream for reading the virtual path of the current build provider object.</summary>
	/// <returns>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</returns>
	protected Stream OpenStream()
	{
		return OpenStream(VirtualPath);
	}

	/// <summary>Opens a stream for reading from a specified virtual path.</summary>
	/// <param name="virtualPath">The virtual path to read.</param>
	/// <returns>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the specified virtual path.</returns>
	protected Stream OpenStream(string virtualPath)
	{
		return VirtualPathProvider.OpenFile(virtualPath);
	}

	/// <summary>Registers a build provider.</summary>
	/// <param name="extension">The file-name extension that the build provider is for.</param>
	/// <param name="providerType">The build provider class.</param>
	public static void RegisterBuildProvider(string extension, Type providerType)
	{
		if (string.IsNullOrEmpty(extension))
		{
			throw new ArgumentException("The string parameter 'extension' cannot be null or empty.", "extension");
		}
		if (providerType == null)
		{
			throw new ArgumentNullException("providerType");
		}
		if (!typeof(BuildProvider).IsAssignableFrom(providerType))
		{
			throw new ArgumentException("The parameter 'providerType' is invalid", "providerType");
		}
		BuildManager.AssertPreStartMethodsRunning();
		if (registeredBuildProviderTypes == null)
		{
			registeredBuildProviderTypes = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);
		}
		registeredBuildProviderTypes[extension] = providerType;
	}

	internal static Type GetProviderTypeForExtension(string extension)
	{
		if (string.IsNullOrEmpty(extension))
		{
			return null;
		}
		Type value = null;
		if (registeredBuildProviderTypes == null || !registeredBuildProviderTypes.TryGetValue(extension, out value) || value == null)
		{
			System.Web.Configuration.BuildProvider buildProvider = ((WebConfigurationManager.GetSection("system.web/compilation") is CompilationSection compilationSection) ? compilationSection.BuildProviders : null)?[extension];
			if (buildProvider != null)
			{
				value = HttpApplication.LoadType(buildProvider.Type);
			}
		}
		return value;
	}

	internal static BuildProvider GetProviderInstanceForExtension(string extension)
	{
		Type providerTypeForExtension = GetProviderTypeForExtension(extension);
		if (providerTypeForExtension == null)
		{
			return null;
		}
		return Activator.CreateInstance(providerTypeForExtension, null) as BuildProvider;
	}
}
